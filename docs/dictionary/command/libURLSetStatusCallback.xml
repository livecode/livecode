<doc>
  <legacy_id>1982</legacy_id>
  <name>libURLSetStatusCallback</name>
  <type>command</type>
  <syntax>
    <example>libURLSetStatusCallback [<i>messageName</i>,<i>objectLongID</i>]</example>
  </syntax>
  <library>Internet library</library>
  <objects>
  </objects>
  <synonyms>
  </synonyms>
  <classification>
    <category>Networks &amp; Communication</category>
    <category>Standalone Applications</category>
  </classification>
  <references>
    <command tag="libURLDownloadToFile">libURLDownloadToFile Command</command>
    <command tag="libURLftpUpload">libURLftpUpload Command</command>
    <keyword tag="http">http Keyword</keyword>
  </references>
  <history>
    <introduced version="2.0">Added.</introduced>
  </history>
  <platforms>
    <mac/>
    <windows/>
    <linux/>
  </platforms>
  <classes>
    <desktop/>
    <server/>
    <web/>
  </classes>
  <security>
    <network/>
  </security>
  <summary>Sets up a <glossary tag="callback">callback message</glossary> to be sent periodically during <glossary tag="upload">uploads</glossary> and <glossary tag="download">downloads</glossary>.</summary>
  <examples>
    <example>libURLSetStatusCallback "putPercentage",the long ID of me</example>
    <example>libURLSetStatusCallback myAction,the long ID of button "Upload"</example>
    <example>libURLSetStatusCallback <code><i>-- turns off status callback messages</i></code></example>
  </examples>
  <description>
    <p>Use the <b>libURLSetStatusCallback</b> <glossary tag="command">command</glossary> if you want to do periodic tasks (such as updating a progress bar) during a data transfer.</p><p/><p><b>Parameters:</b></p><p>The <i>messageName</i> is the name of a <keyword tag="message box">message</keyword> to be sent whenever the <function tag="URLStatus">URLStatus</function> <control_st tag="function">function</control_st> is updated.</p><p/><p>The <i>objectLongID</i> is the <keyword tag="long">long</keyword> <property tag="ID">ID</property> of the <glossary tag="object">object</glossary> to send the <keyword tag="message box">message</keyword> to.</p><p/><p><b>Comments:</b></p><p>The Internet library periodically updates the <b>URLStatus</b> <control_st tag="function">function</control_st> during <glossary tag="upload">uploads</glossary> and <glossary tag="download">downloads</glossary> made with the <command tag="libURLDownloadToFile">libURLDownloadToFile</command>, <command tag="libURLftpUpload">libURLftpUpload</command>, <command tag="libURLftpUploadFile">libURLftpUploadFile</command>, <command tag="put">put</command>, and <command tag="load">load</command> commands, as well as <glossary tag="download">downloads</glossary> triggered by <glossary tag="evaluate">evaluating</glossary> an <keyword tag="ftp">ftp</keyword> or <keyword tag="http">http</keyword> <keyword tag="URL">URL</keyword>. Whenever the <glossary tag="Internet library">Internet library</glossary> updates the <function tag="URLStatus">URLStatus</function> <control_st tag="function">function</control_st>, it also sends any <glossary tag="callback">callback message</glossary> you've set up with the <command tag="libURLSetStatusCallback">libURLSetStatusCallback</command> <glossary tag="command">command</glossary>.</p><p/><p>Callback messages are sent even during blocking uploads and downloads (such as a download started with the <b>put</b> <glossary tag="command">command</glossary>), so you can use this method to monitor progress for all file transfers.</p><p/><p>The callback message is sent with two parameters: the URL and the URL's current status. For example, suppose you execute the following statement to set up a callback message:</p><p/><p><code>  libURLSetStatusCallback "myProgress",the long ID of button "Monitor"</code></p><p/><p>Then suppose you begin an upload with the following command:</p><p/><p><code>  put field "Data" into URL "ftp://me:mypass@ftp.example.org/myfile"</code></p><p/><p>Periodically while the text of the field is being uploaded to the file, a "myProgress" message is sent to button "Monitor". The first parameter sent with "myProgress" is the URL (in this case, the URL is "ftp://me:mypass@ftp.example.org/myfile"), and the second parameter is the current status of that URL. The "myProgress" handler might look like this:</p><p/><p><code>  on myProgress theURL,theStatus</code></p><p><code>    put theStatus into field theURL of stack "Status Monitor"</code></p><p><code>  end myProgress</code></p><p/><p>The URL status parameter is similar to the status returned by the <b>URLStatus</b> <control_st tag="function">function</control_st>, and is one of the following:</p><p/><p>"queued": on hold until a previous request to the same site is completed</p><p>"contacted": the site has been contacted but no data has been sent or received yet</p><p>"requested": the URL has been requested</p><p>"loading,<i>bytesReceived</i>,<i>bytesTotal</i>": the <keyword tag="URL">URL</keyword> data is being received</p><p>"uploading,<i>bytesReceived</i>,<i>bytesTotal</i>": the file is being <glossary tag="upload">uploaded</glossary> to the URL</p><p>"downloaded": the application has finished downloading the URL</p><p>"uploaded": the application has finished uploading the file to the URL</p><p>"error": an error occurred and the <keyword tag="URL">URL</keyword> was not transferred</p><p>"timeout": the application timed out when attempting to transfer the URL</p><p>empty: the URL was not loaded, or has been unloaded</p><p/><p><code/><b>Note:</b><code/> The third <keyword tag="item">item</keyword> (<i>bytesTotal</i>) in the "loading" or "uploading" status report is empty if it is not possible to determine the total file size. (For example, if an <keyword tag="ftp">ftp</keyword> <glossary tag="server">server</glossary> does not support the SIZE command, it's not possible to determine the file size when <glossary tag="download">downloading</glossary> a file from that <glossary tag="server">server</glossary>.)</p><p/><p>If multiple file transfers are occurring at the same time, a separate callback message is sent for each URL. If you want your callback handler to treat URLs differently (for example, if you want to display separate progress bars for different URLs, or do one thing with <b>http</b> <glossary tag="URL">URLs</glossary> and something else with <keyword tag="ftp">ftp</keyword> <glossary tag="URL">URLs</glossary>), use a <control_st tag="switch">switch</control_st> <glossary tag="control structure">control structure</glossary> in the <glossary tag="handler">handler</glossary>.</p><p/><p>You cannot have two callback messages set up at the same time for uploads and downloads. If you use the <b>libURLSetStatusCallback</b> <glossary tag="command">command</glossary> to set up a <glossary tag="callback">callback message</glossary>, the <glossary tag="Internet library">Internet library</glossary> forgets any <glossary tag="callback">callback message</glossary> you previously set up with the <glossary tag="command">command</glossary>.</p><p/><p>To turn off the callback message, use the following statement:</p><p/><p><code>  libURLSetStatusCallback </code><code><i>-- no parameters: turns off the message</i></code></p><p/><p>If you don't include the <i>messageName</i> and <i>objectLongID</i> parameters, the <b>libURLSetStatusCallback</b> <glossary tag="command">command</glossary> turns off the <glossary tag="callback">callback messages</glossary> so that updating the <function tag="URLStatus">URLStatus</function> <control_st tag="function">function</control_st> does not send any <glossary tag="message">messages</glossary>.</p><p/><p><code/><img src="202653"/> <b>Important!</b><code/> The <b>libURLSetStatusCallback</b> <glossary tag="command">command</glossary> is part of the <glossary tag="Internet library">Internet library</glossary>. To ensure that the <glossary tag="command">command</glossary> works in a <glossary tag="standalone application">standalone application</glossary>, you must include this <glossary tag="LiveCode custom library">custom library</glossary> when you create your <glossary tag="standalone application">standalone</glossary>. In the Inclusions section of the <glossary tag="Standalone Application Settings">Standalone Application Settings</glossary> window, make sure "Internet Library" is selected in the list of script libraries.</p><p/><p><code/><b>Note:</b><code/> When included in a <glossary tag="standalone application">standalone application</glossary>, the <glossary tag="Internet library">Internet library</glossary> is implemented as a hidden <command tag="group">group</command> and made available when the <command tag="group">group</command> receives its first <message tag="openBackground">openBackground</message> message. During the first part of the <glossary tag="application">application's</glossary> startup process, before this <keyword tag="message box">message</keyword> is sent, the <b>libURLSetStatusCallback</b> <glossary tag="command">command</glossary> is not yet available. This may affect attempts to use this <glossary tag="command">command</glossary> in <message tag="startup">startup</message>, <message tag="preOpenStack">preOpenStack</message>, <message tag="openStack">openStack</message>, or <message tag="preOpenCard">preOpenCard</message> <glossary tag="handler">handlers</glossary> in the <glossary tag="main stack">main stack</glossary>. Once the <glossary tag="application">application</glossary> has finished starting up, the <command tag="start using">library</command> is available and the <b>libURLSetStatusCallback</b> <glossary tag="command">command</glossary> can be used in any <glossary tag="handler">handler</glossary>.</p>
  </description>
</doc>