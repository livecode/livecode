<doc>
  <legacy_id>1851</legacy_id>
  <name>libURLftpUpload</name>
  <type>command</type>
  <syntax>
    <example>libURLftpUpload <i>value</i>,<i>uploadURL</i>[,<i>callbackMessage</i>]</example>
  </syntax>
  <library>Internet library</library>
  <objects>
  </objects>
  <synonyms>
  </synonyms>
  <classification>
    <category>Networks &amp; Communication</category>
    <category>Standalone Applications</category>
  </classification>
  <references>
    <keyword tag="ftp">ftp Keyword</keyword>
    <command tag="libURLftpUploadFile">libURLftpUploadFile Command</command>
    <command tag="libURLSetFTPStopTime">libURLSetFTPStopTime Command</command>
    <command tag="libURLSetStatusCallback">libURLSetStatusCallback Command</command>
    <command tag="load">load Command</command>
    <command tag="put">put Command</command>
    <command tag="unload">unload Command</command>
    <function tag="URLStatus">URLStatus Function</function>
    <command tag="libURLSetFTPMode">libURLSetFTPMode Command</command>
  </references>
  <history>
    <introduced version="1.1.1">Added.</introduced>
  </history>
  <platforms>
    <mac/>
    <windows/>
    <linux/>
  </platforms>
  <classes>
    <desktop/>
    <server/>
    <web/>
  </classes>
  <security>
    <network/>
  </security>
  <summary><glossary tag="upload">Uploads</glossary> data to an Internet <glossary tag="server">server</glossary> asynchronously via <keyword tag="ftp">FTP</keyword>.</summary>
  <examples>
    <example>libURLftpUpload field "Data","ftp://ftp.example.org/file.txt"</example>
    <example>libURLftpUpload URL "binfile:data.jef",myURL,"uploadDone"</example>
    <example>libURLftpUpload myData,"ftp://me:secret@example.net/file.txt"</example>
  </examples>
  <description>
    <p>Use the <b>libURLftpUpload</b> <glossary tag="command">command</glossary> to put a <keyword tag="file">file</keyword> on a server.</p><p/><p><b>Parameters:</b></p><p>The <i>value</i> is any <glossary tag="expression">expression</glossary> that <glossary tag="evaluate">evaluates</glossary> to a <keyword tag="string">string</keyword>.</p><p/><p>The <i>uploadURL</i> specifies the <glossary tag="server">server</glossary> and location to <glossary tag="upload">upload</glossary> to, in the form of an <keyword tag="ftp">FTP</keyword> <keyword tag="URL">URL</keyword>.</p><p/><p>The <i>callbackMessage</i> is the name of a <keyword tag="message box">message</keyword> to send after the <keyword tag="URL">URL</keyword> is <glossary tag="upload">uploaded</glossary>.</p><p/><p><b>Comments:</b></p><p>The <b>libURLftpUpload</b> <glossary tag="command">command</glossary> is <href tag="../glossary/nondashblocking.xml">non-blocking</href>, so it does not stop the current <glossary tag="handler">handler</glossary> while the <glossary tag="upload">upload</glossary> is completed. The <glossary tag="handler">handler</glossary> continues while the <b>libURLftpUpload</b> <glossary tag="command">command</glossary> <glossary tag="upload">uploads</glossary> the <keyword tag="URL">URL</keyword> in the background. You can monitor the <glossary tag="upload">upload</glossary> by checking the <function tag="URLStatus">URLStatus</function> <control_st tag="function">function</control_st> periodically.</p><p/><p>To upload a URL while blocking other operations, use the <b>put</b> <glossary tag="command">command</glossary> instead.</p><p/><p>To upload a file, use the <b>file</b> <keyword tag="URL">URL</keyword> type (for <glossary tag="text file">text files</glossary>) or the <keyword tag="binfile">binfile</keyword> <keyword tag="URL">URL</keyword> type (for <glossary tag="binary file">binary files</glossary>). Because referring to a <keyword tag="file">file</keyword> <glossary tag="URL">URL's</glossary> contents loads the <keyword tag="file">file</keyword> into memory, if you are uploading a large <keyword tag="file">file</keyword>, make sure you have enough memory available. You can also use the <command tag="libURLftpUploadFile">libURLftpUploadFile</command> <glossary tag="command">command</glossary> to upload a <keyword tag="file">file</keyword>.</p><p/><p>The <i>callbackMessage</i> is sent to the <glossary tag="object">object</glossary> whose <property tag="script">script</property> contains the <b>libURLftpUpload</b> <glossary tag="command">command</glossary>, after the <glossary tag="upload">upload</glossary> is complete, so you can handle the <i>callbackMessage</i> to perform any tasks you want to delay until the URL has been <glossary tag="upload">uploaded</glossary>. Two <glossary tag="parameter">parameters</glossary> are sent with the <keyword tag="message box">message</keyword>: the <keyword tag="URL">URL</keyword> and the <function tag="URLStatus">URLStatus</function> of the <keyword tag="file">file</keyword>.</p><p/><p><code/><img src="202650"/> <b>Caution!</b><code/> Avoid using the <command tag="wait">wait</command> <glossary tag="command">command</glossary> in a <glossary tag="handler">handler</glossary> after executing the <b>libURLftpUpload</b> <glossary tag="command">command</glossary>. Since the <b>libURLftpUpload</b> <glossary tag="command">command</glossary> is <href tag="../glossary/nondashblocking.xml">non-blocking</href>, it may still be running when your <glossary tag="handler">handler</glossary> reaches the <command tag="wait">wait</command> <glossary tag="command">command</glossary>. And since the <b>libURLftpUpload</b> command is part of the <glossary tag="Internet library">Internet library</glossary> and is implemented in a <glossary tag="handler">handler</glossary>, the <command tag="wait">wait</command> <glossary tag="command">command</glossary> will stop the <glossary tag="upload">upload</glossary> process if it is <glossary tag="execute">executed</glossary> while the <glossary tag="download">download</glossary> is still going on. In particular, do not use constructions like the following, which will sit forever without <glossary tag="upload">uploading</glossary> the file:</p><p/><p><code>  libURLftpUpload field "Upload Data",myURL</code></p><p><code>  wait until the URLStatus of myURL is "uploaded" </code>-- <code/><b>DON'T DO THIS</b><code/></p><p/><p>The <b>URLStatus</b> <control_st tag="function">function</control_st> returns the status of the <glossary tag="upload">uploaded</glossary> file. If you no longer need to monitor the file's status, use the <command tag="unload">unload</command> <glossary tag="command">command</glossary> to remove it from the <function tag="URLStatus">URLStatus</function> <glossary tag="function">function's</glossary> listing.</p><p/><p><code/><img src="202653"/> <b>Important! </b><code/> The <b>libURLftpUpload</b> <glossary tag="command">command</glossary> is part of the <glossary tag="Internet library">Internet library</glossary>. To ensure that the <glossary tag="command">command</glossary> works in a <glossary tag="standalone application">standalone application</glossary>, you must include this <glossary tag="LiveCode custom library">custom library</glossary> when you create your <glossary tag="standalone application">standalone</glossary>. In the Inclusions section of the <glossary tag="Standalone Application Settings">Standalone Application Settings</glossary> window, make sure "Internet Library" is selected in the list of script libraries.</p><p/><p><code/><b>Note:</b><code/> When included in a <glossary tag="standalone application">standalone application</glossary>, the <glossary tag="Internet library">Internet library</glossary> is implemented as a hidden <command tag="group">group</command> and made available when the <command tag="group">group</command> receives its first <message tag="openBackground">openBackground</message> message. During the first part of the <glossary tag="application">application's</glossary> startup process, before this <keyword tag="message box">message</keyword> is sent, the <b>libURLftpUpload</b> <glossary tag="command">command</glossary> is not yet available. This may affect attempts to use this <glossary tag="command">command</glossary> in <message tag="startup">startup</message>, <message tag="preOpenStack">preOpenStack</message>, <message tag="openStack">openStack</message>, or <message tag="preOpenCard">preOpenCard</message> <glossary tag="handler">handlers</glossary> in the <glossary tag="main stack">main stack</glossary>. Once the <glossary tag="application">application</glossary> has finished starting up, the <command tag="start using">library</command> is available and the <b>libURLftpUpload</b> <glossary tag="command">command</glossary> can be used in any <glossary tag="handler">handler</glossary>.</p>
  </description>
</doc>