<doc>	<legacy_id>1570</legacy_id>	<name>open socket</name>	<type>command</type>	<syntax>		<example>open [datagram] socket [to] <i>host</i>[:<i>port</i>[|<i>ID</i>]] [with message <i>callbackMessage</i>]</example>		<example>open secure socket [to] <i>host</i>[:<i>port</i>[|<i>ID</i>]] [with message <i>callbackMessage</i>] [with|without verification] [using certificate <i>certificate</i> and key <i>key</i>]</example>	</syntax>	<synonyms>	</synonyms>	<summary>Establishes a <glossary tag="TCP">TCP</glossary> communications <glossary tag="socket">socket</glossary> between your system and another system.</summary>	<examples><example>open socket to &quot;127.0.0.0:8080&quot;</example><example>open socket to &quot;ftp.example.org:21|sendFiles&quot;</example><example><p>open socket to (field &quot;Outgoing&quot;) with message &quot;mailConnectionUp&quot;</p></example><example>open secure socket to &quot;www.runrev.com:443&quot; with message &quot;wasConnected&quot; with verification</example>	</examples>	<history>		<introduced version="1.0">Added.</introduced>		<deprecated version=""></deprecated>		<removed version=""></removed>		<changed version="4.5">updated non blocking</changed><changed version="2.5">2.5</changed>	</history>	<objects>	</objects>	<platforms>		<mac/>		<windows/>		<linux/>	</platforms>	<classes>		<desktop/>		<server/>		<web/>	</classes>	<security>		<network/>	</security>	<classification>	</classification>	<references>		<command tag="accept">accept Command</command>		<command tag="post">post Command</command>		<command tag="wait">wait Command</command>		<message tag="socketTimeout">socketTimeout Message</message>	</references>	<description>	<overview>Use the <b>open socket</b> <glossary tag="command">command</glossary> to open a connection to another system on the Internet (or another IP network) to get and send data.</overview>		<parameters>  <parameter>    <name>host</name>    <description>The IP address or domain name of the host you want to connect to.</description>  </parameter>  <parameter>    <name>port</name>    <description>The port number you want to connect to. If you don't specify a port, port 80 is used. (On most systems, port 80 is used for HTTP connections.).</description>  </parameter>  <parameter>    <name>ID</name>    <description>An optional connection name for the socket, and can be any string. Specify an ID if you want to create more than one socket to the same host and port number, so that you can distinguish between them.</description>  </parameter>  <parameter>    <name>callbackMessage</name>    <description>The name of a message to be sent when the connection is made.</description>  </parameter>		</parameters>	<value></value>	<comments>When a connection is made, the <b>open socket</b> <glossary tag="command">command</glossary> creates a new <glossary tag="socket">socket</glossary> that can be used to communicate with the other system. The <glossary tag="handler">handler</glossary> continues <glossary tag="execute">executing</glossary> while the connection is being established. If you use the <command tag="write to socket">write to socket</command> <glossary tag="command">command</glossary> while the connection is opening, the data is buffered and is sent to the <glossary tag="disabled">host</glossary> as soon as the connection is made.<p></p><p>Use the open datagram socket form if you want to send a connectionless UDP datagram instead of opening a socket.</p><p></p><p>If you specify a <i>callbackMessage</i>, the <keyword tag="message box">message</keyword> is sent to the <glossary tag="object">object</glossary> whose <property tag="script">script</property> contains the <b>open socket</b> <glossary tag="command">command</glossary>, as soon as the connection is made. The first <glossary tag="parameter">parameter</glossary> pf this message is the <glossary tag="disabled">host</glossary> and <glossary tag="port">port</glossary> number of the <glossary tag="socket">socket</glossary>. Use a <i>callbackMessage</i> to <glossary tag="trigger">trigger</glossary> actions (such as reading from the <glossary tag="socket">socket</glossary>) that must wait until the connection has been established. (To pause the <glossary tag="handler">handler</glossary> that contains the <b>open socket</b> <glossary tag="command">command</glossary> until the <i>callbackMessage</i> is received, use the wait for messages form of the <b>wait</b> <glossary tag="command">command</glossary>.)</p><p></p><p>UDP/datagram sockets are not supported by SSL.  When connecting to a remote peer, the client verifies the servers certificate during the handshake process and verifies  it against a list of certificates.  You can specify a list of root CA to verify against using the sslcertificates property (see sslurlloader sample). The sslcertficates property takes a return delimited list of files or folders.  In addition you can place system wide certfificates in System/Library/OpenSSL/certs.</p><p></p><p>The most common CAs such as verisign can be found in the file root.pem.  If 'without verification' is specified then server credentials are not authenticated, and any connection is accepted. Some servers require that the client submit a certificate as well, this will be supported in the next alpha.</p><p></p><p>If the socket fails to open due to an error, a <b>socketError</b> <keyword tag="message box">message</keyword> is sent to the <glossary tag="object">object</glossary> that attempted to open the <glossary tag="socket">socket</glossary>. (If the error is due to a problem finding the specified <i>host</i>, the error message is returned in the <function tag="result">result</function>, and no <message tag="socketError">socketError</message> <keyword tag="message box">message</keyword> is sent.)</p><p></p><p></p><note>When the <command tag="accept">accept command</command> creates a <glossary tag="socket">socket</glossary>, it assigns a number as the connection name. If you are using both the <b>open socket</b> <glossary tag="command">command</glossary> and the <command tag="accept">accept command</command> to connect to the same <glossary tag="port">port</glossary> on the same <glossary tag="disabled">host</glossary>, make sure to use a non-numeric connection name that won't conflict with the numbers assigned by the <command tag="accept">accept command</command>. This ensures that you can always refer to two different <glossary tag="socket">sockets</glossary> by distinct <glossary tag="socket">socket</glossary> identifiers.</note><p></p><p></p><important> <glossary tag="socket">Sockets</glossary> are always opened in <glossary tag="binary">binary</glossary> mode. This means that LiveCode does not automatically convert between the other system's end-of-line convention and the line feed character (ASCII 10) that LiveCode uses internally to mark the end of a <keyword tag="line">line</keyword>. If you are reading or writing data one line at a time, be sure you know whether the other system uses line feed, return (ASCII 13), or both to mark the end of each line; if necessary, you will need to convert end-of-line markers yourself, after receiving or before sending the data. (The usual end-of-line marker on <glossary tag="Mac OS">Mac OS</glossary> and <glossary tag="OS X">OS X systems</glossary> is a return character; on <glossary tag="Unix">Unix</glossary>, a line feed; on <function tag="openStacks">Windows</function>, a CRLF.)</important><p></p><p>For technical information about the numbers used to designate standard ports, see the list of port numbers at &lt;<u>http://www.iana.org/assignments/port-numbers</u>&gt;, in particular the section titled &quot;Well Known Port Numbers&quot;.</p><p></p><p></p><important>The <b>open secure socket</b> <glossary tag="command">command</glossary> is part of the SSL &amp; Encryption library. To ensure that the <glossary tag="command">command</glossary> works in a <glossary tag="standalone application">standalone application</glossary>, you must include this <glossary tag="LiveCode custom library">custom library</glossary> when you create your <glossary tag="standalone application">standalone</glossary>. In the Inclusions section on the General screen of the <glossary tag="Standalone Application Settings">Standalone Application Settings</glossary> window, make sure &quot;SSL &amp; Encryption&quot; is selected in the list of script libraries.</important><p></p><p></p><change>(4.5) The <b>open socket</b> command no longer blocks on DNS resolution. Instead, if resolution is required the command will return immediately and the DNS lookup will happen in the background. If resolution fails, then a <b>socketError</b> message is sent in the same was as if connection fails.<p></change><p>For applications using <function tag="hostNameToAddress">hostNameToAddress</function> directly, its syntax has been augmented:</p><p></p><p><function tag="hostNameToAddress">hostnameToAddress</function>(<i>hostname</i>, [ <i>callback</i> ])</p><p></p><p>If the callback parameter is specified then the call will return immediately and upon completion of the lookup, the callback will be invoked with the resolved address as a parameter.</p></comments>	</description></doc>