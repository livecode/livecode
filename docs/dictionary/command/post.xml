<doc>
	<legacy_id>1347</legacy_id>
	<name>post</name>
	<type>command</type>

	<syntax>
		<example>post <i>data</i> to URL <i>destinationURL</i></example>
	</syntax>

	<synonyms>
	</synonyms>

	<summary>Sends data to a <glossary tag="web server">web server</glossary> using the POST action of <keyword tag="http">HTTP</keyword>.</summary>

	<examples>
<example>post myData to URL &quot;http://www.example.net/indications.cgi&quot;</example>
<example>post field &quot;Return Values&quot; to URL field &quot;Current Page&quot;</example>
<example><p>post tData to URL tMyUrl</p></example>
	</examples>

	<history>
		<introduced version="1.0">Added.</introduced>
		<deprecated version=""></deprecated>
		<removed version=""></removed>
		<changed version="4.6.1">Added support for Android and iOS.</changed>
	</history>

	<objects>
	</objects>

	<platforms>
		<mac/>
		<windows/>
		<linux/>
		<ios/>
		<android/>
	</platforms>

	<classes>
		<desktop/>
		<server/>
		<web/>
		<mobile/>
	</classes>

	<security>
		<network/>
	</security>


	<classification>
	</classification>

	<references>
		<function tag="URLEncode">URLEncode Function</function>
		<function tag="URLStatus">URLStatus Function</function>
		<function tag="URLDecode">URLDecode Function</function>
		<function tag="libURLMultipartFormAddPart">libURLMultipartFormAddPart Function</function>
		<function tag="libURLMultipartFormData">libURLMultipartFormData Function</function>
		<function tag="libURLFormData">libURLFormData Function</function>
		<command tag="libURLSetCustomHTTPHeaders">libURLSetCustomHTTPHeaders Command</command>
		<command tag="open socket">open socket Command</command>
		<command tag="read from socket">read from socket Command</command>
		<command tag="write to socket">write to socket Command</command>
		<command tag="libURLSetLogField">libURLSetLogField Command</command>
		<command tag="libURLSetExpect100">libURLSetExpect100 Command</command>
		<property tag="httpHeaders">httpHeaders Property</property>
		<property tag="HTTPProxy">HTTPProxy Property</property>
		<message tag="urlProgress">urlProgress Message</message>
	</references>

	<description>
	<overview>Use the <b>post</b> <glossary tag="command">command</glossary> to submit data to a <glossary tag="web server">web server</glossary>.</overview>

		<parameters>
  <parameter>
    <name>data</name>
    <description>Is any text that evaluates to a string.</description>
  </parameter>
  <parameter>
    <name>destinationURL</name>
    <description>Is the URL where the data is to be sent.</description>
  </parameter>		</parameters>

	<value></value>
	<comments>Data you send should be encoded using the <function tag="URLEncode">URLEncode</function> <control_st tag="function">function</control_st>.<p></p><p>The value the web server returns is placed in the <b>it</b> <glossary tag="variable">variable</glossary>. If an error occurs, the <function tag="result">result</function> <control_st tag="function">function</control_st> is set to the error message.</p><p></p><p>The HTTP header sent with the POST request can be changed using either the <b>HTTPHeaders</b> <glossary tag="property">property</glossary> or the <command tag="libURLSetCustomHTTPHeaders">libURLSetCustomHTTPHeaders</command> <glossary tag="command">command</glossary>. By default, the &quot;Content-Type&quot; header line is set to &quot;application/x-www-form-urlencoded&quot;.</p><p></p><p></p><note>Sending data with the <command tag="post">post</command> <glossary tag="command">command</glossary> is a <glossary tag="blocking">blocking</glossary> operation: that is, the <glossary tag="handler">handler</glossary> pauses until LiveCode is finished sending the data. Since contacting a <glossary tag="server">server</glossary> may take some time, due to network lag, <keyword tag="URL">URL</keyword> operations may take long enough to be noticeable to the user.</note><p></p><p></p><important>If a <glossary tag="blocking">blocking</glossary> operation involving a <keyword tag="URL">URL</keyword> (using the <command tag="put">put</command> <glossary tag="command">command</glossary> to <glossary tag="upload">upload</glossary> a <keyword tag="URL">URL</keyword>, the <b>post</b> c<glossary tag="command">ommand</glossary>, the <command tag="delete URL">delete URL</command> <glossary tag="command">command</glossary>, or a <glossary tag="statement">statement</glossary> that gets an <keyword tag="ftp">ftp</keyword> or <keyword tag="http">HTTP</keyword> <keyword tag="URL">URL</keyword>) is going on, no other <glossary tag="blocking">blocking</glossary> <keyword tag="URL">URL</keyword> operation can start until the previous one is finished. If you attempt to use a <keyword tag="URL">URL</keyword> in an <glossary tag="expression">expression</glossary>, or put data into a <keyword tag="URL">URL</keyword>, while another <glossary tag="blocking">blocking</glossary> <keyword tag="URL">URL</keyword> operation is in progress, the <function tag="result">result</function> is set to &quot;Error Previous request not completed&quot;.</important><p></p><p>To send a username and password with the <b>post</b> <glossary tag="command">command</glossary>, use the standard <glossary tag="syntax">syntax</glossary> for including this information in a URL. For example, to access http://www.example.com/ with the username &quot;me&quot; and the password &quot;pass&quot;, use the following <glossary tag="statement">statement</glossary>:</p><p></p><p>  post someData to URL &quot;http://me:pass@www.example.com/&quot;</p><p></p><p></p><important>If your user name or password contains any of the characters &quot;:&quot;, &quot;@&quot;, &quot;/&quot;, &quot;.&quot;, or &quot;|&quot;, use the <function tag="URLEncode">URLEncode</function> <control_st tag="function">function</control_st> to safely encode the user name or password before putting them into the <keyword tag="URL">URL</keyword>. The following example constructs a <keyword tag="URL">URL</keyword> for a user whose password contains the &quot;@&quot; character:</important><p></p><p>&#9;put &quot;name&quot; into userName</p><p>&#9;put &quot;jdoe@example.com&quot; into userPassword</p><p>&#9;put &quot;http://&quot; &amp; userName &amp; &quot;:&quot; &amp; URLEncode(userPassword) \</p><p>                         &amp; &quot;@www.example.net/index.html&quot; into fileURLToGet</p><p>&#9;get URL fileURLToGet</p><p></p><p></p><important>The <b>post</b> command is part of the Internet library on desktops. To ensure that the command works in a standalone application, you must include this custom library when you create your standalone. In the Inclusions section of the Standalone Application Settings window, make sure &quot;Internet Library&quot; is selected in the list of script libraries.</important><p></p><p></p><note>When included in a standalone application, the Internet library is implemented as a hidden group and made available when the group receives its first openBackground message. During the first part of the application startup process, before this message is sent, the <b>post</b> command is not yet available. This may affect attempts to use this command in startup, preOpenStack, openStack, or preOpenCard hand in the main stack. Once the application has finished starting up, the library is available and the <b>post</b> command can be used in any handler.</note><p></p><p></p><note>The Android and iOS engines do not support 'libUrl' but allow you to use post in the background. When specifying URLs for Android and iOS, you must use the appropriate form that confirms to the RFC standards. Ensure that you urlEncode any username and password fields appropriately for FTP urls.</note></comments>
	</description>
</doc>