<doc>
	<legacy_id></legacy_id>
	<name>require</name>
	<type>command</type>

	<syntax>
		<example>require <i>script</i></example>
	</syntax>

	<synonyms>
	</synonyms>

	<summary>Executes the given script in the context of the global environment. </summary>

	<examples>
<example>require &quot;myScript&quot;</example>
	</examples>

	<history>
		<introduced version="4.6.3">Added.</introduced>
		<deprecated version=""></deprecated>
		<removed version=""></removed>
		
	</history>

	<objects>
	</objects>

	<platforms>
		<mac/>
		<windows/>
		<linux/>
	</platforms>

	<classes>
		<server/>
	</classes>

	<security>
	</security>


	<classification>
	</classification>

	<references>
		<command tag="include">include Command</command>
	</references>

	<description>
	<overview>Executes the given script in the context of the global environment, but only if it has not previously been included or required. </overview>

		<parameters>
  <parameter>
    <name>script</name>
    <description>The name of the script that is to be included.</description>
  </parameter>
		</parameters>

	<value></value>
	<comments>This is the same as the <command tag="include">include</command> command in operation, except it makes it easy to implement 'include-once' files and is designed primarily for library scripts.<p></p><p>Scripts are parsed in full before being executed, with any handler and variable definitions being added to the home stack environment before any commands placed at global scope are executed. These are ordered by encounter in the file. As <b>require</b> is a command, the parse-before-execute effect only extends as far as the end of the current file. </p><p></p><p></p><note> <command tag="include">include</command> and <b>require</b> are distinct in the sense that if you <b>require</b> a file and then <command tag="include">include</command>, the second include executes the file. </note></comments>
	</description>
</doc>