<doc>
  <legacy_id>3028</legacy_id>
  <name>revZipCancel</name>
  <type>command</type>
  <syntax>
    <example>revZipCancel</example>
  </syntax>
  <library>Zip Library</library>
  <objects>
  </objects>
  <synonyms>
  </synonyms>
  <classification>
  </classification>
  <references>

  </references>
  <history>
    <introduced version="2.7.4">Added.</introduced>
  </history>
  <platforms>
    <mac/>
    <windows/>
    <linux/>
    <ios/>
    <android/>
  </platforms>
  <classes>
    <desktop/>
    <server/>
    <web/>
    <mobile/>
  </classes>
  <security>
    <disk access="???"/>
    <network/>
  </security>
  <summary>Cancels the current zip operation from within the revZip progress callback.</summary>
  <examples>
    <example>on myZipProgressCallback</p><p>   if sZipCancelled is true then</p><p>        revZipCancel</p><p>   end if</p><p>   -- In order to give the user the opportunity to cancel, and the variable</p><p>   -- sZipCancelled to be set:</p><p>   wait 1 millisecond with messages</p><p>end myZipProgressCallback</example>
  </examples>
  <description>
    <p>Called from within an invocation of the revZip progress callback, this will cause the current zip operation to be cancelled.</p><p>This has an effect during operation of revZipClose, revZipExtractToFile and revZipExtractToVariable - which will return "cancelled" if revZipCancel has been executed.</p><p/><p><b>Comments:</b></p><p>If user interaction is required to cancel a zip operation (such as the use of a "cancel" button), you will need to force the engine to check the OS message queue (for example for the pushing of the "cancel" button). You can do this by adding the line "wait 1 millesecond with messages" to the zip progress callback handler (as can be seen in the above example).</p>
  </description>
</doc>