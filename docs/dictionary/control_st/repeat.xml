<doc>
  <legacy_id>1135</legacy_id>
  <name>repeat</name>
  <type>control structure</type>
  <syntax>
    <example>repeat <i>loopForm statementList</i> end repeat</example>
  </syntax>
  <library></library>
  <objects>
  </objects>
  <synonyms>
  </synonyms>
  <classification>
    <category>Writing LiveCode</category>
  </classification>
  <references>
    <command tag="wait">wait Command</command>
    <control_st tag="next repeat">next repeat Control Structure</control_st>
    <keyword tag="while">while Keyword</keyword>
    <keyword tag="for">for Keyword</keyword>
    <keyword tag="until">until Keyword</keyword>
    <keyword tag="forever">forever Keyword</keyword>
    <keyword tag="element">element Keyword</keyword>
    <keyword tag="end repeat">end repeat Keyword</keyword>
    <keyword tag="each">each Keyword</keyword>
  </references>
  <history>
    <introduced version="1.0">Added.</introduced>
    <changed version="2.7"></changed>
  </history>
  <platforms>
    <mac/>
    <windows/>
    <linux/>
    <ios/>
    <android/>
  </platforms>
  <classes>
    <desktop/>
    <server/>
    <web/>
    <mobile/>
  </classes>
  <security>
  </security>
  <summary><glossary tag="execute">Executes</glossary> a set of <glossary tag="statement">statements</glossary> repeatedly.</summary>
  <examples>
    <example>-- To create a numbered set of variables with similar names</p><p>-- eg myVar1, myVar2, ... myVar20, you can use a repeat loop</p><p>-- together with concatenation in the following form. Note that</p><p>-- this structure will only work with variable checking turned off.</p><p>-- If you prefer to declare your variables then an array is the</p><p>-- recommended way of doing this.</p><p>local tPrefix = "myVar"</p><p>local tVarCount = 20</p><p>repeat with tVarNum = 1 to 20</p><p>  put tPrefix &amp; x into tVarName</p><p>  do "put empty into " &amp; tVarName</p><p>end repeat</example>
    <example>-- Loops with using 0 are valid</p><p>repeat with tVarNum = 0 to 5</p><p> put tVarNum &amp; comma after tText</p><p>end repeat</p><p>put tText</p><p>tText = 0,1,2,3,4,5,</example>
    <example>-- Loops can also make use of negative numbers</p><p>repeat with tVarNum = 3 down to -5</p><p> put tVarNum &amp; comma after tText</p><p>end repeat</p><p>put tText</p><p>tText = 3,2,1,0,-1,-2,-3,-4,-5,</example>
  </examples>
  <description>
    <p>Use the <b>repeat</b> <glossary tag="control structure">control structure</glossary> to perform the same set of actions for each member of a set: for example, for each <keyword tag="card">card</keyword> in a <object tag="stack">stack</object>, or each <keyword tag="line">line</keyword> in a <glossary tag="variable">variable</glossary>.</p><p/><p><b>Form:</b></p><p>The <b>repeat</b> <glossary tag="control structure">control structure</glossary> always begins with the word "repeat".</p><p>The last line of a <b>repeat</b> <glossary tag="control structure">control structure</glossary> is the <keyword tag="end repeat">end repeat</keyword> <glossary tag="keyword">keyword</glossary>.</p><p/><p><b>Parameters:</b></p><p>The <i>loopForm</i> is one of the following forms:</p><p>       * forever</p><p>        * until <i>condition</i></p><p> * while <i>condition</i></p><p> * [for] <i>number</i> times</p><p>      * with <i>counter</i> = <i>startValue</i> [to | down to] <i>endValue </i>[step <i>increment</i>]</p><p> * for each <i>chunkType</i> <i>labelVariable</i> in <i>container</i></p><p>     * for each element <i>labelVariable</i> in <i>array</i></p><p>  * for each key <i>labelVariable </i>in <i>array</i></p><p/><p>The <i>condition</i> is any <glossary tag="expression">expression</glossary> that <glossary tag="evaluate">evaluates</glossary> to true or false.</p><p>The <i>number</i>, <i>startValue</i>, <i>endValue</i>, and <i>increment</i> are numbers or <glossary tag="expression">expressions</glossary> that evaluate to numbers.</p><p>The <i>counter</i> or <i>labelVariable</i> is a legal <glossary tag="variable">variable</glossary> name.</p><p>The <i>chunkType</i> is one of character (or char), word, line, item, or token.</p><p>The <i>container</i> is any existing <glossary tag="container">container</glossary>. The <i>array</i> is any existing <glossary tag="container">container</glossary> that contains an <glossary tag="array">array</glossary> of values.</p><p>The <i>statementList</i> consists of one or more <glossary tag="LiveCode">LiveCode</glossary> <glossary tag="statement">statements</glossary>, and can also include <control_st tag="if">if</control_st>, <control_st tag="switch">switch</control_st>, <control_st tag="try">try</control_st>, or <control_st tag="repeat">repeat</control_st> <glossary tag="control structure">control structures</glossary>.</p><p/><p><b>Comments:</b></p><p>How many times the <i>statementList</i> is <glossary tag="execute">executed</glossary> depends on the <i>loopForm</i> you use.</p><p/><p><b>The <i>forever</i> form:</b></p><p>The forever form continues repeating the statements in the <i>statementList</i> until an <control_st tag="exit">exit</control_st>, <control_st tag="exit repeat">exit repeat</control_st>, <control_st tag="pass">pass</control_st>, or <constant tag="return">return</constant> <glossary tag="statement">statement</glossary> is <glossary tag="execute">executed</glossary>. Usually, one of these <glossary tag="control structure">control structures</glossary> is included in an <control_st tag="if">if</control_st> <glossary tag="control structure">control structure</glossary> within the <i>statementList</i>.</p><p/><p>Use the forever form if you want to test a condition at the bottom of the loop, after the <i>statementList</i> is <glossary tag="execute">executed</glossary>. In the following example, the <command tag="go">go</command> <glossary tag="command">command</glossary> is <glossary tag="execute">executed</glossary> at least once, since the <function tag="mouseClick">mouseClick</function> is not checked until after the <command tag="go">go</command> <glossary tag="command">command</glossary>:</p><p/><p>  repeat forever</p><p>    go next card</p><p>    if the mouseClick then exit repeat <i>-- user clicked</i></p><p>  end repeat</p><p/><p>If no <i>loopForm</i> is specified, the forever form is used.</p><p/><p><b><i>The </i></b><b>until<i> and </i>while<i> forms:</i></b></p><p>The until <i>condition</i> and while <i>condition</i> forms repeat the <i>statementList</i> as long as the <i>condition</i> is false or as long as it is true, respectively. LiveCode re-<glossary tag="evaluate">evaluates</glossary> the <i>condition</i> before each <glossary tag="iteration">iteration</glossary>.</p><p/><p>Use the until <i>condition</i> or while <i>condition</i> form if you want to test a condition at the top of the loop, before the <glossary tag="statement">statements</glossary> are <glossary tag="execute">executed</glossary>. This example scrolls through the <glossary tag="card">cards</glossary> until the user clicks the mouse:</p><p>  repeat until the mouseClick</p><p>    go next</p><p>    wait for 100 milliseconds</p><p>  end repeat</p><p/><p><b>The <i>for</i> form:</b></p><p>The for <i>number</i> times form repeats the <i>statementList</i> for the specified number of times.</p><p>The <i>number</i> is <glossary tag="evaluate">evaluated</glossary> when the <glossary tag="loop">loop</glossary> is first entered, and is not re-<glossary tag="evaluate">evaluated</glossary> as a result of any actions performed in the <i>statementList</i>. For example, if the <i>number</i> is the number of cards, and the <i>statementList</i> contains a <command tag="create card">create card</command> <glossary tag="command">command</glossary>, the <glossary tag="loop">loop</glossary> is <glossary tag="execute">executed</glossary> as many times as there were <glossary tag="card">cards</glossary> when the <glossary tag="loop">loop</glossary> began, even though the current number of <glossary tag="card">cards</glossary> is changing with each <glossary tag="iteration">iteration</glossary> through the <glossary tag="loop">loop</glossary>.</p><p/><p>If the <i>number</i> is not an <keyword tag="integer">integer</keyword>, it is rounded to the nearest <keyword tag="integer">integer</keyword>, using the same rules as the <function tag="round">round</function> <control_st tag="function">function</control_st>.</p><p>Use the for <i>number</i> times form if you want to execute the <i>statementList</i> a fixed number of times. The following simple example beeps three times:</p><p/><p>  repeat for 3 times</p><p>    beep</p><p>  end repeat</p><p/><p><b>The <i>with</i> form:</b></p><p>The with <i>counter</i> = <i>startValue</i> to <i>endValue</i> form and the with <i>counter</i> = <i>startValue</i> down to <i>endValue </i>form set the <i>counter</i> to the <i>startValue</i> at the beginning of the <glossary tag="loop">loop</glossary>, and increase (or decrease, if you're using the down to form) the <i>countVariable</i> by 1 each time through the <glossary tag="loop">loop</glossary>. When the <i>counter</i> is greater than or equal to the <i>endValue</i>, (less than or equal to, if you're using the down to form), the loop performs its final <glossary tag="iteration">iteration</glossary> and then ends.</p><p/><p>If you specify an <i>increment</i>, the <i>increment</i> is added to the <i>counter</i> each time through the <glossary tag="loop">loop</glossary>, rather than the <i>counter</i> being increased by 1. (The <i>increment</i> is not treated as an absolute value: if you're using the down to form, the <i>increment</i> must be negative.)</p><p/><p>As with the for <i>number</i> times form described above, the <i>startValue</i> and <i>endValue</i> are <glossary tag="evaluate">evaluated</glossary> when the <glossary tag="loop">loop</glossary> is first entered, and are not re-<glossary tag="evaluate">evaluated</glossary> as a result of any actions performed in the <i>statementList</i>.</p><p/><p>Use one of these forms if you want to perform an action on each member of a set, and you need to refer to the member by number within the <i>statementList</i>. The following example <glossary tag="loop">loops</glossary> through all the <glossary tag="control">controls</glossary> on the <glossary tag="current card">current card</glossary>. The <i>counter</i> x is 1 during the first iteration, 2 during the second, and so on:</p><p/><p>  repeat with x = 1 to the number of controls</p><p>    show control x</p><p>  end repeat</p><p/><p>The following example loops backwards through a set of lines. The <i>counter</i> myLine is 20 during the first iteration, 18 during the second, and so on:</p><p/><p>  repeat with myLine = 20 down to 1 step -2</p><p>    put myLine</p><p>  end repeat</p><p/><p><b>Note:</b> It is possible to change the <i>counter</i> <glossary tag="variable">variable</glossary> in a <glossary tag="statement">statement</glossary> in the loop. However, doing this is not recommended, because it makes the loop logic difficult to follow:</p><p/><p>  repeat with x = 1 to 20 <i>-- this loop actually repeats ten times</i></p><p>    answer x</p><p>    add 1 to x <i>-- not recommended</i></p><p>  end repeat</p><p/><p><b>The <i>for each</i> form:</b></p><p>The for each <i>chunkType</i> <i>labelVariable</i> in <i>container </i>form sets the <i>labelVariable</i> to the first <glossary tag="chunk">chunk</glossary> of the specified <i>chunkType</i> in the <i>container</i> at the beginning of the <glossary tag="loop">loop</glossary>, then sets it to the next <glossary tag="chunk">chunk</glossary> for each <glossary tag="iteration">iteration</glossary>. For example, if the <i>chunkType</i> is word, the <i>labelVariable</i> is set to the next <keyword tag="word">word</keyword> in the <i>container</i> for each <glossary tag="iteration">iteration</glossary> of the <glossary tag="loop">loop</glossary>.</p><p/><p>Use the for each form if you want to perform an action on each chunk in a container. This form is much faster than the with <i>countVariable</i> = <i>startValue</i> to <i>endValue </i>form when <property tag="looping">looping</property> through the <glossary tag="chunk">chunks</glossary> of a <glossary tag="container">container</glossary>. The following example changes a return-<glossary tag="delimit">delimited</glossary> list to a comma-<glossary tag="delimit">delimited</glossary> list:</p><p/><p>  repeat for each line thisLine in myList</p><p>    put thisLine &amp; comma after newList</p><p>  end repeat</p><p>  delete the last char of newList</p><p/><p>The for each element <i>labelVariable</i> in <i>array </i>form sets the <i>labelVariable</i> to the first <keyword tag="element">element</keyword> in the <i>array</i> at the beginning of the <glossary tag="loop">loop</glossary>, then sets it to the next <keyword tag="element">element</keyword> for each <glossary tag="iteration">iteration</glossary>.</p><p/><p>Use the for each form if you want to perform an action on each element in an array. The following example gets only the multi-word entries in an array of phrases:</p><p/><p>  repeat for each element thisIndexTerm in listOfTerms</p><p>    if the number of words in thisIndexTerm &gt; 1 then</p><p>      put thisIndexTerm &amp; return after multiWordTerms</p><p>    end if</p><p>  end repeat</p><p/><p><img src="202653"/> <b>Important!</b> In any of the <b>for each</b> loops, you should not change the <i>labelVariable</i> or <i>container </i>in a <glossary tag="statement">statement</glossary> inside the <glossary tag="loop">loop</glossary>. Doing so will not cause a <glossary tag="error">script error</glossary>, but will almost certainly produce unexpected results.</p><p/><p><b>Note:</b> The <b>repeat</b> <glossary tag="control structure">control structure</glossary> is implemented internally as a <glossary tag="command">command</glossary> and appears in the <function tag="commandNames">commandNames</function>.</p><p/><p><b>Changes:</b></p><p>The ability to specify an <i>increment</i> for the repeat with <i>counter</i> = <i>startValue</i> to <i>endValue</i> form was added in version 2.0. In previous versions, this form of the <b>repeat</b> <glossary tag="control structure">control structure</glossary> always incremented or decremented the counter by 1 each time through the <glossary tag="loop">loop</glossary>.</p><p/><p>The ability to iterate through the keys of an array using <b>repeat for each key </b>was added in version 2.7.2</p>
  </description>
</doc>