Name: is not strictly

Type: operator

Syntax: <value> is not strictly { nothing | a boolean | an integer | a real | a string | a binary string | an array | <otherValue> }

Summary:
Evaluates to true if the actual <value> is not the specified
type or value. 

Introduced: 8.0

OS: mac, windows, linux, ios, android

Platforms: desktop, server, mobile

Example:
"Hello World!" is not strictly a string -- evaluates to false

Example:
1 + 200 is not strictly an integer -- evaluates to false

Example:
(100 is 100) is not strictly a boolean -- evaluates to false

Example:
"test" is not strictly "TEST" -- evaluates to true

Example:
1 is not strictly 1.0 -- evaluates to true

Example:
1 + 0 is not strictly 1.0 + 0 -- evaluates to false

Example:
the compress of "Hello World!" is not strictly a binary string -- evaluates to false

Parameters:
value:
The expression which will be tested for its type.

otherValue:
The expression which will be compared for its value.

Description:
Use the <is not strictly> operator to determine what the true value is not. 
The true type of a value is the representation which
the engine is currently holding for it, without performing any
implicit type coercion. The true type of a value can be one of the
following:

- nothing: no value, typically seen as <empty>
- boolean: either true or false, typically seen as the result of a
  comparison operator
- integer: a number with no fractional part
- real: a number with a fractional part
- string: a piece of text (sequence of characters)
- binary string: a sequence of bytes
- array: an associative array


The <is not strictly> operator differs from <is not a> in that it does
not perform any type coercion. For example, `x not is an integer`
would return false only when `x` is neither an integer nor a string
which parses as an integer; whereas `x is not strictly an integer`
only returns false if `x` is not currently an integer.

When comparing to another value the values are considered to be equal if they
are the same type and have exactly the same value:

* strings and binary strings must have the same byte values
* unicode strings are not normalized prior to the comparison
* numeric strings are compared as strings

Changes:
Comparison to another value to determine strict value are not equivalent was
added in LiveCode 9.5

References: is strictly (operator), is a (operator), is not a (operator)

