<doc>
  <legacy_id>3514</legacy_id>
  <name>behavior</name>
  <type>property</type>
  <syntax>
    <example>set the behavior of <i>childObject</i> to <i>behaviorObjectReference</i></example>
  </syntax>
  <library></library>
  <objects>
    <stack/>
    <card/>
    <group/>
    <field/>
    <button/>
    <graphic/>
    <scrollbar/>
    <player/>
    <image/>
  </objects>
  <synonyms>
    <synonym>parentScript</synonym>
  </synonyms>
  <classification>
    <category>Writing LiveCode</category>
  </classification>
  <references>
    <command tag="dispatch">dispatch Command</command>
  </references>
  <history>
    <introduced version="3.5">Added.</introduced>
  </history>
  <platforms>
    <mac/>
    <windows/>
    <linux/>
    <ios/>
    <android/>
  </platforms>
  <classes>
    <desktop/>
    <server/>
    <web/>
    <mobile/>
  </classes>
  <security>
  </security>
  <summary>Specifies where an object used as a custom control should inherit its behavior from.</summary>
  <examples>
    <example>set the behavior of tNewGroup to the long id of button "Widget" of card "Behaviors"</example>
  </examples>
  <description>
    <p>Behaviors are a method to create common functionality between objects without duplicating the scripts.</p><p/><p><b>Value:</b></p><p>The <b>behavior</b> property is a reference to a <object tag="button">button</object> containing the script to use. It is in the format of a <property tag="ID">long ID</property>.</p><p/><p>By default, the <b>behavior</b> of newly created objects is empty.</p><p/><p><b>Comments:</b></p><p>An object with a <b>behavior</b> set will act as though its script was set to the script of the <b>behavior</b> button. If multiple objects share the same <b>behavior</b>, each will have its own set of script local variables. Any references to <keyword tag="me">me</keyword>, the <property tag="owner">owner</property> of me etc will resolve to the child object currently executing.</p><p/><p>The button containing the behavior script can be located anywhere. In particular this allows for it be located in a <property tag="password">password</property> protected <object tag="stack">stack</object>, allowing you to protect the script without need to protect the controls using it.</p><p/><p>Behaviors are resolved by LiveCode immediately after loading a stack file, the engine acts as though it is resolving a control reference of the form: button id &lt;id&gt; of stack &lt;stack name&gt; [ of stack &lt;mainstack name&gt;]. Thus the <property tag="stackFiles">stackFiles property</property> will be searched and stacks loaded into memory as appropriate.</p><p/><p>The <b>behavior</b> property <b>does</b> <b>not</b> track changes to the name of the stack and/or substack - if the name of a stack containing behavior objects is changed, then all references to these behaviors will be broken. This apparent strictness is necessary to ensure that behaviors act consistently while LiveCode is running.</p><p/><p><b>Note:</b> that the synonym <b>parentScript</b> is probably <b>going to be removed</b> before the release of version 3.5, so it should not be used. Please see the Engine Change log in the LiveCode folder for more information.</p>
  </description>
</doc>