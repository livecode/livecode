/* Copyright (C) 2003-2015 LiveCode Ltd.

 This file is part of LiveCode.

 LiveCode is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License v3 as published by the Free
 Software Foundation.

 LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 for more details.

 You should have received a copy of the GNU General Public License
 along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/**
This library provides operations for interacting with LiveCode Script from LiveCode Builder.

Tags: Engine

Name: ScriptObject

Type: type

Summary: An opaque type corresponding to a LiveCode script object.

Syntax: ScriptObject

Description:
Use the <ResolveScriptObject|resolve script object>, or <MyScriptObject|my script object> to obtain an object of type <ScriptObject>

References: ResolveScriptObject(statement), MyScriptObject(expression)

Tags: Script Engine
*/

module com.livecode.engine

use com.livecode.foreign

public foreign type ScriptObject binds to "MCEngineScriptObjectTypeInfo"

public foreign handler MCEngineExecResolveScriptObject(in pObjectId as String) returns ScriptObject binds to "<builtin>"
public foreign handler MCEngineEvalScriptObjectExists(in pObject as ScriptObject, out rExists as CBool) returns nothing binds to "<builtin>"
public foreign handler MCEngineEvalScriptObjectDoesNotExist(in pObject as ScriptObject, out rExists as CBool) returns nothing binds to "<builtin>"
public foreign handler MCEngineExecGetPropertyOfScriptObject(in pProperty as String, in pObject as ScriptObject, out rValue as any) returns nothing binds to "<builtin>"
public foreign handler MCEngineExecSetPropertyOfScriptObject(in pValue as any, in pProperty as String, in pObject as ScriptObject) returns nothing binds to "<builtin>"
public foreign handler MCEngineEvalOwnerOfScriptObject(in pObject as ScriptObject, out rParent as ScriptObject) returns nothing binds to "<builtin>"
public foreign handler MCEngineEvalChildrenOfScriptObject(in pObject as ScriptObject, out rChildren as List) returns nothing binds to "<builtin>"
public foreign handler MCEngineExecSendToScriptObject(in pIsFunction as CBool, in pMessage as String, in pTarget as ScriptObject) returns optional any binds to "<builtin>"
public foreign handler MCEngineExecSendToScriptObjectWithArguments(in pIsFunction as CBool, in pMessage as String, in pTarget as ScriptObject, in pArguments as optional List) returns optional any binds to "<builtin>"
public foreign handler MCEngineExecPostToScriptObject(in pMessage as String, in pTarget as ScriptObject) returns nothing binds to "<builtin>"
public foreign handler MCEngineExecPostToScriptObjectWithArguments(in pMessage as String, in pTarget as ScriptObject, in pArguments as optional List) returns nothing binds to "<builtin>"

public foreign handler MCEngineExecSend(in pIsFunction as CBool, in pMessage as String) returns optional any binds to "<builtin>"
public foreign handler MCEngineExecSendWithArguments(in pIsFunction as CBool, in pMessage as String, in pArguments as optional List) returns optional any binds to "<builtin>"
public foreign handler MCEngineExecPost(in pMessage as String) returns nothing binds to "<builtin>"
public foreign handler MCEngineExecPostWithArguments(in pMessage as String, in pArguments as optional List) returns nothing binds to "<builtin>"

public foreign handler MCEngineEvalCaller(out rObject as ScriptObject) returns nothing binds to "<builtin>"

public foreign handler MCEngineEvalMessageWasHandled(out pHandled as CBool) returns nothing binds to "<builtin>"
public foreign handler MCEngineEvalMessageWasNotHandled(out pHandled as CBool) returns nothing binds to "<builtin>"
public foreign handler MCEngineExecExecuteScript(in pScript as String) returns any binds to "<builtin>"
public foreign handler MCEngineExecExecuteScriptWithArguments(in pScript as String, in pArguments as List) returns any binds to "<builtin>"
public foreign handler MCEngineExecExecuteScriptInScriptObject(in pScript as String, in pTarget as ScriptObject) returns any binds to "<builtin>"
public foreign handler MCEngineExecExecuteScriptInScriptObjectWithArguments(in pScript as String, in pTarget as ScriptObject, in pArguments as List) returns any binds to "<builtin>"
public foreign handler MCEngineExecLog(in pMessage as optional any) returns nothing binds to "<builtin>"
public foreign handler MCEngineExecLogWithValues(in pFormat as String, in pValues as List) returns nothing binds to "<builtin>"

public type MCRunloopActionCallback is Pointer
public type MCRunloopActionRef is Pointer
public foreign handler MCEngineAddRunloopAction(in pCallback as MCRunloopActionCallback, in pContext as optional Pointer, out rAction as MCRunloopActionRef) returns CBool binds to "<builtin>"
public foreign handler MCEngineRemoveRunloopAction(in pAction as MCRunloopActionRef) returns nothing binds to "<builtin>"
public foreign handler MCEngineRunloopWait() returns CBool binds to "<builtin>"
public foreign handler MCEngineRunloopBreakWait() returns nothing binds to "<builtin>"

public foreign handler MCEngineEvalTheColumnDelimiter(out rDelimiter as String) returns nothing binds to "<builtin>"
public foreign handler MCEngineEvalTheRowDelimiter(out rDelimiter as String) returns nothing binds to "<builtin>"
public foreign handler MCEngineEvalTheLineDelimiter(out rDelimiter as String) returns nothing binds to "<builtin>"
public foreign handler MCEngineEvalTheItemDelimiter(out rDelimiter as String) returns nothing binds to "<builtin>"

public foreign handler MCEngineEvalMyResourcesFolder(out pFile as optional String) returns nothing binds to "<builtin>"

/**
Summary:	Resolves a string to a script object.
Object:		The string describing the script object.

The result:	The resolved script object.

Example:
	variable tObject as ScriptObject
	resolve script object "button 1 of card 1 of this stack"
	put the result into tObject
	if tObject exists then
		get property "name" of tObject
		log the result
	else
		log "No such button"
	end if

Description:
Use the <ResolveScriptObject|resolve script object> statement to obtain a <ScriptObject> in LiveCode Builder, in order to interact with it.

>*Note:* An error is thrown if this syntax is used in a context where access
to script objects is not allowed.

Tags: Script Engine
*/

syntax ResolveScriptObject is statement
    "resolve" "script" "object" <Object: Expression>
begin
    MCEngineExecResolveScriptObject(Object)
end syntax

/**
Summary:	Tests the existence of a script object.
Object:		An expression that evaluates to a <ScriptObject>.

The result:	True if the object <Object> exists, and false otherwise.

Example:
	variable tObject as ScriptObject
	resolve script object "card 5 of this stack"
	put the result into tObject
	if tObject exists then
		set property "name" of tObject to "Card5"
	else
		log "No such card"
	end if

Description:
Use to test the existence or otherwise of a script object, for example after attempting to resolve the object from a string using <ResolveScriptObject | resolve script object>

References: ResolveScriptObject(statement)

Tags: Script Engine
*/

syntax ScriptObjectExists is postfix operator with comparison precedence
    <Object: Expression> "exists"
begin
    MCEngineEvalScriptObjectExists(Object, output)
end syntax

/**
Summary:	Tests the existence of a script object.
Object:		An expression that evaluates to a <ScriptObject>.

The result:	True if the object <Object> exists, and false otherwise.

Example:
	variable tObject as ScriptObject
	resolve script object "card 5 of this stack"
	put the result into tObject
	if tObject does not exist then
		log "No such card"
	end if

Description:
Use to test the non-existence or otherwise of a script object, for example after attempting to resolve the object from a string using <ResolveScriptObject|resolve script object>

References: ResolveScriptObject(statement)

Tags: Script Engine
*/

syntax ScriptObjectDoesNotExist is postfix operator with comparison precedence
    <Object: Expression> "does" "not" "exist"
begin
    MCEngineEvalScriptObjectDoesNotExist(Object, output)
end syntax

/**
Summary:	The property of a script object.
Property: 	The name of the property to manipulate
Object:		An expression that evaluates to a <ScriptObject>.


Example:
	public handler OnMouseUp() returns nothing
		set property "name" of my script object to "Clicked Widget"
	end handler

Example:
	resolve script object "this stack"
	set property "invisible" of the result to true
    get property "script" of my script object

Description:
Use to manipulate properties of a script object.

>*Note:* An error is thrown if the script object does not exist.

>*Note:* An error is thrown if this syntax is used in a context where access
to script objects is not allowed.

Tags: Script Engine
*/

syntax PropertyOfScriptObject is prefix operator with property precedence
    "property" <Property: Expression> "of" <Object: Expression>
begin
    MCEngineExecGetPropertyOfScriptObject(Property, Object, output)
    MCEngineExecSetPropertyOfScriptObject(input, Property, Object)
end syntax

/**
Summary:	Get the parent object of a script object.
Object:		An expression that evaluates to a <ScriptObject>.
The result:	The <ScriptObject> that is the owner of <Object>.

Example:
	public handler MyName() returns String
		get property "short name" of my script object
		return the result
	end handler

	public handler OnMouseUp() returns nothing
		// Send a message to the widget's parent so it can handle the click
		send "widgetClicked" to the owner of my script object with [ MyName() ]
	end handler

Description:
	Use to get the script object that contains a script object.

>*Note:* An error is thrown if the script object does not exist.

Tags: Script Engine
*/

syntax OwnerOfScriptObject is prefix operator with property precedence
	"the" "owner" "of" <Object: Expression>
begin
	MCEngineEvalOwnerOfScriptObject(Object, output)
end syntax

/**
Summary:	Get the child objects of a script object.
Object:		An expression that evaluates to a <ScriptObject>
The result:	A list of <ScriptObject>s that are contained within <Object>.

Example:
	public handler GetSiblings(in pObject as ScriptObject) returns List
		// Return the sibling objects of an object
		return the children of the owner of pObject
	end handler

Example:
	// Unset the highlight of all the controls in a group
	resolve script object "group \qcheckboxes\q of this card"
	variable tObject
	repeat for each element tObject in the children of the result
		set property "hilite" of tObject to false
	end repeat

Description:
	Use to get the script objects contained within a script object.

>*Note:* An error is thrown if the script object does not exist.

Tags: Script Engine
*/

syntax ChildrenOfScriptObject is prefix operator with property precedence
	"the" "children" "of" <Object: Expression>
begin
	MCEngineEvalChildrenOfScriptObject(Object, output)
end syntax

/**
Summary: 	Send a message to a script object.
Message: 	The message to dispatch.
Object:		The script object to dispatch the message to.
Arguments:	A list of arguments for the message.

The result:	The result of the message dispatch

Example:
	public handler OnMouseUp() returns nothing
		// Send a message to the script so it can handle it.
		send "buttonClicked" to my script object
	end handler

Example:
	// myScriptFunction takes three arguments and performs some kind of calculation

	variable tObject as ScriptObject
	resolve script object "this stack"
	put the result into tObject
	send function "myScriptFunction" to tObject with [ 2, 3, 4 ]

	// the result contains the return value of 'myScriptFunction'

Description:
Sends a message to the given script object and waits for it to finish so that it
can return a value.

If no target object is specified, the message is sent to the widget's
script object (if used in a root widget module), or to the default stack
otherwise.

After a send, 'the message was handled' predicate can be used to determine if the
message passed through the message path untouched.

>*Note:* An error is thrown if this syntax is used in a context where access
to script objects is not allowed.

Tags: Script Engine
*/
syntax SendToScriptObject is statement
    "send" ( "function" <IsFunction=true> | "command" <IsFunction=false> | <IsFunction=false> ) <Message: Expression> [ "to" <Object: Expression> ] [ "with" <Arguments: Expression> ]
begin
    MCEngineExecSend(IsFunction, Message)
    MCEngineExecSendWithArguments(IsFunction, Message, Arguments)
    MCEngineExecSendToScriptObject(IsFunction, Message, Object)
    MCEngineExecSendToScriptObjectWithArguments(IsFunction, Message, Object, Arguments)
end syntax

/**
Summary: 	Post a message to a script object.
Message: 	The message to dispatch.
Object:		The script object to dispatch the message to.
Arguments:	A list of arguments for the message.

Example:
	public handler OnMouseUp() returns nothing
		// Send a message to the script so it can handle it.
		post "buttonClicked" to my script object
	end handler

Description:
Post a message to the given script object and returns immediately. Posting a message
will cause the message to be sent at the next wait point (usually when the current
event has finished being handled).

If no target object is specified, the message is posted to the widget's
script object (if used in a root widget module), or to the widget's
parent (if used in a non-root widget module), or to the default stack
otherwise.

Tags: Script Engine
*/
syntax PostToScriptObject is statement
    "post" <Message: Expression> [ "to" <Object: Expression> ] [ "with" <Arguments: Expression> ]
begin
    MCEngineExecPost(Message)
    MCEngineExecPostWithArguments(Message, Arguments)
    MCEngineExecPostToScriptObject(Message, Object)
    MCEngineExecPostToScriptObjectWithArguments(Message, Object, Arguments)
end syntax

/**
Summary: 	Determines whether a message was handled

Example:
	public handler OnMouseUp() returns nothing
		send "buttonClicked" to my script object
		if the message was handled then
			return
		end if
		log "The message was not handled"
	end handler

Description:
Determines if a dispatched message was handled by any script objects in the message path.

Tags: Script Engine
*/

syntax MessageWasHandled is expression
    "the" "message" "was" "handled"
begin
    MCEngineEvalMessageWasHandled(output)
end syntax

/**
Summary: 	Determines whether a message was handled

Example:
	public handler OnMouseUp() returns nothing
		send "buttonClicked" to my script object
		if the message was not handled then
			log "The message was not handled"
		end if
	end handler

Description:
Determines if a dispatched message was handled by any script objects in the message path.

Tags: Script Engine
*/

syntax MessageWasNotHandled is expression
    "the" "message" "was" "not" "handled"
begin
    MCEngineEvalMessageWasNotHandled(output)
end syntax

/**
Summary: 	The caller's script object

Example:
	public handler NotifyMe() returns nothing
		post "notify" to the caller
	end handler

Description:
Returns the script object which called the handler at the beginning
of the current chain of LiveCode Builder handler execution.

Tags: Script Engine
*/

syntax Caller is expression
    "the" "caller"
begin
    MCEngineEvalCaller(output)
end syntax

/**
Summary: Executes some LiveCode script.
Script:  The script to execute.
Object:  The object to execute the script in.
Arguments:  A list of arguments for the script.

Example:
	public handler SnapshotMe() returns nothing
		variable tVar as String
		get property "number" of my script object
		put the result formatted as string into tVar

		// Create a snapshot from the rect of the widget
		execute script "import snapshot from rect (the rect of widget " & tVar & ") of widget " & tVar
	end handler

Example:
   public handler SnapshotMeAtSize(in pWidth as Integer, in pHeight as Integer) returns nothing
		variable tVar as String
		get property "number" of my script object
		put the result formatted as string into tVar

		// Create a snapshot from the rect of the widget
		execute script "import snapshot from me at size at size param(1),param(2)" \
            with [ pWidth, pHeight ]
	end handler

Description:
Executes the given fragment of LiveCode script in the context of the target
script object, or `this card of the defaultStack` if none is specified. The list
of arguments is accessible from the script fragment using the `paramCount()` and
`param()` functions.

>*Note:* An error is thrown if this syntax is used in a context where access
to script objects is not allowed.

>*Note:* The `execute script` command is subject to Anomaly 19137. It is
recommended to always use targetted forms of the command, as the default target
might change in a future release.

Tags: Script Engine
*/

syntax ExecuteScript is statement
	"execute" "script" <Script: Expression> [ "in" <Object: Expression> ] [ "with" <Arguments: Expression> ]
begin
	MCEngineExecExecuteScript(Script)
	MCEngineExecExecuteScriptInScriptObject(Script, Object)
	MCEngineExecExecuteScriptWithArguments(Script, Arguments)
	MCEngineExecExecuteScriptInScriptObjectWithArguments(Script, Object, Arguments)
end syntax

/**
Summary: 	Logs a string.
String:		The string to log.
Arguments:	A list of arguments.

Example:
	variable tList as List
	get property "name" of my script object
	push the result onto tList

	get property "id" of my script object
	push the result onto tList

	log "Widget %@ has id %@" with tList

Description:
The log command triggers a logChanged message with the accumulated log messages since the logChanged message was last handled.
This can be handled in LiveCode Script, for example:
```
on logChanged pLog
	write pLog to stdout
end logChanged
```

Tags: Script Engine
*/

syntax Log is statement
    "log" <Message: Expression> [ "with" <Arguments: Expression> ]
begin
    MCEngineExecLog(Message)
    MCEngineExecLogWithValues(Message, Arguments)
end syntax

/**
Summary: 	Fetches the `columnDelimiter` property from script context

Example:
   -- Split a string into a list using the column delimiter
   variable tItems
   put "alice\tbob\teve" into tItems
   split tItems by the column delimiter
   -- tItems is now a list: ["alice", "bob", "eve"]

Description:
Fetches the calling (script) handler's `columnDelimiter` property, or horizontal
tab (U+0009) if no script context is available.

Related: TheRowDelimiter (expression), TheItemDelimiter (expression), TheLineDelimiter (expression)

Tags: Script Engine
*/
syntax TheColumnDelimiter is expression
    "the" "column" "delimiter"
begin
    MCEngineEvalTheColumnDelimiter(output)
end syntax

/**
Summary: 	Fetches the `rowDelimiter` property from script context

Example:
  -- Split a string into a list using the row delimiter
   variable tItems
   put "alice\nbob\neve" into tItems
   split tItems by the row delimiter
   -- tItems is now a list: ["alice", "bob", "eve"]

Description:
Fetches the calling (script) handler's `rowDelimiter` property, or linefeed
(U+000A) if no script context is available.

Related: TheColumnDelimiter (expression), TheItemDelimiter (expression), TheLineDelimiter (expression)

Tags: Script Engine
*/
syntax TheRowDelimiter is expression
    "the" "row" "delimiter"
begin
    MCEngineEvalTheRowDelimiter(output)
end syntax

/**
Summary: 	Fetches the `lineDelimiter` property from script context

Example:
  -- Split a string into a list using the line delimiter
   variable tItems
   put "alice\nbob\neve" into tItems
   split tItems by the line delimiter
   -- tItems is now a list: ["alice", "bob", "eve"]

Description:
Fetches the calling (script) handler's `lineDelimiter` property, or linefeed
(U+000A) if no script context is available.

Related: TheColumnDelimiter (expression), TheItemDelimiter (expression), TheRowDelimiter (expression)

Tags: Script Engine
*/
syntax TheLineDelimiter is expression
    "the" "line" "delimiter"
begin
    MCEngineEvalTheLineDelimiter(output)
end syntax

/**
Summary: 	Fetches the `itemDelimiter` property from script context

Example:
  -- Split a string into a list using the item delimiter
   variable tItems
   put "alice,bob,eve" into tItems
   split tItems by the item delimiter
   -- tItems is now a list: ["alice", "bob", "eve"]

Description:
Fetches the calling (script) handler's `itemDelimiter` property, or the comma
char if no script context is available.

Related: TheColumnDelimiter (expression), TheLineDelimiter (expression), TheRowDelimiter (expression)

Tags: Script Engine
*/
syntax TheItemDelimiter is expression
    "the" "item" "delimiter"
begin
    MCEngineEvalTheItemDelimiter(output)
end syntax

/**
Summary:    Returns the resources folder for the current module

Example:
    -- Work out the filename of a file in the module's
    -- resources folder.
    variable tResourceFile as String
    put my resources folder & "/foobar.txt" into tResourceFile

Description:
Returns the full path to the resources folder for the calling
module. If there is no resources folder attached to the calling
module, nothing is returned.

Tags: Script Engine
*/
syntax MyResourcesFolder is expression
    "my" "resources" "folder"
begin
    MCEngineEvalMyResourcesFolder(output)
end syntax

end module
