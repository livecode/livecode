/**
This library provides Android wav recording functionality, via the
android.media.MediaRecorder class.

Description:
Use this library to record audio on Android.

>*Note:* This library requires RECORD_AUDIO and CAPTURE_AUDIO_OUTPUT
> permissions. These will be automatically added to the application
> manifest when an application including this library is built.
*/

library com.livecode.library.androidwavrecorder

metadata version is "1.0.0"
metadata author is "LiveCode"
metadata title is "Android Wav Recorder"

-- We need permissions to record audio and write to the external
-- storage directory.
metadata android.permissions is "RECORD_AUDIO,CAPTURE_AUDIO_OUTPUT"

use com.livecode.foreign
use com.livecode.java

__safe foreign handler _JNI_AudioRecorderCreate(in pCompressed as JObject) returns JObject \
	binds to "java:com.livecode.library.androidwavrecorder.ExtAudioRecorder>getInstance(Ljava/lang/Boolean;)Lcom/livecode/library/androidwavrecorder/ExtAudioRecorder;!static"

__safe foreign handler _JNI_AudioRecorderSetRecordOutputFile(in pRecorder as JObject, in pFile as JString) returns nothing \
	binds to "java:com.livecode.library.androidwavrecorder.ExtAudioRecorder>setOutputFile(Ljava/lang/String;)V"
__safe foreign handler _JNI_AudioRecorderPrepare(in pRecorder as JObject) returns nothing \
	binds to "java:com.livecode.library.androidwavrecorder.ExtAudioRecorder>prepare()V"
__safe foreign handler _JNI_AudioRecorderStart(in pRecorder as JObject) returns nothing \
	binds to "java:com.livecode.library.androidwavrecorder.ExtAudioRecorder>start()V"
__safe foreign handler _JNI_AudioRecorderStop(in pRecorder as JObject) returns nothing \
	binds to "java:com.livecode.library.androidwavrecorder.ExtAudioRecorder>stop()V"
__safe foreign handler _JNI_AudioRecorderReset(in pRecorder as JObject) returns nothing \
	binds to "java:com.livecode.library.androidwavrecorder.ExtAudioRecorder>reset()V"
__safe foreign handler _JNI_AudioRecorderGetMaxAmplitude(in pRecorder as JObject) returns JInt \
    binds to "java:com.livecode.library.androidwavrecorder.ExtAudioRecorder>getMaxAmplitude()I"

__safe foreign handler _JNI_GetFalse() returns JObject \
	binds to "java:java.lang.Boolean>get.FALSE()Ljava/lang/Boolean;!static"

-- This will store an instance of the ExtAudioRecorder
private variable mRecorder as optional JObject

private handler IsAndroid() returns Boolean
    return the operating system is "android"
end handler

handler CreateRecorder() returns nothing
	variable tCompressed as JObject
	put _JNI_GetFalse() into tCompressed

    if mRecorder is nothing then
        put _JNI_AudioRecorderCreate(tCompressed) into mRecorder
    end if
end handler

/**
Summary: Start recording an audio file, using the given filename

Example:
   local tFilePath
   put specialFolderPath("external documents") & slash & "recording.mp4" \
      into tFilePath
   androidWavRecorderStartRecording tFilePath

Parameters:
pFileName: The absolute filename of the output file

Description:
Use the <androidWavRecorderStartRecording> handler to start recording audio
on Android using the mic input source with wav output.

*/
public handler androidWavRecorderStartRecording(in pFileName as String) returns nothing
    if not IsAndroid() then
        throw "Not supported on this platform"
    end if

    CreateRecorder()

    if mRecorder is nothing then
        throw "unable to create recorder"
    end if

    _JNI_AudioRecorderSetRecordOutputFile(mRecorder, StringToJString(pFileName))
    _JNI_AudioRecorderPrepare(mRecorder)
    _JNI_AudioRecorderStart(mRecorder)
end handler

/**
Summary: Stop recording

Example:
on mouseUp
    try
        androidWavRecorderStopRecording
    catch tError
        answer tError
    end try
end mouseUp

Description:
Use the <androidWavRecorderStopRecording> handler to stop the current
recording. If no recording is currently happening, this handler will
throw an error.
*/
public handler androidWavRecorderStopRecording()
	-- Don't do anything if there is no recorder object
	if mRecorder is nothing then
		throw "recording has not been started!"
		return
	end if

	_JNI_AudioRecorderStop(mRecorder)
	_JNI_AudioRecorderReset(mRecorder)
	put nothing into mRecorder
end handler

/**
Summary: Returns the max amplitude of the recording since last sampled

Example:
-- Poll amplitude every 30 millisecs, and output values
command LogAmplitude
   put androidWavRecorderGetMaxAmplitude()
   send "LogAmplitude" to me in 30 millisecs
end UpdateAmplitudeAndTimer

Description:
Use the <androidWavRecorderGetMaxAmplitude> handler to retrieve the maximum
amplitude value reached during recording from the selected input source
since the amplitude was last retrieved.

<androidWavRecorderGetMaxAmplitude> returns 0 if no recording is currently
happening.
*/

--
public handler androidWavRecorderGetMaxAmplitude() returns Integer
	if mRecorder is nothing then
		return 0
	end if
	return _JNI_AudioRecorderGetMaxAmplitude(mRecorder)
end handler

end library
