/*
Copyright (C) 2018 LiveCode Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/**
A library of utility handlers for functions commonly needed by Android widgets.
*/

module com.livecode.library.androidutils

use com.livecode.foreign
use com.livecode.java
use com.livecode.canvas
use com.livecode.library.widgetutils

metadata version is "1.1.0"
metadata author is "LiveCode"
metadata title is "Android Utilities"
metadata os is "android"

private handler ColorComponentToInt(in pComponent as Real) returns Integer
    multiply pComponent by 255
    round pComponent
    return pComponent
end handler

__safe foreign handler _JNI_GetColorFromARGB(in pA as JInt, in pR as JInt, in pG as JInt, in pB as JInt) returns JInt \
	binds to "java:android.graphics.Color>argb(IIII)I!static"

/**
Summary: Convert a color string to an integer for Android

Parameters:
pString: The color string

Description:
Use the <StringToAndroidColor> handler to convert a string representing
a color to an integer that can be used with Android color APIs.
*/
public handler StringToAndroidColor(in pString as String) returns Integer
    variable tColor as Color
    put stringToColor(pString) into tColor

    variable tA as Integer
    variable tR as Integer
    variable tG as Integer
    variable tB as Integer
    put ColorComponentToInt(the alpha of tColor) into tA
    put ColorComponentToInt(the red of tColor) into tR
    put ColorComponentToInt(the green of tColor) into tG
    put ColorComponentToInt(the blue of tColor) into tB

    return _JNI_GetColorFromARGB(tA,tR,tG,tB)
end handler

__safe foreign handler _JNI_GetAndroidEngine() returns JObject \
	binds to "java:com.runrev.android.Engine>getEngine()Lcom/runrev/android/Engine;!static"
__safe foreign handler _JNI_GetEngineContext(in pEngine as JObject) returns JObject \
	binds to "java:android.view.View>getContext()Landroid/content/Context;"

/**
Summary: Get the application Context

Example:
	__safe foreign handler _JNI_CreateButton(in pContext as JObject) returns JObject \
		binds to "java:android.widget.Button>new(Landroid/content/Context;)?ui"

	handler NativeButtonView() returns JObject
		return _JNI_CreateButton(ApplicationContext())
	end handler

Description:
Use the <ApplicationContext> handler to fetch the current application's
Context object.
*/
public handler ApplicationContext() returns JObject
	return _JNI_GetEngineContext(_JNI_GetAndroidEngine())
end handler

private variable sResultListeners as Array

public handler type OnActivityResultHandler(\
    in pRequestCode as JInt, \
    in pResultCode as JInt, \
    in pIntent as optional JObject) returns nothing

handler _OnActivityResultListener(\
        in pRequestCode as JObject, \
        in pResultCode as JObject, \
        in pIntent as optional JObject) returns nothing
    
    variable tContext as JObject
    put ApplicationContext() into tContext

    variable tRequestCode as JInt
    put _JNI_NumberIntValue(pRequestCode) into tRequestCode
    variable tResultCode as JInt
    put _JNI_NumberIntValue(pResultCode) into tResultCode

    _JNI_LiveCodeActivityRemoveOnActivityResultListener(tContext, tResultCode)

    variable tRequestCodeString as String
    put tRequestCode formatted as string into tRequestCodeString

    if tRequestCodeString is among the keys of sResultListeners then
        variable tHandler as OnActivityResultHandler
        put sResultListeners[tRequestCodeString] into tHandler
        delete sResultListeners[tRequestCodeString]
        tHandler(tRequestCode, tResultCode, pIntent)
    end if
end handler

__safe foreign handler _JNI_LiveCodeActivityOnActivityResultListener( \
    in pCallbacks as Array) returns JObject \
    binds to "java:com.runrev.android.LiveCodeActivity$OnActivityResultListener>interface()"

__safe foreign handler _JNI_LiveCodeActivitySetOnActivityResultListener( \
    in pEngine as JObject, \
    in pListener as JObject, \
    in pRequestCode as JInt) returns nothing \
    binds to "java:com.runrev.android.LiveCodeActivity>setOnActivityResultListener(Lcom/runrev/android/LiveCodeActivity$OnActivityResultListener;I)V"

__safe foreign handler _JNI_LiveCodeActivityRemoveOnActivityResultListener( \
    in pEngine as JObject, \
    in pRequestCode as JInt) returns nothing \
    binds to "java:com.runrev.android.LiveCodeActivity>removeOnActivityResultListener(I)V"

__safe foreign handler _JNI_ActivityStartActivityForResult( \
    in pActivity as JObject, \
    in pIntent as JObject, \
    in pRequestCode as JInt) \
    returns nothing \
    binds to "java:android.app.Activity>startActivityForResult(Landroid/content/Intent;I)V"

__safe foreign handler _JNI_NumberIntValue(in pNumber as JObject) returns JInt \
    binds to "java:java.lang.Number>intValue()I"

/**
Summary: Start an activity by Intent

Example:

    constant kIntentACTION_SEND is "android.intent.action.SEND"
    constant kIntentEXTRA_TEXT is "android.intent.extra.TEXT"
    constant kActivityRESULT_CANCELED is 0
    constant kShareStringRequestCode is 123

    __safe foreign handler _JNI_IntentNew(in pAction as JString) \
        returns JObject \
        binds to "java:android.content.Intent>new(Ljava/lang/String;)"

    __safe foreign handler _JNI_IntentSetType(in pIntent as JObject, \
        in pType as JString) \
        returns JObject \
        binds to "java:android.content.Intent>setType(Ljava/lang/String;)Landroid/content/Intent;"

    __safe foreign handler _JNI_IntentPutExtraString(in pIntent as JObject, \
        in pType as JString, \
        in pValue as JString) \
        returns JObject \
        binds to "java:android.content.Intent>putExtra(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;"

    handler _ShareStringResultListener( \
            in pRequestCode as JInt, \
            in pResultCode as JInt, \
            in pIntent as optional JObject) returns nothing

        if pResultCode is kActivityRESULT_CANCELED then
            post "shareStringCancelled"
        else
            post "shareStringComplete"
        end if
    end handler

    public handler ShareString(in pString as String) returns nothing
        variable tIntent as JObject
        put _JNI_IntentNew(StringToJString(kIntentACTION_SEND)) into tIntent

        _JNI_IntentSetType(tIntent, StringToJString("text/plain"))

        _JNI_IntentPutExtraString(tIntent, StringToJString(kIntentEXTRA_TEXT), \
            StringToJString(pString))

        StartActivityForResult(tIntent, kShareStringRequestCode, _ShareStringResultListener)
    end handler

Parameters:
pIntent: An Intent JObject to use to start an activity
pRequestCode: A positive integer used to identify the request when handling
`onActivityResult`.
pHandler: A handler that conforms to the `OnActivityResultHandler` type

Description:
Start an activity by Intent and receive a callback to the specified handler when
the LiveCode activity receives the result via the `onActivityResult` method.

The callback must conform to the `OnActivityResultHandler` type which returns
nothing and has parameters:

- in pRequestCode as JInt
- in pResultCode as JInt
- in pIntent as optional JObject

*/

public handler StartActivityForResult( \
        in pIntent as JObject, \
        in pRequestCode as JInt, \
        in pHandler as OnActivityResultHandler) returns nothing

    variable tContext as JObject
    put ApplicationContext() into tContext

    variable tListener as JObject
    put _JNI_LiveCodeActivityOnActivityResultListener(\
            {"onActivityResult" : _OnActivityResultListener }) into tListener

    _JNI_LiveCodeActivitySetOnActivityResultListener(tContext, tListener, pRequestCode)

    put pHandler into sResultListeners[pRequestCode formatted as string]

    _JNI_ActivityStartActivityForResult(tContext, pIntent, pRequestCode)
end handler


private foreign handler MCAndroidCheckRuntimePermission(in pPermission as String) \
	returns CBool binds to "<builtin>"

/**
Summary:
Displays a dialog showing a permission request for <pPermission>. If a user
has already granted permission for <pPermission>, this function does nothing.

Returns true if permission <pPermission> has been granted by the user.

Parameters:
pPermission (enum):
The name of the permission to request.

-   "android.permission.READ_CALENDAR": permission to allow an application to read the device's calendar.
-   "android.permission.WRITE_CALENDAR": permission to allow an application to write to the device's calendar.
-   "android.permission.CAMERA": permission to allow an application to access the device's camera.
-   "android.permission.ACCESS_COARSE_LOCATION": permission to allow an application to access the device's coarse location.
-   "android.permission.ACCESS_FINE_LOCATION": permission to allow an application to access the device's fine location.
-   "android.permission.READ_CONTACTS": permission to allow an application to read data from the device's contacts.
-   "android.permission.WRITE_CONTACTS": permission to allow an application to write date to the device's contacts.
-   "android.permission.GET_ACCOUNTS": permission to allow an application to access to the list of accounts in the Accounts Service.
-   "android.permission.RECORD_AUDIO": permission to allow an application to allow an application to record audio.
-   "android.permission.READ_EXTERNAL_STORAGE": permission to allow an application to read data from the device's external storage.
-   "android.permission.WRITE_EXTERNAL_STORAGE": permission to allow an application to write data to the device's external storage.
-   "android.permission.READ_PHONE_STATE": permission to allow an application to access phone state, including the phone number of the device, current cellular network information, the status of any ongoing calls, and a list of any PhoneAccounts registered on the device.
-   "android.permission.READ_PHONE_NUMBERS": permission to allow an application to access the device's phone number(s).
-   "android.permission.CALL_PHONE": permission to allow an application to initiate a phone call without going through the Dialer user interface for the user to confirm the call.
-   "android.permission.ANSWER_PHONE_CALLS": permission to allow an application to answer an incoming phone call.
-   "android.permission.READ_CALL_LOG": permission to allow an application to read the user's call log.
-   "android.permission.WRITE_CALL_LOG": permission to allow an application to write to the user's call log.
-   "android.permission.ADD_VOICEMAIL": permission to allow an application to add voicemails into the system.
-   "android.permission.USE_SIP": permission to allow an application to use SIP service.
-   "android.permission.PROCESS_OUTGOING_CALLS": permission to allow an application to see the number being dialed during an outgoing call with the option to redirect the call to a different number or abort the call altogether.
-   "android.permission.SEND_SMS": permission to allow an application to send SMS messages.
-   "android.permission.RECEIVE_SMS": permission to allow an application to receive SMS messages
-   "android.permission.READ_SMS": permission to allow an application to read SMS messages.
-   "android.permission.RECEIVE_WAP_PUSH": permission to allow an application to receive WAP push messages.
-   "android.permission.RECEIVE_MMS": permission to allow an application to receive MMS messages.
-   "android.permission.BODY_SENSORS": permission to allow an application to access data from sensors that the user uses to measure what is happening inside his/her body, such as heart rate.

Returns(boolean):
True if permission has been granted, false otherwise.

Description:
Use the <AndroidRequestPermission> command to request permission for
<pPermission> from the user.

>*Note:* Permission names are case sensitive.
*/
public handler AndroidRequestPermission(in pPermission as String) returns Boolean
	variable tHasPermission as Boolean
	unsafe
		MCAndroidCheckRuntimePermission(pPermission)
		put MCAndroidHasPermission(pPermission) into tHasPermission
	end unsafe
	return tHasPermission
end handler

private foreign handler MCAndroidCheckPermissionExists(in pPermission as String) \
	returns CBool binds to "<builtin>"

/**
Summary:
Returns true if <pPermission> is a valid Android permission name

Parameters:
pPermission (string):
The name of the permission to check.

Returns(boolean):
True if <pPermission> is a valid Android permission name, false otherwise.

Description:
Use the <AndroidPermissionExists> function to check if <pPermission> is a valid
Android permission name.

>*Note:* Permission names are case sensitive.
*/
public handler AndroidPermissionExists(in pPermission as String) returns Boolean
	variable tPermissionExists as Boolean
	unsafe
		put MCAndroidCheckPermissionExists(pPermission) into tPermissionExists
	end unsafe
	return tPermissionExists
end handler

private foreign handler MCAndroidHasPermission(in pPermission as String) \
	returns CBool binds to "<builtin>"

/**
Summary:
Returns true if permission <pPermission> has been granted by the user.

Parameters:
pPermission (enum):
The name of the permission to request.

-   "android.permission.READ_CALENDAR": permission to allow an application to read the device's calendar.
-   "android.permission.WRITE_CALENDAR": permission to allow an application to write to the device's calendar.
-   "android.permission.CAMERA": permission to allow an application to access the device's camera.
-   "android.permission.ACCESS_COARSE_LOCATION": permission to allow an application to access the device's coarse location.
-   "android.permission.ACCESS_FINE_LOCATION": permission to allow an application to access the device's fine location.
-   "android.permission.READ_CONTACTS": permission to allow an application to read data from the device's contacts.
-   "android.permission.WRITE_CONTACTS": permission to allow an application to write date to the device's contacts.
-   "android.permission.GET_ACCOUNTS": permission to allow an application to access to the list of accounts in the Accounts Service.
-   "android.permission.RECORD_AUDIO": permission to allow an application to allow an application to record audio.
-   "android.permission.READ_EXTERNAL_STORAGE": permission to allow an application to read data from the device's external storage.
-   "android.permission.WRITE_EXTERNAL_STORAGE": permission to allow an application to write data to the device's external storage.
-   "android.permission.READ_PHONE_STATE": permission to allow an application to access phone state, including the phone number of the device, current cellular network information, the status of any ongoing calls, and a list of any PhoneAccounts registered on the device.
-   "android.permission.READ_PHONE_NUMBERS": permission to allow an application to access the device's phone number(s).
-   "android.permission.CALL_PHONE": permission to allow an application to initiate a phone call without going through the Dialer user interface for the user to confirm the call.
-   "android.permission.ANSWER_PHONE_CALLS": permission to allow an application to answer an incoming phone call.
-   "android.permission.READ_CALL_LOG": permission to allow an application to read the user's call log.
-   "android.permission.WRITE_CALL_LOG": permission to allow an application to write to the user's call log.
-   "android.permission.ADD_VOICEMAIL": permission to allow an application to add voicemails into the system.
-   "android.permission.USE_SIP": permission to allow an application to use SIP service.
-   "android.permission.PROCESS_OUTGOING_CALLS": permission to allow an application to see the number being dialed during an outgoing call with the option to redirect the call to a different number or abort the call altogether.
-   "android.permission.SEND_SMS": permission to allow an application to send SMS messages.
-   "android.permission.RECEIVE_SMS": permission to allow an application to receive SMS messages
-   "android.permission.READ_SMS": permission to allow an application to read SMS messages.
-   "android.permission.RECEIVE_WAP_PUSH": permission to allow an application to receive WAP push messages.
-   "android.permission.RECEIVE_MMS": permission to allow an application to receive MMS messages.
-   "android.permission.BODY_SENSORS": permission to allow an application to access data from sensors that the user uses to measure what is happening inside his/her body, such as heart rate.

Returns(boolean):
True if permission has been granted, false otherwise.

Description:
Use the <AndroidHasPermission> function to find out if permission
<pPermission> has been granted by the user.

>*Note:* Permission names are case sensitive.
*/
public handler AndroidHasPermission(in pPermission as String) returns Boolean
	variable tHasPermission as Boolean
	unsafe
		put MCAndroidHasPermission(pPermission) into tHasPermission
	end unsafe
	return tHasPermission
end handler

end module
