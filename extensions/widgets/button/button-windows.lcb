/*
Copyright (C) 2018 LiveCode Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

module com.livecode.widget.native.button.windows

use com.livecode.widget.native.button.shared
use com.livecode.canvas
use com.livecode.foreign

public handler Implementation_Windows() returns Array
	return \
		{ \
			"HasImplementation": HasImplementation_Windows, \
			"HasView": HasView_Windows, \
			"SetLabel": SetLabel_Windows, \
			"NativeView": NativeView_Windows, \
			"UpdateView": UpdateView_Windows, \
			"DestroyView": DestroyView_Windows \			
		}
end handler

private variable mButtonView_Windows as optional Pointer

public handler HasImplementation_Windows() returns Boolean
	return true
end handler

public handler HasView_Windows() returns Boolean
	return mButtonView_Windows is not nothing
end handler

public handler SetLabel_Windows(in pLabel as String) returns nothing
    unsafe
        _SetLabel_Windows(pLabel)
    end unsafe
end handler

public handler NativeView_Windows(in pParent as optional Pointer) returns Pointer
	unsafe
		return _NativeView_Windows(pParent)
	end unsafe
end handler

public handler DestroyView_Windows() returns nothing
	put nothing into mButtonView_Windows
end handler

public handler UpdateView_Windows(in pIntrinsicProps as Array) returns nothing
	unsafe
		_UpdateView_Windows(pIntrinsicProps)
	end unsafe
end handler

/****/

public type DWORD is CULong
public type WIDESTRING is ZStringUTF16
public type HINSTANCE is Pointer
public type HMENU is Pointer
public type HWND is Pointer

foreign handler CreateWindow(in pEx as DWORD, \
	in pString as WIDESTRING, in pLabel as WIDESTRING, \
	in pStyle as DWORD, in pX as CInt, in pY as CInt, \
	in pWidth as CInt, in pHeight as CInt, in pParent as HWND, \
	in pMenu as optional HMENU, in pInstance as optional HINSTANCE, \
	in pParam as optional Pointer) \
	returns HWND binds to "user32>CreateWindowExW!stdcall"

foreign handler SendMessage(in pView as HWND, in pMsg as CUInt, \	
	in pWParam as optional Pointer, in pLParam as optional Pointer) \
	returns nothing binds to "user32>SendMessageW!stdcall"

foreign handler SetWindowText(in pView as HWND, \
	in pLabel as WIDESTRING) \
	returns CInt binds to "user32>SetWindowTextW!stdcall"

foreign handler EnableWindow(in pView as Pointer, in pEnable as CInt) \
	returns CInt binds to "user32>EnableWindow!stdcall"

private foreign handler MCCanvasFontGetHandle(in pFont as Font, \
	out rHandle as Pointer) returns nothing binds to "<builtin>"
	
private unsafe handler _SetLabel_Windows(in pLabel as String)
	SetWindowText(mButtonView_Windows, pLabel)	
end handler

constant BS_DEFPUSHBUTTON is 1
constant WS_CHILD is 1073807361
private unsafe handler _NativeView_Windows(in pParent as HWND) returns HWND
    variable tButton as HWND
    put CreateWindow(0, "BUTTON", "LABEL", \
    	WS_CHILD bitwise or BS_DEFPUSHBUTTON, 0, 0, \
        0, 0, pParent, nothing, nothing, nothing) \
        into tButton
    
    put tButton into mButtonView_Windows
    return tButton
end handler

constant WM_SETFONT is 48
private unsafe handler _UpdateView_Windows(in pIntrinsicProps as Array)
	/* Set the enabled state of the button to the host property. */
	variable tEnabled as Integer
	if pIntrinsicProps["enabled"] then
		put 1 into tEnabled
	else
		put 0 into tEnabled
	end if
    EnableWindow(mButtonView_Windows, tEnabled)
    
    /* Set the font of the button to the host property. */
    variable tFontHandle as Pointer
    MCCanvasFontGetHandle(pIntrinsicProps["font"], tFontHandle)
    SendMessage(mButtonView_Windows, WM_SETFONT, tFontHandle, nothing)
end handler

end module
