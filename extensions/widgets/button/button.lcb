/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/* 
This widget is a push button that dispatches mouse events to its script object.
This widget has three properties that can be set: theme; buttonStyle and label.
*/
 
-- declaring the extension as a widget, followed by the identifier
widget com.livecode.extensions.livecode.button
--

-- adding metadata to ensure the extension displays correctly in livecode
metadata author is "Benjamin Beaumont"
metadata version is "1.0.2"
metadata title is "Cross Platform Button"
--

-- dependancy declarations
use com.livecode.canvas
use com.livecode.widget
use com.livecode.engine
--

-- property declarations
property theme 			get mTheme 		set setTheme
property buttonstyle 	get mStyle 		set setStyle
property label 			get mLabel 		set setLabel
--

-- private instance variables
private variable mTheme as optional string
private variable mStyle as optional string
private variable mLabel as optional string
private variable mState as optional string
--

-- constants
constant kMaxHeight is 88
constant kMinHeight is 35
constant kWhite is [1,1,1]
constant kBlack is [0,0,0]
--

----------
-- this handler is called when the widget is saved
public handler OnSave(out rProperties as array)
	put the empty array into rProperties
	
	put mTheme into rProperties["theme"]
	put mStyle into rProperties["buttonstyle"]
	put mLabel into rProperties["label"]
	
	return rProperties
end handler
----------

----------
-- this handler is called when the widget is loaded
public handler OnLoad(in pProperties as array)
	put pProperties["theme"] into mTheme
	put pProperties["buttonstyle"] into mStyle
	put pProperties["label"] into mLabel
end handler
----------

----------
-- this handler is called when the widget is created
public handler OnCreate() as undefined
	put "ios-8" into mTheme
	put "Button" into mLabel
	put "default" into mStyle
	put "none" into mState
end handler
----------

----------
-- this handler is called whenever the widget is drawn
public handler OnPaint() as undefined
	
	// Draw the shadow
	// To implement. Waiting for the ability to draw outside the bounds of a control
	
	// Draw the main background
	variable tPath as Path
	put rounded rectangle path of my bounds with radius getCornerRadius() into tPath
	set the paint of this canvas to getPaint_BackgroundFill()
	fill tPath on this canvas
	
	// Draw the stoke
	set the paint of this canvas to getPaint_BackgroundStrokeFill()
	set the stroke width of this canvas to getStrokeWidth()
	stroke tPath on this canvas
	
	// Draw the text
	set the font of this canvas to font getFontName() at size getFontSize()
	set the paint of this canvas to getPaint_TextFill()
	fill text mLabel at center of my bounds on this canvas
end handler
----------

----------
-- the following handlers are for mouse actions
public handler OnMouseDown() as undefined
	put "pressed" into mState
	redraw all
	dispatch command "mouseDown" to my script object
end handler
--
public handler OnMouseUp() as undefined
	put "none" into mState
	redraw all
	dispatch command "mouseUp" to my script object
end handler
--
public handler OnMouseEnter() as undefined
	put "over" into mState
	redraw all
end handler
--
public handler OnMouseLeave() as undefined
	if mState is not "pressed" then
		put "none" into mState
		redraw all
	end if
end handler
----------

----------
-- this handler returns the stroke width
private handler getStrokeWidth() as integer
	return 1
end handler
----------

----------
-- this handler returns the corner radius
private handler getCornerRadius() as integer
	if mTheme is "ios-8" then
		return 9
	else if mTheme is "macos-10.10" then
		return 5
	end if	 
	
	return 10
end handler
----------

----------
-- this handler returns a font name as a string
private handler getFontName() as string
	if mTheme is "ios-8" then
		return "Helvetica Neue"
	end if	
	
	return the name of the font of this canvas
end handler
----------

----------
-- this handler returns the font size
private handler getFontSize() as integer
	if mTheme is "ios-8" then
	 	if my height >= kMaxHeight then
			return 42 
		else if my height <= kMinHeight then
			return 12
		else
			return 24
		end if	
	end if	
	
	return 11
end handler
----------

----------
-- this handler returns a paint for the background fill
private handler getPaint_BackgroundFill() as Paint
	if mTheme is "ios-8" then
		if mState is "pressed" then	
			return solid paint with color [246/255, 246/255, 247/255]
		else
			return solid paint with color kWhite
		end if
	
	else if mTheme is "macos-10.10" then
		variable tStops as list
		if mStyle is "default" and mState is "pressed" then
			put [ gradient stop at 0.0 with color [76/255,150/255,252/255], gradient stop at 1.0 with color [16/255,103/255,227/255] ] into tStops
		else if mStyle is "default" then
			put [ gradient stop at 0.0 with color [105/255,177/255,250/255], gradient stop at 1.0 with color [0.051,0.506,1] ] into tStops
		else if mState is "pressed" then
			put [ gradient stop at 0.0 with color [105/255,177/255,250/255], gradient stop at 1.0 with color [0.051,0.506,1] ] into tStops
		else
			return solid paint with color [1, 1, 1,0.17]
		end if
		
		// Create the linear gradient paint
		variable tPaint as Paint
		put linear gradient with ramp tStops into tPaint
		
		// Scale the paint
		scale tPaint by [my height, my width]
		rotate tPaint by 90
		return tPaint
	end if
	
	return solid paint with color kWhite
end handler
----------

----------
-- this handler returns a paint for the background stroke
private handler getPaint_BackgroundStrokeFill() as Paint
	if mTheme is "ios-8" then
		return solid paint with color kWhite
	else if mTheme is "macos-10.10" then
		variable tStops as list
		if mStyle is "default" and mState is "pressed" then
			put [ gradient stop at 0.0 with color [40/255,125/255,253/255], gradient stop at 1.0 with color [8/255,63/255,220/255] ] into tStops
		else if mStyle is "default" then
			put [ gradient stop at 0.0 with color [0.29,0.63,0.97], gradient stop at 1.0 with color [0.02,0.38,1] ] into tStops
		else if mState is "pressed" then
			put [ gradient stop at 0.0 with color [0.29,0.63,0.97], gradient stop at 1.0 with color [0.02,0.38,1] ] into tStops
		else
			put [ gradient stop at 0.0 with color [0.765,0.765,0.765], gradient stop at 1.0 with color [0.67,0.67,0.67] ] into tStops
		end if
		
		// Create the linear gradient paint
		variable tPaint as Paint
		put linear gradient with ramp tStops into tPaint
	
		// Scale the paint
		scale tPaint by [my height, my width]
		rotate tPaint by 90
		return tPaint
	end if
	
	return solid paint with color kWhite
end handler
----------

----------
-- this handler returns a paint for the text
private handler getPaint_TextFill() as Paint
	if mTheme is "ios-8" then
		return solid paint with color [51/255,153/255,1]
		
	else if mTheme is "macos-10.10" then
		if mStyle is "default" then
			return solid paint with color kWhite
		else if mState is "pressed" then
			return solid paint with color kWhite
		else
			return solid paint with color kBlack
		end if			
	end if
	
	return solid paint with color kBlack
end handler
----------

----------
-- this handler sets the theme of the button

/*
Summary: Sets the theme of the button

Parameters:
pThemeName: The name of the theme.

Description:
Sets the theme property of the button to either "macos-10" or "ios-8".
*/

public handler setTheme(in pThemeName as string) as undefined
	put pThemeName into mTheme
	redraw all
end handler
----------

/*
Summary: Sets the label of the button

Parameters: 
pLabel: The text of the label.

Description:
Sets the text of the label property to any string.
*/

----------
-- this handler sets the label of the button
private handler setLabel(in pLabel as string) as undefined
	put pLabel into mLabel
	redraw all
end handler
----------

/*
Summary: Sets the style of the button

Parameters:
pStyle: The name of the style.

Description:
Sets the style property of the button to either "standard" or "default".
*/

----------
-- this handler sets the style of the button
private handler setStyle(in pStyle as string) as undefined
	if pStyle is in ["standard","default"] then
		put pStyle into mStyle
		redraw all
	end if
end handler
----------

end widget