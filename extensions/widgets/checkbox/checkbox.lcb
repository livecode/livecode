/*Copyright (C) 2015 Runtime Revolution Ltd.This file is part of LiveCode.LiveCode is free software; you can redistribute it and/or modify it underthe terms of the GNU General Public License v3 as published by the FreeSoftware Foundation.LiveCode is distributed in the hope that it will be useful, but WITHOUT ANYWARRANTY; without even the implied warranty of MERCHANTABILITY orFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public Licensefor more details.You should have received a copy of the GNU General Public Licensealong with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */-- declaring extension as widget, followed by identifierwidget com.livecode.extensions.livecode.checkBox---- adding metadata to ensure the extension displays correctly in livecodemetadata title is "Check Box"metadata author is "Georgia Hutchings"metadata version is "1.0.3"---- dependancy declarationsuse com.livecode.canvasuse com.livecode.widgetuse com.livecode.engine---- property declarationsproperty theme				get mTheme			set setThemeproperty checked			get mChecked		set setChecked---- private instance variablesprivate variable mTheme as stringprivate variable mChecked as booleanprivate variable mState as stringprivate variable mTransparent as Colorprivate variable mColorWhite as Colorprivate variable mColorBlack as Colorprivate variable mColorLightGrey as Colorprivate variable mColorDarkGrey as Colorprivate variable mColorMacGreen as Color-------------- called when the widget is createdpublic handler OnCreate()	put "ios-8" into mTheme	put false into mChecked	put "not animating" into mState		put color [1.0, 1.0, 1.0, 0.0] into mTransparent	put color [1.0, 1.0, 1.0] into mColorWhite	put color [0.0, 0.0, 0.0] into mColorBlack	put color [224/255, 224/255, 224/255] into mColorLightGrey	put color [96/255, 96/255, 96/255] into mColorDarkGrey	put color [0.0, 204/255, 0.0] into mColorMacGreenend handler---------------------- called whenever livecode needs to redraw the widgetpublic handler OnPaint()		-- draw the check box when animating and not animating	set the stroke width of this canvas to 2	set the paint of this canvas to getPaint("border")	stroke getPath("box") on this canvas	set the paint of this canvas to getPaint("background")	fill getPath("box") on this canvas	--		-- when the state is "not animating"	if mState is "not animating" then				-- draw the circle 		set the paint of this canvas to getPaint("circle")				if mChecked is true then			fill getPath("right circle") on this canvas		else			fill getPath("left circle") on this canvas		end if			set the paint of this canvas to solid paint with mColorDarkGrey		set the stroke width of this canvas to 0.5		if mChecked is true then			stroke getPath("right circle") on this canvas		else			stroke getPath("left circle") on this canvas		end if		--		-- when the state is "animating"	else if mState is "animating" then		set the stroke width of this canvas to (my width/2)*0.01				if mChecked is false then					set the paint of this canvas to solid paint with mColorDarkGrey			stroke getPath("left rect") on this canvas			stroke getPath("ellipse") on this canvas			stroke getPath("left circle") on this canvas						set the paint of this canvas to solid paint with mColorWhite			fill getPath("left rect") on this canvas			fill getPath("ellipse") on this canvas			fill getPath("left circle") on this canvas			else if mChecked is true then					set the paint of this canvas to solid paint with mColorDarkGrey			stroke getPath("right rect") on this canvas			stroke getPath("ellipse") on this canvas			stroke getPath("right circle") on this canvas				set the paint of this canvas to solid paint with mColorWhite			fill getPath("right rect") on this canvas			fill getPath("ellipse") on this canvas			fill getPath("right circle") on this canvas				end if			end if	--	end handler--------------------public handler OnMouseDown()	if getClickLoc() is within getRect("bounding box") then		put "animating" into mState		redraw all	end if	dispatch command "mouseDown" to my script objectend handler--------------------public handler OnMouseUp()	if getClickLoc() is within getRect("bounding box") then		setChecked(not(mChecked))		put "not animating" into mState		redraw all	end if	dispatch command "mouseUp" to my script objectend handler---------------------- sets the theme of the widgetpublic handler setTheme(in pTheme as string) as undefined	put pTheme into mTheme	redraw allend handler---------------------- sets whether the box is checkedpublic handler setChecked(in pChecked as boolean) as undefined	put pChecked into mChecked	redraw allend handler---------------------- this handler returns a pathprivate handler getPath(in pString as string) as Path	if pString is "box" then		return rounded rectangle path of rectangle [(my width)/2 - (my height)/2, (my height)/4, (my width)/2 + (my height)/2, 3*(my height)/4] with radius (my height)/4	else if pString is "left circle" then		return circle path centered at point [(my width)/2 - (my height)/4, (my height)/2] with radius (my height)/4	else if pString is "right circle" then		return circle path centered at point [(my width)/2 + (my height)/4, (my height)/2] with radius (my height)/4	else if pString is "ellipse" then		return ellipse path centered at point [(my width)/2, (my height)/2] with radii [(my height)/8, (my height)/4]	else if pString is "left rect" then		return rectangle path of rectangle [(my width)/2 - (my height)/4, (my height)/4, (my width)/2, 3*(my height)/4]	else if pString is "right rect" then		return rectangle path of rectangle [(my width)/2, (my height)/4, (my width)/2 + (my height)/4, 3*(my height)/4]	end ifend handler---------------------- this handler returns a rectangleprivate handler getRect(in pString as string) as Rectangle	if pString is "bounding box" then		return rectangle [(my width)/2 - 3*(my height)/4, (my height)/4, (my width)/2 + 3*(my height)/4, 3*(my height)/4]	end ifend handler---------------------- this handler returns a paintprivate handler getPaint(in pString as string) as Paint	if pString is "border" then		if mChecked is false then			return solid paint with mColorLightGrey		else			return solid paint with mColorMacGreen		end if			else if pString is "background" then		if mChecked is true then			return solid paint with mColorMacGreen						else if mChecked is false then			if mState is "not animating" then				return solid paint with mColorWhite			else 				return solid paint with mColorLightGrey			end if					end if			else if pString is "circle" then		return solid paint with mColorWhite			end ifend handler---------------------- this handler returns the click loc as a pointpublic handler getClickLoc() as Point	variable tClickLoc	execute script "return the clickloc"	put the result into tClickLoc		variable tClickPoint as list	split tClickLoc by "," into tClickPoint		variable tX as number	variable tY as number	put (element 1 of tClickPoint) parsed as number - the left of my rectangle into tX	put (element 2 of tClickPoint) parsed as number - the top of my rectangle into tY	variable tPoint as Point	put point [tX,tY] into tPoint		return tPointend handler----------end widget