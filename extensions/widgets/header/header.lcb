/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
This widget is a header bar.

Name: headerLabel

Type: property

Summary: Sets the title of the header bar

Syntax:
set the headerLabel of <widget> to <pLabel>
get the headerLabel of <widget>

Parameters:
pLabel: The text of the title of the header bar.

Description:
Sets the title of the header bar to any string.

Name: headerActions

Type: property

Summary: Sets the actions of the header bar

Syntax:
set the headerActions of <widget> to <pActions>
get the headerActions of <widget>

Parameters:
pActions: The list of actions.

Description:
Sets the actions of the header bar from pActions, where pActions is a line delimited list of the actions, where each line is a comma delimited list
of the different components of the action: name, icon, command

Name: actionStyle
Type: property
Syntax: set the actionStyle of <widget> to <pActionStyle>
Syntax: get the actionStyle of <widget>

Summary: Sets the header actions display style.

Parameters:
pActionStyle(enum): The style of the header actions display.
-"icons": Show the icons
-"names": Show the names

Description:
Sets the header actions display style of the control.

Name: enableBackButton
Type: property
Syntax: set the enableBackButton of <widget> to <pEnable>
Syntax: get the enableBackButton of <widget>
Summary: Controls whether the back button is enabled or not.

pEnable(boolean): True or false

Description:
Controls whether the back button is enabled or not.

*/
-- declaring extension as widget, followed by identifier
widget com.livecode.extensions.livecode.headerBar
--
-- dependency declarations
use com.livecode.canvas
use com.livecode.widget
use com.livecode.engine

-- metadata
metadata title is "Header Bar"
metadata author is "LiveCode"
metadata version is "1.0.7"

-- property declarations
property headerActions				get getActions		set setActions
property enableBackButton		get mBackIsEnabled	set setEnableBack
property headerLabel					get mLabel			set setLabel
property actionStyle			get mActionStyle	set setActionStyle
--

-- property metadata
metadata actions.editor 			is "com.livecode.pi.text"
metadata actions.default 			is "new,f067"
metadata enableBackButton.default 	is "true"
metadata label.default 				is "Title"

metadata actionStyle.editor 		is "com.livecode.pi.enum"
metadata actionStyle.options 		is "icons,names"
metadata actionStyle.default 		is "icons"
--

-- private instance variables
private variable mActions 			as List
private variable mBackIsEnabled 	as Boolean
private variable mLabel 			as String
private variable mTheme 			as String
private variable mActionStyle 		as String

private variable mIconWidth 		as Real
private variable mSize 				as Real
private variable mSelectedIcon 		as Integer
private variable mRight 			as Real
private variable mLetterCount		as Real
--

-- constants
constant kBlack is [0,0,0]
constant kIconMax is 56
constant kIconMin is 16
constant kMaxSize is 40
constant kMinSize is 12
--

public handler OnSave(out rProperties as Array)
	put the empty array into rProperties
	
	put mActions into rProperties["actions"]
	put mBackIsEnabled into rProperties["enableBack"]
	put mLabel into rProperties["label"]
	put mTheme into rProperties["theme"]
	put mActionStyle into rProperties["actionStyle"]
	
	return rProperties
end handler

public handler OnLoad(in pPropreties as Array)
	put pPropreties["actions"] into mActions
	put pPropreties["enableBack"] into mBackIsEnabled
	put pPropreties["label"] into mLabel
	put pPropreties["theme"] into mTheme
	put pPropreties["actionStyle"] into mActionStyle
end handler

public handler OnCreate()
	
	-- creating a list of actions
	put the empty list into mActions
	put [["new"],["f067"]] into mActions
	--
	
	-- properties
	put true into mBackIsEnabled
	put "Title" into mLabel
	put "" into mTheme
	put "icons" into mActionStyle
	
	-- variables
	put 20 into mIconWidth
	put 10 into mSize
	put 0 into mSelectedIcon
	put 0 into mRight
	put 0 into mLetterCount
end handler

public handler OnPaint()
	
	updateIconWidth()
	updateSize()
	
	-- draw the background rectangle
	set the paint of this canvas to getPaint("background")
	fill getPath("background") on this canvas
	--
	
	-- drawing the line at the bottom of the header bar
	set the paint of this canvas to getPaint("line")
	fill getPath("line") on this canvas
	--
	
	-- filling in the text of the label	
	set the font of this canvas to getFont("title")
	set the paint of this canvas to getPaint("title")
	fill text mLabel at center of getRect("label") on this canvas
	--
	
	-- drawing the back button and filling in the label, if mEnableback is true
	if mBackIsEnabled is true then
		if mSelectedIcon is 1 then
			set the paint of this canvas to getPaint("back button selected")
		else
			set the paint of this canvas to getPaint("back button")
		end if
	
		set the font of this canvas to getFont("icon")
		fill text "\u{f053}" at center of getRect("back button icon") on this canvas
	
		set the font of this canvas to getFont("label")
		fill text "Back" at left of getRect("back button label") on this canvas
	end if
	--

	-- draw the actions
	if mActions is not the empty list then
		variable tX as Integer
		variable tActionsCount as Integer
		variable tCount as Integer
	
		put the number of elements in (element 1 of mActions) into tActionsCount
		put 1 into tCount
		put my width into mRight
		put 0 into mLetterCount
	
		repeat with tX from 1 up to tActionsCount
	
			if tCount+1 is mSelectedIcon then
				set the paint of this canvas to getPaint("selected action")
			else 
				set the paint of this canvas to getPaint("actions")
			end if
		
			if mActionStyle is "icons" then
				set the font of this canvas to getFont("icon")
            
            	get (element tX of element 2 of mActions) converted from base 16
            	get the char with code the result
				fill text the result at center of getRect("action icon") on this canvas
			
				updateRight()
			
			else if mActionStyle is "names" then
				put the number of chars in element tX of element 1 of mActions into mLetterCount
				add 2 to mLetterCount
				set the font of this canvas to getFont("label")
				fill text (element tX of element 1 of mActions) at center of getRect("action name") on this canvas
			
				updateRight()

			end if
		
			add 1 to tCount
		end repeat
	end if
	--
	
end handler

public handler OnMouseDown()

	-- the icons change color when they are pressed down
	variable tSelectedDown as optional Integer
	put getSelectedIcon() into tSelectedDown
	
	if tSelectedDown > 0 then
		put tSelectedDown into mSelectedIcon
		redraw all
	end if

end handler

public handler OnMouseUp()

	-- the icons change back to their original colors on mouse up
	put 0 into mSelectedIcon
	redraw all
	
	-- the relevant commands are dispatched to the script object
	variable tSelectedUp as optional integer
	put getSelectedIcon() into tSelectedUp
	
	if tSelectedUp > 1 then
		
		variable tActionCount as optional integer
		variable tNumActions as Number
		variable tX as Number
		
		put the number of elements in (element 1 of mActions) into tNumActions
		put 1 into tActionCount	
		
		repeat with tX from 1 up to tNumActions
		
			if tActionCount is tSelectedUp-1 then
				variable tLabel as String
				put element tX of (element 1 of mActions) into tLabel
				post "headerAction" with [tLabel]
			end if
				
			add 1 to tActionCount
		end repeat
		
	else if tSelectedUp = 1 then
		post "backAction"
	end if
	
end handler

private handler getPaint(in pObject as String) as Paint

	if pObject is "background" then
		return solid paint with color [246/255, 246/255, 247/255]
		
	else if pObject is "actions" then
		return solid paint with  color [51/255, 153/255, 1.0] 
		
	else if pObject is "selected action" then
		return solid paint with color [51/255, 153/255, 1.0, 0.25]
		
	else if pObject is "back button" then
		return solid paint with  color [51/255, 153/255, 1.0] 
		
	else if pObject is "back button selected" then
		return solid paint with color [51/255, 153/255, 1.0, 0.25]
	
	else if pObject is "line" then
		return solid paint with color [178/255, 178/255, 178/255]
		
	else if pObject is "title" then
		 return solid paint with color kBlack
		
	end if
	
end handler

private handler getFont(in pType as String) as Font
	
	variable tFont as String
	if mTheme is "ios-8" then
		put "Helvetica Neue" into tFont
	else
		put the name of the font of this canvas into tFont
	end if
	
	if pType is "title" then 
		return font tFont with bold style at size mSize
	else if pType is "label" then
		return font tFont at size mSize
	else if pType is "icon" then
		return font "fontawesome" at size mSize
	end if

end handler

private handler getPath(in pObject as String) as Path
	
	if pObject is "background" then
		return rectangle path of rectangle [0, 0, my width, my height]
		
	else if pObject is "line" then 
		return rectangle path of rectangle [0,my height,my width,(my height)-1]
		
	end if
end handler

private handler getRect(in pObject as String) as Rectangle

	variable tLabelRect as Rectangle 
	put my bounds into tLabelRect
	
	if pObject is "label" then
		return tLabelRect
	
	else if pObject is "back button label" then
		add mIconWidth/2 to the right of tLabelRect
		return tLabelRect
	
	else if pObject is "back button icon" then
		return rectangle [0, 0, mIconWidth/2, my height]
		
	else if pObject is "action icon" then
		return rectangle [mRight-1.5*mIconWidth,0,mRight,my height]
		
	else if pObject is "action name" then
		return rectangle [mRight-mLetterCount*mSize/2,0,mRight,my height]
		
	end if
end handler
----------

----------
-- this handler converts mActions into a form that can be combined for output
private handler getActions() as String
	
	variable tActions as List
	put the empty list into tActions
	
	variable tX as Integer
	variable tActionCount as Integer
	variable tListLine as List
	variable tStringLine as String
	variable tActionList as List
	
	put the number of elements in element 1 of mActions into tActionCount
	put the empty string into tStringLine
	put the empty list into tActionList
	
	repeat with tX from 1 up to tActionCount
		put the empty list into tListLine

		push element tX of element 1 of mActions onto back of tListLine
		push element tX of element 2 of mActions onto back of tListLine
		
		combine tListLine with "," into tStringLine
		push tStringLine onto back of tActionList
	end repeat
	
	variable tActionString as String
	put the empty string into tActionString
	combine tActionList with newline into tActionString
		
	return tActionString
end handler


public handler setLabel(in pLabel as String) as undefined
	put pLabel into mLabel
	redraw all
end handler

----------
-- this handler sets the list of actions
public handler setActions(in pActions as String) as undefined
	if pActions is the empty string then
		put the empty list into mActions
	else
		variable tLabels as list
		variable tIcons as list
		put the empty list into tLabels
		put the empty list into tIcons

		variable tActionLines as list
		variable tAction as string
		split pActions by newline into tActionLines

		repeat for each element tAction in tActionLines
			variable tActionItems as list
			split tAction by "," into tActionItems

			push element 1 of tActionItems onto back of tLabels
			push element 2 of tActionItems onto back of tIcons
		end repeat

		put [tLabels, tIcons] into mActions
	end if

	redraw all
end handler
----------

----------
-- this handler sets whether the back button is enabled or not
public handler setEnableBack(in pIsEnabled as Boolean) as undefined
	put pIsEnabled into mBackIsEnabled
	redraw all
end handler
----------

----------
-- this handler sets the theme of the widget
public handler setTheme(in pTheme as String) as undefined
	put pTheme into mTheme
	redraw all
end handler
----------

----------
-- this handler sets the action style of the header bar
public handler setActionStyle(in pStyle as String) as undefined
	put pStyle into mActionStyle
	redraw all
end handler
----------

----------
-- this handler updates mIconWidth
private handler updateIconWidth() as undefined
	if (my width)/10 > kIconMax then
		put kIconMax into mIconWidth
	else if (my width)/10 < kIconMin then
		put kIconMin into mIconWidth
	else
		put (my width)/10 into mIconWidth
	end if 
end handler
----------

----------
-- this handler updates mSize
private handler updateSize() as undefined
	if (my width)/30 > kMaxSize then
		put kMaxSize into mSize
	else if (my width)/30 < kMinSize then
		put kMinSize into mSize
	else
		put (my width)/30 into mSize
	end if
end handler
----------

----------
-- this handler updates mRight
private handler updateRight() as undefined
	if mActionStyle is "icons" then
	
		if (my width)/15 < kIconMin then
			add -kIconMin to mRight
		else if (my width)/15 > kIconMax then
			add -kIconMax to mRight
		else
			add (-(my width)/15) to mRight
		end if
	
	else if mActionStyle is "names" then
		put mRight-mLetterCount*mSize/2 into mRight
	
	end if
end handler
----------

----------
-- this handler adds an action
public handler addAction(in pNewAction as String) as undefined
	
	variable tNewAction as List
	split pNewAction by "," into tNewAction
	
	variable tLabelList as List
	variable tIconList as List
	variable tActionList as List
	put element 1 of mActions into tLabelList
	put element 2 of mActions into tIconList
	
	push element 1 of tNewAction onto back of tLabelList
	push element 2 of tNewAction onto back of tIconList
	
	put [tLabelList,tIconList] into mActions
	
	redraw all
end handler
----------

----------
-- this handler removes an action
public handler removeAction(in pAction as String) as undefined

	variable tActions as String
	variable tActionList as List
	put getActions() into tActions
	split tActions by newline into tActionList
	put the empty string into tActions
	
	variable tActionElement
	variable tCount as Integer
	put 1 into tCount
	
	repeat for each element tActionElement in tActionList
		if tActionElement contains pAction then
			delete element tCount of tActionList
		end if
		add 1 to tCount
	end repeat
	
	combine tActionList	with newline into tActions
	
	setActions(tActions)
		
	redraw all
end handler
----------

----------
-- this handler returns the number of the action the mouse has clicked on
private handler getSelectedIcon() as Integer

	variable tSelected as Integer
	if mBackIsEnabled is true and the click position is within rectangle [0, 0, 1.2*mIconWidth+mIconWidth/4, my height] then
		put 1 into tSelected
	else
		put locToAction(the click position) into tSelected
	end if
	
	return tSelected
end handler
----------

----------
-- this handler returns the number of the icon which is being clicked	
private handler locToAction(in pLoc as Point) as Integer
	variable tActionCount as Integer
	put the number of elements in mActions into tActionCount
	
	variable tX as Integer
	repeat with tX from 1 up to tActionCount
		if pLoc is within actionRect(tX) then
			return tX+1
		end if
	end repeat
	
	return 0
end handler

private handler actionRect(in pItemCount as Integer) as Rectangle

	variable tRight as Real
	put my width - (mIconWidth)*(pItemCount-1) into tRight
	
	return rectangle [tRight-mIconWidth,0,tRight-mIconWidth/4,my height]
end handler

end widget
