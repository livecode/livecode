/*Copyright (C) 2015 Runtime Revolution Ltd.This file is part of LiveCode.LiveCode is free software; you can redistribute it and/or modify it underthe terms of the GNU General Public License v3 as published by the FreeSoftware Foundation.LiveCode is distributed in the hope that it will be useful, but WITHOUT ANYWARRANTY; without even the implied warranty of MERCHANTABILITY orFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public Licensefor more details.You should have received a copy of the GNU General Public Licensealong with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */-- declaring extension as widget, followed by identifierwidget com.livecode.extensions.livecode.headerBar---- adding metadata to ensure the extension displays correctly in livecodemetadata title is "Header Bar"metadata author is "Georgia Hutchings"metadata version is "1.0.6"---- dependency declarationsuse com.livecode.canvasuse com.livecode.widgetuse com.livecode.engine---- property declarationsproperty actions				get getActions		set setActionsproperty enableBackButton		get mEnableBack		set setEnableBackproperty label					get mLabel			set setLabelproperty theme					get mTheme			set setThemeproperty actionStyle			get mActionStyle	set setActionStyle---- private instance variablesprivate variable mActions 		as listprivate variable mEnableBack 	as booleanprivate variable mLabel 		as stringprivate variable mTheme 		as stringprivate variable mActionStyle 	as stringprivate variable mTransparent 	as Colorprivate variable mColorWhite 	as Colorprivate variable mColorBlack 	as Colorprivate variable mColorMacBlue 	as Colorprivate variable mIconWidth 	as numberprivate variable mSelectedIcon 	as optional integerprivate variable mRight 		as numberprivate variable mLetterCount	as number-------------- called when the widget is createdpublic handler OnCreate()		-- creating a list of actions	put the empty list into mActions	put [["Tone","Volume"],["f0f3","f0a1"],["toneAction","volumeAction"]] into mActions	--		put true into mEnableBack	put "Header" into mLabel	put "ios-8" into mTheme	put "icons" into mActionStyle		put color [1.0, 1.0, 1.0, 0.0] into mTransparent	put color [1.0, 1.0, 1.0] into mColorWhite	put color [0.0, 0.0, 0.0] into mColorBlack	put color [51/255, 153/255, 1.0] into mColorMacBlue		put 20 into mIconWidth	put 0 into mSelectedIcon	put 0 into mRight	put 0 into mLetterCountend handler---------------------- called whenever LiveCode needs to redraw the widgetpublic handler OnPaint()			-- draw the background rectangle	set the paint of this canvas to getPaint("background")	fill getPath("background") on this canvas	--		-- drawing the line at the bottom of the header bar	set the paint of this canvas to solid paint with color [178/255, 178/255, 178/255]	fill getPath("line") on this canvas	--		-- set the icon width based on the font size	put 2*getFontSize() into mIconWidth	--		-- filling in the text of the label		set the font of this canvas to font getFontName() with bold style at size getFontSize()	set the paint of this canvas to solid paint with mColorBlack	fill text mLabel at center of getRect("label") on this canvas	--		-- drawing the back button and filling in the label, if mEnableback is true	if mEnableBack is true then		if mSelectedIcon is 1 then			set the paint of this canvas to getPaint("back button selected")		else			set the paint of this canvas to getPaint("back button")		end if			set the font of this canvas to font "fontawesome" at size getFontSize()-2		execute script ("return numtocodepoint(0xf053)")		fill text the result at center of rectangle [0, 0, mIconWidth/2, my height] on this canvas			set the font of this canvas to font getFontName() at size getFontSize()		fill text "Back" at left of getRect("back button label") on this canvas	end if	--	-- draw the actions	variable tX as optional integer	variable tActionsCount as optional integer	variable tCount as optional integer		put the number of elements in (element 1 of mActions) into tActionsCount	put 1 into tCount	put my width into mRight	put 0 into mLetterCount		repeat with tX from 1 up to tActionsCount			if tCount+1 is mSelectedIcon then			set the paint of this canvas to getPaint("selected action")		else 			set the paint of this canvas to getPaint("actions")		end if				if mActionStyle is "icons" then			set the font of this canvas to font "fontawesome" at size getFontSize()			execute script ("return numtocodepoint(0x" & (element tX of element 2 of mActions) & ")")			fill text the result at center of getRect("action icon") on this canvas						updateRight()					else if mActionStyle is "names" then			put the number of chars in element tX of element 1 of mActions into mLetterCount			add 2 to mLetterCount			set the font of this canvas to font getFontName() at size getFontSize()			fill text (element tX of element 1 of mActions) at center of getRect("action name") on this canvas						updateRight()		end if				add 1 to tCount	end repeat	--	end handler---------------------- the following handlers deal with mouse eventspublic handler OnMouseDown()	-- the icons change color when they are pressed down	variable tSelectedDown as optional integer	put getSelectedIcon() into tSelectedDown		if tSelectedDown > 0 then		put tSelectedDown into mSelectedIcon		redraw all	end ifend handlerpublic handler OnMouseUp()	-- the icons change back to their original colors on mouse up	put 0 into mSelectedIcon	redraw all		-- the relevant commands are dispatched to the script object	variable tSelectedUp as optional integer	put getSelectedIcon() into tSelectedUp		if tSelectedUp > 1 then				variable tActionCount as optional integer		variable tNumActions as number		variable tX as number				put the number of elements in (element 1 of mActions) into tNumActions		put 1 into tActionCount					repeat with tX from 1 up to tNumActions					if tActionCount is tSelectedUp-1 then				variable tCommand as string				put element tX of (element 3 of mActions) into tCommand				dispatch command tCommand to my script object			end if							add 1 to tActionCount		end repeat			else if tSelectedUp = 1 then		dispatch command "backAction" to my script object	end if	end handler---------------------- this handler sets the label of the header barpublic handler setLabel(in pLabel as string) as undefined	put pLabel into mLabel	redraw allend handler---------------------- this handler sets the list of actionspublic handler setActions(in pActions as string) as undefined	variable tActions as list	split pActions by newline into tActions	variable tActionElement	variable tListElement		variable tFinalActions as list	variable tStringToList as list	put the empty list into tFinalActions		repeat for each element tActionElement in tActions		put the empty list into tStringToList		split tActionElement by "," into tStringToList				repeat for each element tListElement in tStringToList			push tListElement onto back of tFinalActions		end repeat			end repeat			variable tActionCount as optional integer	variable tCount as optional integer	put the trunc of (the number of elements in tFinalActions)/3 into tActionCount		variable tLabelList as list	variable tIconList as list	variable tCommandList as list	put the empty list into tLabelList	put the empty list into tIconList	put the empty list into tCommandList		repeat with tCount from 1 up to tActionCount		push element (3*tCount)-2 of tFinalActions onto back of tLabelList		push element (3*tCount)-1 of tFinalActions onto back of tIconList		push element 3*tCount of tFinalActions onto back of tCommandList	end repeat		variable tTestLabel as string	combine tLabelList with "," into tTestLabel	put [tLabelList,tIconList,tCommandList] into mActions		redraw allend handler---------------------- this handler sets whether the back button is enabled or notpublic handler setEnableBack(in pEnable as boolean) as undefined	put pEnable into mEnableBack	redraw allend handler---------------------- this handler sets the theme of the widgetpublic handler setTheme(in pTheme as string) as undefined	put pTheme into mTheme	redraw allend handler---------------------- this handler sets the action style of the header barpublic handler setActionStyle(in pStyle as string) as undefined	put pStyle into mActionStyle	redraw allend handler---------------------- this handler converts mActions in a form that can be combined for outputprivate handler getActions() as string		variable tActions as list	put the empty list into tActions		variable tX as integer	variable tActionCount as integer	variable tListLine as list	variable tStringLine as string	variable tActionList as list		put the number of elements in element 1 of mActions into tActionCount	put the empty string into tStringLine	put the empty list into tActionList		repeat with tX from 1 up to tActionCount		put the empty list into tListLine		push element tX of element 1 of mActions onto back of tListLine		push element tX of element 2 of mActions onto back of tListLine		push element tX of element 3 of mActions onto back of tListLine				combine tListLine with "," into tStringLine		push tStringLine onto back of tActionList	end repeat		variable tActionString as string	put the empty string into tActionString	combine tActionList with newline into tActionString			return tActionStringend handler----------						------------ this handler returns a paintprivate handler getPaint(in pString as string) as Paint	if pString is "background" then		return solid paint with color [246/255, 246/255, 247/255]			else if pString is "actions" then		return solid paint with mColorMacBlue			else if pString is "selected action" then		return solid paint with color [51/255, 153/255, 1.0, 0.25]			else if pString is "back button" then		return solid paint with mColorMacBlue			else if pString is "back button selected" then		return solid paint with color [51/255, 153/255, 1.0, 0.25]			end if	end handler-------------- this handler returns the font name private handler getFontName() as string	if mTheme is "ios-8" then		return "Helvetica Neue"	end if		return the name of the font of this canvasend handler---------------------- this handler returns the font sizepublic handler getFontSize() as number	if (my height)/3 > 20 then		return 20	else if (my height)/3 < 8 then		return 8	else		return (my height)/3	end ifend handler---------------------- this handler returns a Pathprivate handler getPath(in pString as string) as Path		if pString is "background" then		return rectangle path of rectangle [0, 0, my width, my height]			else if pString is "line" then 		return rectangle path of rectangle [0,my height,my width,(my height)-1]			end ifend handler---------------------- this handler returns a rectangle in which text is writtenprivate handler getRect(in pString as string) as Rectangle	variable tLabelRect as Rectangle 	put my bounds into tLabelRect		if pString is "label" then		return tLabelRect		else if pString is "back button label" then		add mIconWidth/2 to the right of tLabelRect		return tLabelRect			else if pString is "action icon" then		return rectangle [mRight-1.5*mIconWidth,0,mRight,my height]			else if pString is "action name" then		return rectangle [mRight-mLetterCount*getFontSize()/2,0,mRight,my height]			end ifend handler---------------------- this handler updates the right variablepublic handler updateRight() as undefined	if mActionStyle is "icons" then			if (my height)/2 < 15 then			add -15 to mRight		else if (my height)/2 > 40 then			add -40 to mRight		else			add (-(my height)/2) to mRight		end if		else if mActionStyle is "names" then		put mRight-mLetterCount*getFontSize()/2 into mRight		end ifend handler---------------------- this handler adds an actionpublic handler addAction(in pNewAction as string) as undefined		variable tNewAction as list	split pNewAction by "," into tNewAction		variable tLabelList as list	variable tIconList as list	variable tActionList as list	put element 1 of mActions into tLabelList	put element 2 of mActions into tIconList	put element 3 of mActions into tActionList		push element 1 of tNewAction onto back of tLabelList	push element 2 of tNewAction onto back of tIconList	push element 3 of tNewAction onto back of tActionList		put [tLabelList,tIconList,tActionList] into mActions		redraw allend handler---------------------- this handler removes an actionpublic handler removeAction(in pAction as string) as undefined	variable tActions as string	variable tActionList as list	put getActions() into tActions	split tActions by newline into tActionList	put the empty string into tActions		variable tActionElement	variable tCount as integer	put 1 into tCount		repeat for each element tActionElement in tActionList		if tActionElement contains pAction then			delete element tCount of tActionList		end if		add 1 to tCount	end repeat		combine tActionList	with newline into tActions		setActions(tActions)			redraw allend handler---------------------- this handler returns the number of the action the mouse has clicked onprivate handler getSelectedIcon() as optional integer	variable tClickLoc	execute script "return the clickloc"	put the result into tClickLoc		variable tClickPoint as list	split tClickLoc by "," into tClickPoint		variable tX as number	variable tY as number	put (element 1 of tClickPoint) parsed as number - the left of my rectangle into tX	put (element 2 of tClickPoint) parsed as number - the top of my rectangle into tY	variable tPoint as Point	put point [tX,tY] into tPoint		variable tSelected as optional integer		if mEnableBack is true and tPoint is within rectangle [0, 0, 1.2*mIconWidth+mIconWidth/4, my height] then		put 1 into tSelected	else		put locToAction(tPoint) into tSelected	end if		return tSelectedend handler---------------------- this handler returns the number of the icon which is being clicked	private handler locToAction(in pLoc as Point) as integer	variable tActionCount as integer	put the number of elements in mActions into tActionCount		variable tX as integer	repeat with tX from 1 up to tActionCount		if pLoc is within actionRect(tX) then			return tX+1		end if	end repeat		return 0end handler---------------------- this handler returns the rectangle around the iconprivate handler actionRect(in pItemCount) as Rectangle		variable tRight as real	put my width - (mIconWidth)*(pItemCount-1) into tRight		return rectangle [tRight-mIconWidth,0,tRight-mIconWidth/4,my height]end handler----------end widget