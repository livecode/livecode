/*
Copyright (C) 2018 LiveCode Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/**
This widget is a Google Map view in HTML5.

Name: mapClick
Type: message
Syntax: mapClick <pLocation>

Summary: Sent when the user clicks on a point in the map.

Parameters:
pLocation (string): The map coordinates of the click, as comma-separated latitude, longitude values.

Description:
The <mapClick> message is sent to the widget's script object when the
user clicks on a location in the map. The <pLocation> 
parameter contains the map coordinates of the clicked location.


Name: markerClick
Type: message
Syntax: markerClick <pLocation>

Summary: Sent when the user clicks on a location marker in the map.

Parameters:
pLocation (string): The map coordinates of the marker, as comma-separated latitude, longitude values.

Description:
The <markerClick> message is sent to the widget's script object when the
user clicks on a location marker in the map. The <pLocation> 
parameter contains the map coordinates of the clicked marker.

*/

widget com.livecode.widget.native.emscripten.mapview

use com.livecode.foreign
use com.livecode.emscripten
use com.livecode.widget
use com.livecode.canvas
use com.livecode.engine
use com.livecode.library.widgetutils

metadata version is "1.0.0"
metadata author is "LiveCode"
metadata title is "HTML5 Map View"
metadata svgicon is "M 397,551.25195 a 2.1,2.1 0 0 0 -2.09961,2.09961 v 11.08985 A 2.1,2.1 0 0 0 397,566.54297 h 23.24023 a 2.1,2.1 0 0 0 2.09961,-2.10156 v -11.08985 a 2.1,2.1 0 0 0 -2.09961,-2.09961 z m 7.11328,2.52344 h 9.01367 l -0.81836,9.20703 -3.70117,1.03711 -3.67383,-1.03711 z m 1.67774,1.88281 0.30078,3.41797 h 3.91797 l -0.14063,1.46094 -1.26172,0.33789 -1.2539,-0.33789 -0.084,-0.89649 h -1.12109 l 0.14258,1.7793 2.3164,0.64063 h 0.0274 v -0.008 l 2.29882,-0.63476 0.31836,-3.48242 h -4.12304 l -0.0957,-1.15821 h 4.31446 l 0.10351,-1.11914 Z"

--------------------------------------------------------------------------------

-- property declarations

/**
Syntax:
set the apikey of <widget> to <pKey>
get the apikey of <widget>

Summary: The Google Maps API key for this application.

Value (string): The API key string

Example:
    set the apikey of widget "HTML5 Map" to "a0b1c2d3e4f5"

Description:
The <apikey> property is needed to access the Google Maps API. This should be set before deploying to HTML5.
*/

property apikey get GetAPIKey set SetAPIKey

----------

/**
Syntax:
set the mapCenter of <widget> to <pLocation>
get the mapCenter of <widget>

Summary: The latitude & longitude of the center point of the map display.

Value: A comma-separated pair of numbers, representing degrees latitude & longitude

Example:
    set the mapCenter of widget "HTML5 Map" to 55.9479961,-3.1980256

Description:
The <mapCenter> property is the latitude & longitude of the center of the area displayed by the map.
*/

property mapcenter get GetCenter set SetCenter

----------

/**
Syntax:
set the mapZoom of <widget> to <pZoom>
get the mapZoom of <widget>

Summary: The zoom value of the map display.

Value (number): A zoom value greater than or equal to zero

Example:
    set the mapZoom of widget "HTML5 Map" to 5

Description:
The <mapZoom> property is the extent to which the map display is zoomed.
*/

property mapzoom get GetZoom set SetZoom

----------

/**
Syntax:
set the mapMarkers of <widget> to <pMarkerLocations>
get the mapMarkers of <widget>

Summary: A list of positions at which to place markers on the map.

Value: A return-separated list of marker locations, formatted as a comma-separated pair of numbers representing degrees latitude & longitude

Example:
    set the mapMarkers of widget "HTML5 Map" to "55.9479961,-3.1980256" & return & "55.9520315,-3.1763287"

Description:
The <mapMarkers> property is the set of locations marked on the map.
*/
property mapmarkers get GetMarkers set SetMarkers
metadata mapmarkers.editor is "com.livecode.pi.text"

----------

private variable mOpened as Boolean
private variable mAPIReady as Boolean
private variable mMap as optional JSObject
private variable mMapDiv as optional JSObject
private variable mMarkers as List
private variable mProperties as Array
private variable mScriptObject as ScriptObject

--------------------------------------------------------------------------------

constant kPropertyAPIKey is "apikey"
constant kPropertyCenter is "center"
constant kPropertyZoom is "zoom"
constant kPropertyMarkers is "markers"

constant kDefaultCenter is [55.9479961,-3.1980256] // Edinburgh Castle
constant kDefaultZoom is 8
constant kDefaultAPIKey is ""
constant kDefaultMarkers is []

constant kPersistentProps is ["center", "zoom", "markers"]

--------------------------------------------------------------------------------

public handler OnCreate()
	put the empty array into mProperties
	setDefaultProperties(mProperties)
	put false into mOpened
	put false into mAPIReady
end handler

----------

public handler OnLoad(in pProperties as Array)
	put pProperties into mProperties
	setDefaultProperties(mProperties)
end handler

public handler OnSave(out rProperties as Array)
	put mProperties into rProperties
end handler

----------

private handler IsHTML5() returns Boolean
    return the operating system is "emscripten"
end handler

public handler OnOpen()
	// Keep a reference to this widget's script object so we can post to it from
	//   the callbacks (which don't have a target widget when called).
	put my script object into mScriptObject

    if IsHTML5() then
		if mAPIReady then
			initMapView()
		else
			initAPI()
		end if
    end if
end handler

public handler OnClose()
    if IsHTML5() then
        finalizeMapView()
    end if
end handler

--------------------------------------------------------------------------------

private variable mOnAPIReadyHandler as JSObject

private handler initAPI()
	if mProperties[kPropertyAPIKey] is not empty then
		// Load Google Map API script into browser
		variable tSrc as String
		put "https://maps.googleapis.com/maps/api/js?key=" & mProperties[kPropertyAPIKey] into tSrc
		
		variable tJSBlock as JSObject
		put EvalJavaScript("document.createElement('script');") into tJSBlock
		
		EvalJavaScriptWithArguments("arguments[0].type='text/javascript';", [tJSBlock])
		EvalJavaScriptWithArguments("arguments[0].async=true;", [tJSBlock])
		EvalJavaScriptWithArguments("arguments[0].src=arguments[1];", [tJSBlock, tSrc])

		put HandlerAsJSFunction(onAPIReady) into mOnAPIReadyHandler
		EvalJavaScriptWithArguments("arguments[0].addEventListener('load', arguments[1])", [tJSBlock, mOnAPIReadyHandler])
		
		EvalJavaScriptWithArguments("document.body.appendChild(arguments[0])", [tJSBlock])
	end if
end handler

private handler onAPIReady(in pEvent as JSObject) returns nothing
	put true into mAPIReady
	initMapView()
end handler

private handler initMapView()
	// Create a div to contain the map
	put EvalJavaScript("document.createElement('div')") into mMapDiv
	
	variable tCenter as JSObject
	put googleMapsLatLngFromList(mProperties[kPropertyCenter]) into tCenter
	variable tZoom as Number
	put mProperties[kPropertyZoom] into tZoom
	
	// Create a Google Map contained in the div
	put EvalJavaScriptWithArguments("new google.maps.Map(arguments[0], {center:arguments[1], zoom:arguments[2]})", [mMapDiv, tCenter, tZoom]) into mMap

	set my native layer to PointerFromJSObject(mMapDiv)

	addEventListeners()
	applyProperties(mProperties)
end handler

private handler finalizeMapView()
	if mMarkers is not empty then
		googleMapsRemoveMarkers(mMarkers)
		put the empty list into mMarkers
	end if
	removeEventListeners()
    set my native layer to nothing
    put nothing into mMap
    put nothing into mMapDiv
end handler

--------------------------------------------------------------------------------

private handler parseCoordinates(in pCoordinates as String) returns List
	variable tCoords as List
	put stringToListOfNumber(pCoordinates) into tCoords
	if (the number of elements in tCoords) is not 2 then
		throw "invalid coordinates: expected list of two numbers"
	end if
	return tCoords
end handler

private handler formatCoordinates(in pCoordinates as List) returns String
	return numberListToString(pCoordinates)
end handler

----------

private handler parseMarkers(in pMarkerList as String) returns List
	variable tMarkers as List
	variable tMarkerStrings as List
	split pMarkerList by "\n" into tMarkerStrings
	variable tMarkerString
	repeat for each element tMarkerString in tMarkerStrings
		push parseCoordinates(tMarkerString) onto tMarkers
	end repeat
	
	return tMarkers
end handler

private handler formatMarkers(in pMarkers as List) returns String
	variable tMarkerStrings as List
	variable tMarker
	repeat for each element tMarker in pMarkers
		push formatCoordinates(tMarker) onto tMarkerStrings
	end repeat
	
	variable tCombined
	combine tMarkerStrings with "\n" into tCombined
	return tCombined
end handler

--------------------------------------------------------------------------------

private handler applyProperties(in pProperties as Array)
	variable tKey
	repeat for each element tKey in kPersistentProps
		if tKey is among the keys of pProperties then
			setProperty(tKey, pProperties[tKey])
		end if
	end repeat
end handler

----------

private handler setDefault(inout pProperties as Array, in pKey as String, in pDefaultValue as any)
	if pKey is not among the keys of pProperties then
		put pDefaultValue into pProperties[pKey]
	end if
end handler

private handler setDefaultProperties(inout pProperties as Array)
	setDefault(pProperties, kPropertyCenter, kDefaultCenter)
	setDefault(pProperties, kPropertyZoom, kDefaultZoom)
	setDefault(pProperties, kPropertyAPIKey, kDefaultAPIKey)
	setDefault(pProperties, kPropertyMarkers, kDefaultMarkers)
end handler

private handler getProperty(in pProperty as String) returns any
	if mMap is nothing then
		if pProperty is among the keys of mProperties then
			return mProperties[pProperty]
		else
			throw "can't access property: " & pProperty
		end if
	else
		return mapGetProperty(mMap, pProperty)
	end if
end handler

private handler setProperty(in pProperty as String, in pValue as any)
	put pValue into mProperties[pProperty]
	if mMap is not nothing then
		/* UNCHECKED */ mapSetProperty(mMap, pProperty, pValue)
	end if
end handler

----------

private handler googleMapsLatLngFromList(in pLocation as List) returns JSObject
	return EvalJavaScriptWithArguments("new google.maps.LatLng(arguments[0], arguments[1])", [pLocation[1], pLocation[2]])
end handler

private handler googleMapsLatLngToList(in pLatLng as JSObject) returns List
	variable tList as List
	push EvalJavaScriptWithArguments("arguments[0].lat()", [pLatLng]) onto tList
	push EvalJavaScriptWithArguments("arguments[0].lng()", [pLatLng]) onto tList
	return tList
end handler

private handler googleMapsCreateMarker(in pMap as JSObject, in pPosition as JSObject) returns JSObject
	return EvalJavaScriptWithArguments("new google.maps.Marker({map:arguments[0], position:arguments[1]})", [pMap, pPosition])
end handler

private handler googleMapsRemoveMarker(in pMarker as JSObject) returns nothing
	EvalJavaScriptWithArguments("arguments[0].setMap(null)", [pMarker])
end handler

private handler googleMapsRemoveMarkers(in pMarkers as List) returns nothing
	variable tMarker as JSObject
	repeat for each element tMarker in pMarkers
		googleMapsRemoveMarker(tMarker)
	end repeat
end handler

private handler googleMapsAddMarkersFromPositionList(in pMap as JSObject, in pMarkers as List) returns List
	variable tMarkers as List
	variable tMarker as List
	repeat for each element tMarker in pMarkers
		push googleMapsCreateMarker(pMap, googleMapsLatLngFromList(tMarker)) onto tMarkers
	end repeat
	
	return tMarkers
end handler

----------

private handler mapGetProperty(in pMap as JSObject, in pProperty as String) returns any
	if pProperty is kPropertyCenter then
		return googleMapsLatLngToList(EvalJavaScriptWithArguments("arguments[0].getCenter()", [pMap]))
	end if
	if pProperty is kPropertyZoom then
		return EvalJavaScriptWithArguments("arguments[0].getZoom()", [pMap])
	end if
	
	/* TODO - implement */
	return the empty string
end handler

private handler mapSetProperty(in pMap as JSObject, in pProperty as String, in pValue as any)
	if pProperty is kPropertyCenter then
		EvalJavaScriptWithArguments("arguments[0].setCenter(arguments[1])", [pMap, googleMapsLatLngFromList(pValue)])
	end if
	if pProperty is kPropertyZoom then
		EvalJavaScriptWithArguments("arguments[0].setZoom(arguments[1])", [pMap, pValue])
	end if
	if pProperty is kPropertyMarkers then
		if mMarkers is not empty then
			googleMapsRemoveMarkers(mMarkers)
			put the empty list into mMarkers
			removeMarkerEventListeners(mMarkerEventListeners)
			put the empty list into mMarkerEventListeners
		end if
		put googleMapsAddMarkersFromPositionList(mMap, pValue) into mMarkers
		put addMarkerEventListeners(mMarkers) into mMarkerEventListeners
	end if
	/* TODO - implement */
end handler

----------

private handler SetCenter(in pCenter as String)
	setProperty(kPropertyCenter, parseCoordinates(pCenter))
end handler

private handler GetCenter() returns String
	return formatCoordinates(getProperty(kPropertyCenter))
end handler

private handler SetZoom(in pZoom as Number)
	setProperty(kPropertyZoom, pZoom)
end handler

private handler GetZoom() returns Number
	return getProperty(kPropertyZoom)
end handler

private handler SetMarkers(in pMarkers as String)
	setProperty(kPropertyMarkers, parseMarkers(pMarkers))
end handler

private handler GetMarkers() returns String
	return formatMarkers(getProperty(kPropertyMarkers))
end handler

private handler SetAPIKey(in pAPIKey as String)
	put pAPIKey into mProperties[kPropertyAPIKey]
end handler

private handler GetAPIKey() returns String
	return mProperties[kPropertyAPIKey]
end handler

--------------------------------------------------------------------------------

private handler AddJSEventHandler(in pElement as JSObject, in pEvent as String, in pHandler as JSObject)
	EvalJavaScriptWithArguments("arguments[0].addEventListener(arguments[1], arguments[2]);", [pElement, pEvent, pHandler])
end handler

private handler RemoveJSEventHandler(in pElement as JSObject, in pEvent as String, in pHandler as JSObject)
	EvalJavaScriptWithArguments("arguments[0].removeEventListener(arguments[1], arguments[2]);", [pElement, pEvent, pHandler])
end handler

private handler googleMapsAddListener(in pMVCObject as JSObject, in pEvent as String, in pHandler as JSObject) returns JSObject
	return EvalJavaScriptWithArguments("arguments[0].addListener(arguments[1], arguments[2]);", [pMVCObject, pEvent, pHandler])
end handler

private handler googleMapsRemoveListener(in pListener as JSObject)
	EvalJavaScriptWithArguments("arguments[0].remove()", [pListener])
end handler

----------

variable mMapClickListener as optional JSObject
variable mMarkerEventListeners as List

private handler addEventListeners()
	put googleMapsAddListener(mMap, "click", HandlerAsJSFunction(OnMapClick)) into mMapClickListener
	
	// marker events set when adding markers
	// put addMarkerEventListeners(mMarkers) into mMarkerClickListeners
end handler

private handler removeEventListeners()
	if mMapClickListener is not nothing then
		googleMapsRemoveListener(mMapClickListener)
	end if
	put nothing into mMapClickListener
	removeMarkerEventListeners(mMarkerEventListeners)
	put the empty list into mMarkerEventListeners
end handler

private handler addMarkerEventListeners(in pMarkers as List)
	variable tHandler as JSObject
	put HandlerAsJSFunction(OnMarkerClick) into tHandler
	variable tListeners as List
	variable tMarker as JSObject
	repeat for each element tMarker in pMarkers
		push googleMapsAddListener(tMarker, "click", tHandler) onto tListeners
	end repeat
	
	return tListeners
end handler

private handler removeMarkerEventListeners(in pListeners as List)
	variable tListener as JSObject
	repeat for each element tListener in pListeners
		googleMapsRemoveListener(tListener)
	end repeat
end handler

--------------------------------------------------------------------------------

private handler __postMouseEvent(in pType as String, in pEvent as JSObject)
	variable tArgs as List
	
	variable tLatLng as JSObject
	put EvalJavaScriptWithArguments("arguments[0].latLng", [pEvent]) into tLatLng
	
	variable tCoordinates as List
	put googleMapsLatLngToList(tLatLng) into tCoordinates

	push formatCoordinates(tCoordinates) onto tArgs
	
	post pType to mScriptObject with tArgs
end handler

private handler OnMapClick(in pEvent as JSObject) returns nothing
	__postMouseEvent("mapclick", pEvent)
end handler

private handler OnMarkerClick(in pEvent as JSObject) returns nothing
	__postMouseEvent("markerclick", pEvent)
end handler

--------------------------------------------------------------------------------

constant kSvgIcon is "M21.7,12c0,5.4-4.4,9.7-9.7,9.7S2.3,17.4,2.3,12S6.6,2.3,12,2.3S21.7,6.6,21.7,12z M11.9,16.6c0-0.2-0.1-0.3-0.3-0.4  C11,16,10.4,16,9.9,15.5c-0.1-0.2-0.1-0.4-0.2-0.6c-0.2-0.2-0.7-0.3-1-0.4c-0.4,0-0.8,0-1.3,0c-0.2,0-0.5,0-0.7,0  c-0.3-0.1-0.5-0.5-0.7-0.8C6,13.6,6,13.4,5.8,13.4c-0.2-0.1-0.4,0.1-0.6,0c-0.1-0.1-0.1-0.2-0.1-0.3c0-0.3,0.2-0.6,0.4-0.8  c0.3-0.2,0.6,0.1,0.9,0.1c0.1,0,0.1,0,0.2,0.1C6.9,12.6,7,13,7,13.3c0,0.1,0,0.2,0,0.2c0,0.1,0.1,0.1,0.2,0.1c0.1-0.5,0.1-1,0.2-1.5  c0-0.6,0.6-1.2,1.1-1.4c0.2-0.1,0.3,0.1,0.5,0c0.6-0.2,2.1-0.8,1.8-1.6C10.6,8.4,10,7.7,9.2,7.8C9,7.9,8.9,8,8.7,8.1  C8.4,8.3,7.8,8.9,7.5,8.9C7,8.8,7,8.1,7.1,7.8c0.1-0.4,1-1.7,1.6-1.5C8.8,6.4,9,6.6,9.1,6.7c0.2,0.1,0.5,0.1,0.8,0.1  c0.1,0,0.2,0,0.3-0.1c0.1-0.1,0.1-0.1,0.1-0.2c0-0.3-0.3-0.6-0.5-0.8C9.6,5.5,9.3,5.3,9,5.2C8,4.9,6.4,5.3,5.6,6  C4.8,6.7,4.2,7.9,3.8,8.9C3.6,9.5,3.4,10.3,3.3,11c-0.1,0.5-0.2,0.9,0.1,1.4C3.7,13,4.3,13.6,4.9,14c0.4,0.3,1.2,0.3,1.6,0.8  c0.3,0.4,0.2,0.9,0.2,1.4c0,0.6,0.4,1.1,0.6,1.6c0.1,0.3,0.2,0.7,0.3,1c0,0.1,0.1,0.7,0.1,0.8c0.6,0.3,1.1,0.6,1.8,0.8  c0.1,0,0.5-0.6,0.5-0.7c0.3-0.3,0.5-0.7,0.8-0.9c0.2-0.1,0.4-0.2,0.6-0.4c0.2-0.2,0.3-0.6,0.4-0.9C11.9,17.3,12,16.9,11.9,16.6z   M12.1,7.4c0.1,0,0.2-0.1,0.4-0.2c0.3-0.2,0.6-0.5,0.9-0.7c0.3-0.2,0.6-0.5,0.8-0.7c0.3-0.2,0.5-0.6,0.6-0.9  c0.1-0.2,0.4-0.6,0.3-0.9c-0.1-0.2-0.6-0.3-0.8-0.4c-0.8-0.2-1.5-0.3-2.3-0.3c-0.3,0-0.7,0.1-0.8,0.4c-0.1,0.5,0.3,0.4,0.7,0.5  c0,0,0.1,0.8,0.1,0.9c0.1,0.5-0.2,0.8-0.2,1.3c0,0.3,0,0.8,0.2,1C12,7.4,12.1,7.4,12.1,7.4z M20.5,14.4c0.1-0.2,0.1-0.5,0.2-0.7  c0.1-0.5,0.1-1,0.1-1.5c0-1-0.1-2-0.4-2.9C20.2,9,20.1,8.7,20,8.4c-0.2-0.5-0.5-1-0.9-1.4c-0.4-0.5-0.9-1.9-1.8-1.5  c-0.3,0.1-0.5,0.5-0.7,0.7c-0.2,0.3-0.4,0.6-0.6,0.9c-0.1,0.1-0.2,0.3-0.1,0.4c0,0.1,0.1,0.1,0.2,0.1c0.2,0.1,0.3,0.1,0.5,0.2  c0.1,0,0.2,0.1,0.1,0.2c0,0,0,0.1-0.1,0.1c-0.5,0.5-1,0.9-1.5,1.4c-0.1,0.1-0.2,0.3-0.2,0.4c0,0.1,0.1,0.1,0.1,0.2  c0,0.1-0.1,0.1-0.2,0.2c-0.2,0.1-0.4,0.2-0.5,0.3c-0.1,0.2,0,0.5-0.1,0.7c-0.1,0.5-0.4,0.9-0.6,1.4c-0.2,0.3-0.3,0.6-0.5,0.9  c0,0.4-0.1,0.7,0.1,1c0.5,0.7,1.4,0.3,2.1,0.6c0.2,0.1,0.4,0.1,0.5,0.3c0.3,0.3,0.3,0.8,0.4,1.1c0.1,0.4,0.2,0.8,0.4,1.2  c0.1,0.5,0.3,1,0.4,1.4c0.9-0.7,1.7-1.5,2.3-2.5C19.9,16,20.2,15.2,20.5,14.4z"
public handler OnPaint() returns nothing
	paintPlaceholderImage(this canvas, my bounds, kSvgIcon, my name, nothing, nothing)
end handler

--------------------------------------------------------------------------------

end widget
