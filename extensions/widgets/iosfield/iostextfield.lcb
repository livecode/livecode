/*
Copyright (C) 2017 LiveCode Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/**
Name: iOS Native Field

Description:
This widget is a native text field on iOS.

Name: enabled

Syntax:
set the enabled of <widget> to {true | false}
get the enabled of <widget>

Description:
Use the <enabled> property to enable or disable the native field. When disabled,
the field has a greyed out appearance.

Name: openField

Summary: Sent to an unlocked field when you click or select text in that field.

Syntax: openField

Example:
on openField -- when clicking in the field, select all its text
  local tText
  put the text of the target into tText
  set the selectedRange of the target to "1," & \
     the number of chars in tText
end openField

Description:
Handle the <openField> message if you want to do something when the user enters
a field widget. The message is not sent if the field is locked.

Name: closeField

Summary:
Sent to a field when the focus is being removed from that field and the field's
content has changed.

Syntax: closeField

Example:
on closeField -- make sure the user has entered a valid date
  local tText
  put the text of me into tText
  if tText is not a date then
    beep
    answer "Please enter a date."
    set the selectedRange of the target to "1," & \
       the number of chars in tText
  end if
end closeField

Description:
Handle the <closeField> message if you want to make sure a field's content is
correct after it has been changed.

Name: exitField

Summary:
Sent to the field with the selection when the selection is being removed from
the field, and its contents have not changed.

Syntax: exitField

Example:
on exitField -- remove visual signs that the field is being edited
   set the enabled of the target to false
end exitField

Description:
Handle the <exitField> message if you want to do something when the user leaves
a field that hasn't been changed.

Name: textChanged

Summary:
Sent when the native field widget text is changed.

Example:
on textChanged
   if the text of me is not a number then
      beep
   end if
end textChanged

Description:
Handle the <textChanged> message if you want to do something when the text of
the field is changed through typing.
*/
widget com.livecode.widget.native.ios.field

use com.livecode.foreign
use com.livecode.objc
use com.livecode.widget
use com.livecode.canvas
use com.livecode.engine
use com.livecode.library.widgetutils

metadata version is "1.0.0"
metadata author is "LiveCode"
metadata title is "iOS Native Field"
metadata svgicon is "M 535.66797 241.55273 C 491.1077 241.55273 455.23438 277.42605 455.23438 321.98633 L 455.23438 913.65039 C 455.23438 958.21066 491.1077 994.08398 535.66797 994.08398 L 2014.5762 994.08398 C 2059.1364 994.08398 2095.0098 958.21066 2095.0098 913.65039 L 2095.0098 321.98633 C 2095.0098 277.42605 2059.1364 241.55273 2014.5762 241.55273 L 535.66797 241.55273 z M 1155.1543 304.32422 C 1293.7311 304.30837 1399.8223 413.6262 1399.8223 613.28906 C 1399.8223 831.92443 1278.4507 931.3125 1145.5957 931.3125 C 1009.8798 931.3125 899.97656 823.80972 899.97656 622.33203 C 899.97656 415.4574 1013.7086 304.32422 1155.1543 304.32422 z M 1637.668 305.20508 C 1689.1647 305.20508 1728.013 319.66027 1746.082 332.30859 L 1738.9023 347.9043 C 1723.5436 337.0708 1682.0317 323.26562 1636.875 323.26562 C 1535.6646 323.26562 1491.5781 399.7417 1491.5781 456.04102 C 1491.5781 533.80129 1551.8559 559.80417 1629.5527 596.8457 C 1719.89 641.10692 1767.7656 680.13793 1767.7656 765.07031 C 1767.7656 856.31896 1702.7239 930.38477 1587.082 930.38477 C 1539.1912 930.38477 1484.0899 914.13108 1456.9863 893.34375 L 1465.0605 875.2832 C 1494.8824 895.15914 1546.3559 914.35352 1590.625 914.35352 C 1674.646 914.35352 1749.3711 855.57405 1749.3711 769.05664 C 1749.3711 688.7683 1699.5944 646.87616 1615.082 610.88867 C 1539.4457 578.68139 1471.4414 543.72442 1471.4414 457.89648 C 1471.4414 368.46267 1541.9021 305.20508 1637.668 305.20508 z M 1156.1758 325.58008 C 999.78351 325.58008 917.99023 456.01743 917.99023 617.80664 C 917.99023 783.58214 998.33285 912.36328 1146.4355 912.36328 C 1295.5685 912.36328 1381.1035 779.61907 1381.1035 615.91992 C 1381.1035 464.11624 1312.5681 325.58008 1156.1758 325.58008 z M 799.93164 336.48438 C 810.31342 336.48438 816.91406 344.97176 816.91406 355.35352 C 816.91406 366.19495 810.31315 374.21484 798.98828 374.21484 C 789.55751 374.21484 782.48047 366.19495 782.48047 355.35352 C 782.48047 344.97176 790.02537 336.48438 799.93164 336.48438 z M 790.80859 488.61328 L 808.58398 488.61328 L 808.58398 922.26953 L 790.80859 922.26953 L 790.80859 488.61328 z"

constant kSvgIcon is "M4.621 6.965c0 1.368-.833 2.38-2.262 2.38-1.19 0-2.083-1.012-2.083-2.38 0-1.31.952-2.381 2.202-2.381 1.31 0 2.143 1.071 2.143 2.381zM1.327 78.5V23.78H3.57V78.5H1.327zM78.174 39.512c0 27.588-15.315 40.129-32.079 40.129-17.125 0-30.993-13.565-30.993-38.988C15.102 14.549 29.453.526 47.301.526 64.787.524 78.174 14.318 78.174 39.512zm-60.799.57C17.375 61 27.513 77.25 46.201 77.25c18.818 0 29.611-16.75 29.611-37.406 0-19.155-8.648-36.636-28.382-36.636S17.375 19.667 17.375 40.082zM86.406 72.571c3.763 2.508 10.258 4.93 15.844 4.93 10.602 0 20.031-7.417 20.031-18.334 0-10.131-6.281-15.417-16.945-19.958-9.544-4.064-18.125-8.475-18.125-19.305 0-11.285 8.891-19.267 20.975-19.267 6.498 0 11.4 1.824 13.68 3.42l-.906 1.968c-1.938-1.367-7.176-3.109-12.874-3.109-12.771 0-18.334 9.65-18.334 16.754 0 9.812 7.606 13.093 17.41 17.767 11.399 5.585 17.44 10.51 17.44 21.227 0 11.514-8.207 20.86-22.799 20.86-6.043 0-12.996-2.051-16.416-4.674l1.019-2.279z"

// Properties
/**
Syntax:
set the text of <widget> to <pText>
get the text of <widget>

Summary: The text contained in the field widget.

Value (string): A string.

Example:
set the text of widget "Android Field" to "Some text"

Description:
Use the <text> property to change the text of the field widget.
*/
property "text" get GetText set SetText
metadata text.section is "Contents"
metadata text.user_visible is "true"
metadata text.default is ""

/**
Syntax:
set the fieldTextColor of <widget> to <pColor>
get the fieldTextColor of <widget>

Summary: The color of the text of the field widget.

Value (string):
A comma delimited string representing a color in RGB / RGBA format

Example:
set the fieldTextColor of widget "Android Field" to "255,0,0,128"

Description:
Use the <fieldTextColor> property to change the color of the text of the field
widget.
*/
property fieldTextColor get mTextColor set SetTextColor
metadata fieldTextColor.editor is "com.livecode.pi.colorwithalpha"
metadata fieldTextColor.label is "Text color"
metadata fieldTextColor.default is "0,0,0,255"
metadata fieldTextColor.section is "Colors"

/**
Syntax:
set the textAlign of <widget> to <pAlign>
get the textAlign of <widget>

Summary: The horizontal text alignment of the field widget.

Value (enum):
- "left": Left-aligned text
- "center": Center-aligned text
- "right": Right-aligned text

Example:
set the textAlign of widget "Android Field" to "center"

Description:
Use the <textAlign> property to change the horizontal text alignment of the
field widget.
*/
property "textAlign" get mTextAlign set SetTextAlign
metadata textAlign.default is "left"

/**
Syntax:
set the opaque of <widget> to {true | false}
get the opaque of <widget>

Summary: The opacity of the field widget.

Example:
set the opaque of widget "iOS Field" to false

Description:
Use the <opaque> property to change the opacity of the field widget.
*/
property opaque get mOpaque set SetOpaque
metadata opaque.editor is "com.livecode.pi.boolean"
metadata opaque.section is "Basic"
metadata opaque.label is "Opaque"
metadata opaque.default is "true"

/**
Syntax:
set the autoCapitalizationType of <widget> to <pType>
get the autoCapitalizationType of <widget>

Summary: The auto-capitalization behavior of the field widget.

Value (enum):
- "none": the shift-key is never automatically enabled
- "words": the shift-key is enabled at the start of words
- "sentences": the shift-key is enabled at the start of sentences
- "all characters": the shift-key is enabled at the start of each character

Example:
set the autoCapitalizationType of widget "Android Field" to "sentences"

Description:
Use the <autoCapitalizationType> property to determine when the shift-key is
automatically enabled when typing.
*/
property autoCapitalizationType get mAutoCapitalizationType set SetAutoCapitalizationType
metadata autoCapitalizationType.editor is "com.livecode.pi.enum"
metadata autoCapitalizationType.options is "none,words,sentences,all characters"
metadata autoCapitalizationType.default is "none"
metadata autoCapitalizationType.label is "Auto capitalization type"

/**
Syntax:
set the autoCorrectionType of <widget> to <pType>
get the autoCorrectionType of <widget>

Summary: The auto-correction behavior of the field widget.

Value (enum):
- "default": use the appropriate auto-correct behavior for the current script system
- "no": disable auto-correct behavior
- "yes": enable auto-correct behavior

Example:
set the autoCorrectionType of widget "iOS Field" to "no"

Description:
Use the <autoCorrectionType> property to determine whether auto-correct behavior
should be enabled.
*/
property autoCorrectionType get mAutoCorrectionType set SetAutoCorrectionType
metadata autoCorrectionType.editor is "com.livecode.pi.enum"
metadata autoCorrectionType.options is "default,no,yes"
metadata autoCorrectionType.default is "default"
metadata autoCorrectionType.label is "Auto correction type"

/**
Syntax:
set the keyboardType of <widget> to <pType>
get the keyboardType of <widget>

Summary: The type of keyboard associated to the field widget.

Value (enum):
- "default": the default keyboard
- "alphabet": the alphabetic keyboard
- "numeric": the numeric keyboard with punctuation
- "URL": the URL entry keyboard
- "number": the number pad keyboard
- "phone": the phone number pad keyboard
- "contact": the phone contact pad keyboard
- "email": the email keyboard
- "decimal": the decimal numeric pad keyboard

Example:
set the keyboardType of widget "iOS Field" to "URL"

Description:
Use the <keyboardType> property to determine what kind of keyboard should be
displayed when this field widget is focused.
*/
property keyboardType get mKeyboardType set SetKeyboardType
metadata keyboardType.editor is "com.livecode.pi.enum"
metadata keyboardType.options is "default,alphabet,numeric,URL,number,phone,contact,email,decimal"
metadata keyboardType.label is "Keyboard type"

/**
Syntax:
set the keyboardStyle of <widget> to <pType>
get the keyboardStyle of <widget>

Summary: The appearance of keyboard associated to the field widget.

Value (enum):
- "light": the default (light) keyboard appearance
- "dark": a dark (alert) keyboard appearance

Example:
set the keyboardStyle of widget "iOS Field" to "dark"

Description:
Use the <keyboardStyle> property to control the appearance of the keyboard
displayed when this field widget is focused.
*/
property keyboardStyle get mKeyboardStyle set SetKeyboardStyle
metadata keyboardStyle.editor is "com.livecode.pi.enum"
metadata keyboardStyle.options is "light,dark"
metadata keyboardStyle.label is "Keyboard style"

/**
Syntax:
set the returnKeyType of <widget> to <pType>
get the returnKeyType of <widget>

Summary: The type of action assigned to the return key on the keyboard
associated with this field widget.

Value (enum):
- "default": the normal return key action
- "go": take the user to the target of the text they typed
- "google":
- "join":
- "next": move to the next field that will accept text
- "route":
- "search": take the user to the results of searching for the text they have typed
- "send": deliver the text to its target
- "yahoo":
- "done": close IME
- "emergency call":

Example:
set the returnKeyType of widget "iOS Field" to "next"

Description:
Use the <returnKeyType> property to determine what kind of action should be
performed when the return key on the keyboard associated with this field widget
is pressed.
*/
property returnKeyType get mReturnKeyType set SetReturnKeyType
metadata returnKeyType.editor is "com.livecode.pi.enum"
metadata returnKeyType.options is "default,go,google,join,next,route,search,send,yahoo,done,emergency call"
metadata returnKeyType.default is "default"
metadata returnKeyType.label is "Return key type"

/**
Syntax:
set the contentType of <widget> to <pType>
get the contentType of <widget>

Summary: What kind of content the field contains.

Value (enum):
- "plain": plain, unstyled text
- "password": plain text displayed in the standard password style

Example:
set the contentType of widget "iOS Field" to "password"

Description:
Use the <contentType> property to determine what kind of content the control
contains.
*/
property contentType get mContentType set SetContentType
metadata contentType.editor is "com.livecode.pi.enum"
metadata contentType.options is "plain,password"
metadata contentType.default is "plain"
metadata contentType.label is "Content type"

/**
Syntax:
set the borderStyle of <widget> to <pType>
get the borderStyle of <widget>

Summary: The native field border style

Value (enum):
"none": no border around the control
"line": a thin line around the control
"bezel": draw a bezel-style border around the control
"rounded": draw a rounded rectangle style border around the control

Example:
set the borderStyle of widget "iOS Field" to "rounded"

Description:
Use the <borderStyle> property to determine what kind of border is drawn around
the field control.
*/
property borderStyle get mBorderStyle set SetBorderStyle
metadata borderStyle.editor is "com.livecode.pi.enum"
metadata borderStyle.options is "none,line,bezel,rounded"
metadata borderStyle.default is "line"
metadata borderStyle.label is "Border style"

/**
Syntax:
set the clearButtonMode of <widget> to <pType>
get the clearButtonMode of <widget>

Summary: The display mode of the standard 'clear' button overlay

Value (enum):
"never": never display the clear button
"while editing": only display the clear button while editing
"unless editing": only display the clear button when not editing
"always": always display the clear button


Example:
set the clearButtonMode of widget "iOS Field" to "always"

Description:
Use the <clearButtonMode> property to control the display of the native field's
'clear' button overlay.
*/
property clearButtonMode get mClearButtonMode set SetClearButtonMode
metadata clearButtonMode.editor is "com.livecode.pi.enum"
metadata clearButtonMode.options is "never,while editing,unless editing,always"
metadata clearButtonMode.default is "never"
metadata clearButtonMode.label is "Clear button mode"

/**
Syntax:
set the minimumFontSize of <widget> to <pValue>
get the minimumFontSize of <widget>

Summary: The minimum font size of the field control

Value (integer): The minimum font size

Example:
set the minimumFontSize of widget "iOS Field" to 14

Description:
Use the <minimumFontSize> property to control the size of the smallest
permissible font with which to draw the text field’s text.
*/
property minimumFontSize get mMinimumFontSize set SetMinimumFontSize
metadata minimumFontSize.editor is "com.livecode.pi.integer"
metadata minimumFontSize.min is "0"
metadata minimumFontSize.label is "Minimum font size"

/**
Syntax:
set the autoFit of <widget> to { true | false }
get the autoFit of <widget>

Summary:

Example:
set the autoFit of widget "iOS Field" to true

Description:
Use the <autoFit> property to
*/
property autoFit get mAutoFit set SetAutoFit
metadata autoFit.editor is "com.livecode.pi.boolean"
metadata autoFit.default is "false"
metadata autoFit.label is "Auto fit"

// Non-persistent

/**
Syntax:
set the focused of <widget> to {true | false}
get the focused of <widget>

Summary: Whether the field is focused or not.

Description:
Use the <focused> property to request focus for the native field, or remove it.
*/
property focused get mIsFocused set SetFocused
metadata focused.user_visible is "false"

private variable mFieldView as optional ObjcObject
private variable mFieldProxies as Array
private variable mMaxLength as Integer
private variable mText as String
private variable mTextColor as String
private variable mTextAlign as String
private variable mAutoCapitalizationType as String
private variable mAutoCorrectionType as String
private variable mOpaque as Boolean
private variable mKeyboardType as String
private variable mKeyboardStyle as String
private variable mReturnKeyType as String
private variable mContentType as String
private variable mClearButtonMode as String
private variable mBorderStyle as String

private variable mManageReturnKey as Boolean
private variable mAutoFit as Boolean
private variable mAutoClear as Boolean

private variable mMinimumFontSize as Integer

private variable mIsFocused as Boolean

constant kAutoCapitalizationTypes is { \
   "none":0, \
   "words": 1, \
   "sentences": 2, \
   "all characters": 3 \
}

constant kHorizontalAlignments is { \
   "left": 0, \
   "center": 1, \
   "right": 2, \
   "justified": 3, \
   "natural": 4 \
}

constant kAutoCorrectTypes is { \
   "default": 0, \
   "no": 1, \
   "yes": 2 \
}

constant kKeyboardTypes is { \
   "default": 0, \
   "ascii capable": 1, \
   "alphabet": 1, \
   "numeric": 2, \
   "URL": 3, \
   "number": 4, \
   "phone": 5, \
   "name or phone": 6, \
   "email": 7, \
   "decimal": 8, \
   "twitter": 9 \
}

constant kKeyboardStyles is { \
   "default": 0, \
   "light": 0, \
   "alert": 1, \
   "dark": 1 \
}

constant kReturnKeyTypes is { \
   "default": 0, \
   "go": 1, \
   "google": 2, \
   "join": 3, \
   "next": 4, \
   "route": 5, \
   "search": 6, \
   "send": 7, \
   "yahoo": 8, \
   "done": 9, \
   "emergency call": 10 \
}

constant kContentTypes is { \
   "plain": false, \
   "password": true \
}

constant kBorderStyles is { \
   "none": 0, \
   "line": 1, \
   "bezel": 2, \
   "rounded": 3 \
}

constant kClearButtonModes is { \
"never": 0, \
"while editing": 1, \
"unless editing": 2, \
"always": 3 \
}

private handler IsIOS() returns Boolean
    return the operating system is "ios"
end handler

/**/

constant kDefaultTextColor is "0,0,0,255"
constant kDefaultTextAlign is "left"
constant kDefaultOpaque is true
constant kDefaultAutoCapitalizationType is "none"
constant kDefaultAutoCorrectionType is "default"
constant kDefaultKeyboardType is "default"
constant kDefaultKeyboardStyle is "light"
constant kDefaultReturnKeyType is "default"
constant kDefaultContentType is "plain"
constant kDefaultBorderStyle is "line"
constant kDefaultClearButtonMode is "never"
constant kDefaultMinimumFontSize is 0
constant kDefaultAutoFit is false
constant kDefaultAutoClear is false
constant kDefaultManageReturnKey is false

public handler OnCreate()
   put kDefaultTextColor into mTextColor
   put kDefaultTextAlign into mTextAlign
   put kDefaultOpaque into mOpaque
   put kDefaultAutoCapitalizationType into mAutoCapitalizationType
   put kDefaultAutoCorrectionType into mAutoCorrectionType
   put kDefaultKeyboardType into mKeyboardType
   put kDefaultKeyboardStyle into mKeyboardStyle
   put kDefaultReturnKeyType into mReturnKeyType
   put kDefaultContentType into mContentType
   put kDefaultBorderStyle into mBorderStyle
   put kDefaultClearButtonMode into mClearButtonMode
   put kDefaultMinimumFontSize into mMinimumFontSize
   put kDefaultAutoFit into mAutoFit
   put kDefaultAutoClear into mAutoClear
   put kDefaultManageReturnKey into mManageReturnKey
   put "" into mText
   put 0 into mMaxLength
end handler

public handler OnDestroy()
	put nothing into mFieldView
end handler

/**/

public handler OnOpen()
    if IsIOS() then
        unsafe
            CreateFieldView()
        end unsafe
    end if
end handler

public handler OnClose()
   FinalizeView()
end handler

public handler SetProperties()
   SetTextColor(mTextColor)
   SetTextAlign(mTextAlign)
   SetOpaque(mOpaque)
   SetAutoCapitalizationType(mAutoCapitalizationType)
   SetAutoCorrectionType(mAutoCorrectionType)
   SetKeyboardType(mKeyboardType)
   SetKeyboardStyle(mKeyboardStyle)
   SetReturnKeyType(mReturnKeyType)
   SetContentType(mContentType)
   SetBorderStyle(mBorderStyle)
   SetClearButtonMode(mClearButtonMode)
   SetMinimumFontSize(mMinimumFontSize)
   SetAutoFit(mAutoFit)
   SetAutoClear(mAutoClear)
   SetText(mText)
end handler

/**/

public handler OnPaint()
	if IsIOS() then
		return
	end if

    paintPlaceholderImage(this canvas, my bounds, placeholderIcon("ios"), \
        my name, my font, nothing)
end handler

/**/

public handler OnSave(out rProperties as Array)
   put mTextColor into rProperties["TextColor"]
   put mTextAlign into rProperties["TextAlign"]
   put mOpaque into rProperties["Opaque"]
   put mAutoCapitalizationType into rProperties["AutoCapitalizationType"]
   put mAutoCorrectionType into rProperties["AutoCorrectionType"]
   put mKeyboardType into rProperties["KeyboardType"]
   put mKeyboardStyle into rProperties["KeyboardStyle"]
   put mReturnKeyType into rProperties["ReturnKeyType"]
   put mContentType into rProperties["ContentType"]
   put mBorderStyle into rProperties["BorderStyle"]
   put mClearButtonMode into rProperties["ClearButtonMode"]
   put mMinimumFontSize into rProperties["MinimumFontSize"]
   put mAutoFit into rProperties["AutoFit"]
   put mAutoClear into rProperties["AutoClear"]
end handler

public handler OnLoad(in pProperties as Array)
   put pProperties["TextColor"] into mTextColor
   put pProperties["TextAlign"] into mTextAlign
   put pProperties["Opaque"] into mOpaque
   put pProperties["AutoCapitalizationType"] into mAutoCapitalizationType
   put pProperties["AutoCorrectionType"] into mAutoCorrectionType
   put pProperties["KeyboardType"] into mKeyboardType
   put pProperties["KeyboardStyle"] into mKeyboardStyle
   put pProperties["ReturnKeyType"] into mReturnKeyType
   put pProperties["ContentType"] into mContentType
   put pProperties["BorderStyle"] into mBorderStyle
   put pProperties["ClearButtonMode"] into mClearButtonMode
   put pProperties["MinimumFontSize"] into mMinimumFontSize
   put pProperties["AutoFit"] into mAutoFit
   put pProperties["AutoClear"] into mAutoClear
end handler

/**/

public handler OnParentPropertyChanged()
    unsafe
        UpdateFieldView()
    end unsafe
end handler

/**/
private type NSUInteger is CULong
private foreign handler UITextField_text(in pObj as ObjcId) returns ObjcId \
	binds to "objc:UITextField.-text?ui"
private foreign handler UITextField_setText(in pObj as ObjcId, in pString as ObjcId) returns nothing \
   binds to "objc:UITextField.-setText:?ui"
private foreign handler UITextField_setOpaque(in pObj as ObjcId, in pValue as CBool) returns nothing \
   binds to "objc:UITextField.-setOpaque:?ui"
private foreign handler UIColor_colorWithRed(in pR as CDouble, in pG as CDouble, in pB as CDouble, in pA as CDouble) returns ObjcId \
   binds to "objc:UIColor.+colorWithRed:green:blue:alpha:"
private foreign handler UITextField_setTextColor(in pObj as ObjcId, in pColor as ObjcId) returns nothing \
   binds to "objc:UITextField.-setTextColor:?ui"

private foreign handler UITextField_setTextAlign(in pObj as ObjcId, in pValue as NSUInteger) returns nothing \
   binds to "objc:UITextField.-setTextAlignment:?ui"
private foreign handler UITextField_setAutocapitalizationType(in pObj as ObjcId, in pValue as NSUInteger) returns nothing \
   binds to "objc:UITextInputTraits.-setAutocapitalizationType:?ui"
private foreign handler UITextField_setAutocorrectionType(in pObj as ObjcId, in pValue as NSUInteger) returns nothing \
   binds to "objc:UITextInputTraits.-setAutocorrectionType:?ui"
private foreign handler UITextField_setKeyboardType(in pObj as ObjcId, in pValue as NSUInteger) returns nothing \
   binds to "objc:UITextInputTraits.-setKeyboardType:?ui"
private foreign handler UITextField_setKeyboardStyle(in pObj as ObjcId, in pValue as NSUInteger) returns nothing \
   binds to "objc:UITextInputTraits.-setKeyboardAppearance:?ui"
private foreign handler UITextField_setReturnKey(in pObj as ObjcId, in pValue as NSUInteger) returns nothing \
   binds to "objc:UITextInputTraits.-setReturnKeyType:?ui"
private foreign handler UITextField_setClearButtonMode(in pObj as ObjcId, in pValue as NSUInteger) returns nothing \
   binds to "objc:UITextField.-setClearButtonMode:?ui"
private foreign handler UITextField_setBorderStyle(in pObj as ObjcId, in pValue as NSUInteger) returns nothing \
   binds to "objc:UITextField.-setBorderStyle:?ui"

private foreign handler UITextField_setSecureTextEntry(in pObj as ObjcId, in pValue as CBool) returns nothing \
   binds to "objc:UITextInputTraits.-setSecureTextEntry:?ui"
private foreign handler UITextField_setManageReturnKey(in pObj as ObjcId, in pValue as CBool) returns nothing \
   binds to "objc:UITextField.-setManageReturnKey:?ui"
private foreign handler UITextField_setAutoFit(in pObj as ObjcId, in pValue as CBool) returns nothing \
   binds to "objc:UITextField.-setAdjustsFontSizeToFitWidth:?ui"
private foreign handler UITextField_setAutoClear(in pObj as ObjcId, in pValue as CBool) returns nothing \
   binds to "objc:UITextField.-setClearsOnBeginEditing:?ui"

private foreign handler UITextField_setMinimumFontSize(in pObj as ObjcId, in pValue as NSUInteger) returns nothing \
   binds to "objc:UITextField.-setMinimumFontSize:?ui"

private foreign handler UITextView_becomeFirstResponder(in pObj as ObjcId) returns nothing \
   binds to "objc:UITextField.-becomeFirstResponder?ui"
private foreign handler UITextView_resignFirstResponder(in pObj as ObjcId) returns nothing \
   binds to "objc:UITextField.-resignFirstResponder?ui"

public handler SetText(in pText as String)
   if mMaxLength is not 0 and  \
         the number of chars in pText > mMaxLength then
      put char 1 to mMaxLength of pText into pText
   end if
   put pText into mText
   if mFieldView is nothing then
      return
   end if
   unsafe
      UITextField_setText(mFieldView, StringToNSString(pText))
   end unsafe
end handler

public handler GetText() returns String
   if mFieldView is not nothing then
      unsafe
         put UITextField_text(mFieldView) into mText
      end unsafe
   end if
   return mText
end handler

public handler SetOpaque(in pValue as Boolean)
   put pValue into mOpaque
   if mFieldView is nothing then
      return
   end if
   unsafe
      UITextField_setOpaque(mFieldView, pValue)
   end unsafe
end handler

private unsafe handler IosColorFromString(in pColor as String) returns ObjcId
   variable tColor as Color
   put stringToColor(pColor) into tColor

   return UIColor_colorWithRed(\
      the red of tColor, \
      the green of tColor, \
      the blue of tColor, \
      the alpha of tColor)
end handler

public handler SetTextColor(in pValue as String)
   put pValue into mTextColor
   if mFieldView is nothing then
      return
   end if
   unsafe
      UITextField_setTextColor(mFieldView, IosColorFromString(pValue))
   end unsafe
end handler

public handler SetTextAlign(in pAlign as String)
   if not pAlign is among the keys of kHorizontalAlignments then
      throw "invalid alignment" && pAlign
   end if

   put pAlign into mTextAlign
   if mFieldView is nothing then
      return
   end if
   unsafe
      UITextField_setTextAlign(mFieldView, kHorizontalAlignments[pAlign])
   end unsafe
end handler

public handler SetAutoCapitalizationType(in pType as String)
   if not pType is among the keys of kAutoCapitalizationTypes then
      throw "invalid auto capitalization type" && pType
   end if

   put pType into mAutoCapitalizationType
   if mFieldView is nothing then
      return
   end if
   unsafe
      UITextField_setAutocapitalizationType(mFieldView, kAutoCapitalizationTypes[pType])
   end unsafe
end handler

public handler SetAutoCorrectionType(in pType as String)
   if not pType is among the keys of kAutoCorrectTypes then
      throw "invalid autocorrect type" && pType
   end if

   put pType into mAutoCorrectionType
   if mFieldView is nothing then
      return
   end if

   unsafe
      UITextField_setAutocorrectionType(mFieldView, kAutoCorrectTypes[pType])
   end unsafe
end handler

public handler SetKeyboardType(in pType as String)
   if not pType is among the keys of kKeyboardTypes then
      throw "invalid keyboard type" && pType
   end if

   put pType into mKeyboardType
   if mFieldView is nothing then
      return
   end if

   unsafe
      UITextField_setKeyboardType(mFieldView, kKeyboardTypes[pType])
   end unsafe
end handler

public handler SetKeyboardStyle(in pType as String)
   if not pType is among the keys of kKeyboardStyles then
      throw "invalid keyboard style" && pType
   end if

   put pType into mKeyboardStyle
   if mFieldView is nothing then
      return
   end if

   unsafe
      UITextField_setKeyboardStyle(mFieldView, kKeyboardStyles[pType])
   end unsafe
end handler

public handler SetReturnKeyType(in pType as String)
   if not pType is among the keys of kReturnKeyTypes then
      throw "invalid return key type" && pType
   end if

   put pType into mReturnKeyType
   if mFieldView is nothing then
      return
   end if

   unsafe
      UITextField_setReturnKey(mFieldView, kReturnKeyTypes[pType])
   end unsafe
end handler

public handler SetContentType(in pType as String)
   if not pType is among the keys of kContentTypes then
      throw "invalid content type" && pType
   end if

   put pType into mContentType
   if mFieldView is nothing then
      return
   end if

   unsafe
      UITextField_setSecureTextEntry(mFieldView, kContentTypes[pType])
   end unsafe
end handler

public handler SetBorderStyle(in pType as String)
   if not pType is among the keys of kBorderStyles then
      throw "invalid border style" && pType
   end if

   put pType into mBorderStyle
   if mFieldView is nothing then
      return
   end if

   unsafe
      UITextField_setBorderStyle(mFieldView, kBorderStyles[pType])
   end unsafe
end handler

public handler SetClearButtonMode(in pType as String)
   if not pType is among the keys of kClearButtonModes then
      throw "invalid clear button mode" && pType
   end if

   put pType into mClearButtonMode
   if mFieldView is nothing then
      return
   end if

   unsafe
      UITextField_setClearButtonMode(mFieldView, kClearButtonModes[pType])
   end unsafe
end handler

public handler SetMinimumFontSize(in pValue as Integer)
   put pValue into mMinimumFontSize
   if mFieldView is nothing then
      return
   end if

   unsafe
      UITextField_setMinimumFontSize(mFieldView, pValue)
   end unsafe
end handler

public handler SetAutoFit(in pValue as Boolean)
   put pValue into mAutoFit
   if mFieldView is nothing then
      return
   end if

   unsafe
      UITextField_setAutoFit(mFieldView, pValue)
   end unsafe
end handler

public handler SetAutoClear(in pValue as Boolean)
   put pValue into mAutoClear
   if mFieldView is nothing then
      return
   end if

   unsafe
      UITextField_setAutoClear(mFieldView, pValue)
   end unsafe
end handler

public handler SetManageReturnKey(in pValue as Boolean)
   put pValue into mManageReturnKey
   if mFieldView is nothing then
      return
   end if

   unsafe
      UITextField_setManageReturnKey(mFieldView, pValue)
   end unsafe
end handler

public handler SetFocused(in pValue as Boolean)
   if mFieldView is nothing then
      return
   end if

   unsafe
      if pValue then
         UITextView_becomeFirstResponder(mFieldView)
      else
         UITextView_resignFirstResponder(mFieldView)
      end if
   end unsafe
end handler

/****/

private variable mOldText as optional String
handler EditingDidEndActionCallback(in pSender as ObjcObject, in pContext as optional any) returns nothing
   // Track whether the field is focused
   put false into mIsFocused

   variable tText as String
   put GetText() into tText
   if tText is mOldText then
      post "exitField"
   else
      post "closeField"
   end if
   MCEngineRunloopBreakWait()
end handler

handler EditingDidBeginActionCallback(in pSender as ObjcObject, in pContext as optional any) returns nothing
   // Track whether the field is focused
   put true into mIsFocused

   // Store the current text value
   put mText into mOldText
   post "openField"
   MCEngineRunloopBreakWait()
end handler

handler EditingChangedActionCallback(in pSender as ObjcObject, in pContext as optional any) returns nothing
   post "textChanged"
   MCEngineRunloopBreakWait()
end handler

/****/

private foreign handler ObjC_UITextFieldAlloc() returns ObjcRetainedId binds to "objc:UITextField.+alloc?ui"
private foreign handler ObjC_UITextFieldInit(in pObj as ObjcId) returns ObjcId binds to "objc:UITextField.-init?ui"

private foreign handler ObjC_UITextFieldSetEnabled(in pObj as ObjcId, in pEnabled as CBool) returns nothing binds to "objc:UITextField.-setEnabled:?ui"
private foreign handler ObjC_UITextFieldSetFont(in pObj as ObjcId, in pFont as ObjcId) returns nothing binds to "objc:UITextField.-setFont:?ui"
private foreign handler ObjC_UITextFieldAddTargetActionForControlEvents(in pObj as ObjcId, in pTarget as ObjcId, in pAction as UIntPtr, in pControlEvents as NSUInteger) returns nothing binds to "objc:UITextField.-addTarget:action:forControlEvents:?ui"

private foreign handler MCCanvasFontGetHandle(in pFont as Font, out rHandle as ObjcId) returns nothing binds to "<builtin>"

private unsafe handler CreateFieldView() returns nothing
	 variable tFieldView as ObjcObject
	 put ObjC_UITextFieldAlloc() into tFieldView

     put ObjC_UITextFieldInit(tFieldView) into tFieldView

     set my native layer to PointerFromObjcObject(tFieldView)
     put tFieldView into mFieldView

     put ObjcProxyGetTarget(EditingDidBeginActionCallback, nothing) into mFieldProxies["DidBegin"]
     put ObjcProxyGetTarget(EditingChangedActionCallback, nothing) into mFieldProxies["Changed"]
     put ObjcProxyGetTarget(EditingDidEndActionCallback, nothing) into mFieldProxies["DidEnd"]

     /* The three actions we are interested in are:
      *   UIControlEventEditingDidBegin = 1 << 16
      *   UIControlEventEditingChanged = 1 << 17
      *   UIControlEventEditingDidEnd = 1 << 18 */
     ObjC_UITextFieldAddTargetActionForControlEvents(mFieldView, mFieldProxies["DidBegin"], ObjcProxyGetAction(), 1 shifted left by 16 bitwise)
     ObjC_UITextFieldAddTargetActionForControlEvents(mFieldView, mFieldProxies["Changed"], ObjcProxyGetAction(), 1 shifted left by 17 bitwise)
     ObjC_UITextFieldAddTargetActionForControlEvents(mFieldView, mFieldProxies["DidEnd"], ObjcProxyGetAction(), 1 shifted left by 18 bitwise)
     UpdateFieldView()
     SetProperties()
end handler

// Destroy the native layer
private handler FinalizeView()
    set my native layer to nothing
    put nothing into mFieldView
    put the empty array into mFieldProxies
end handler

private unsafe handler UpdateFieldView() returns nothing
	if mFieldView is nothing then
		return
	end if

    /* Set the enabled state of the field to the host property. */
    ObjC_UITextFieldSetEnabled(mFieldView, my enabled)

    /* Set the font of the field to the host property. */
    variable tFontToUse as ObjcObject
    MCCanvasFontGetHandle(my font, tFontToUse)
    ObjC_UITextFieldSetFont(mFieldView, tFontToUse)
end handler

/**/

end widget
