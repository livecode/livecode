/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
This widget is a navigation bar.

Name: navitems
Type: property
Syntax: set the navitems of <widget> to <pNavItems>
Syntax: get the navitems of <widget>
Summary: Sets the navigation items

Parameters:
pNavItems: The navigation items.

Description:
Sets the navigation items from pNavItems, where pNavItems is a line delimited list of items, where each line is a comma delimited list of the
different components of the navigation item: name, label, icon, selected icon.

Name: selecteditem
Type: property
Syntax: set the selecteditem of <widget> to <pSelectedItem>
Syntax: get the selecteditem of <widget>

Summary: Sets the selected navigation item

Parameters:
pSelectedItem: The number of a nav item.

Description:
Selects a navigation item.
*/
-- declaring extension as widget, followed by identifier
widget com.livecode.extensions.livecode.navbar
--

-- dependancy declarations
use com.livecode.canvas
use com.livecode.widget
use com.livecode.engine
--

-- adding metadata to ensure the extension displays correctly in livecode
metadata author is "LiveCode"
metadata version is "1.0.2"
metadata title is "Navigation Bar"
--

-- property declarations
property navitems 		get getNavItems		set setNavItems
metadata navitems.editor is "com.livecode.pi.text"
metadata navitems.default is "contacts,Contacts,f007,f007\nfavourites,Favourites,f005,f006\nmusic,Music,f001,f001\nsearch,Search,f002,f002"

property selecteditem	get mSelectedItem 	set setNavSelectedItem
metadata selecteditem.default is "1"
--

-- private instance variables
private variable mTheme as String
private variable mNavItems as List
private variable mSelectedItem as Integer
private variable mItemStyle as String

private variable mNavItemCount as Integer
private variable mBoxWidth as Real
private variable mLeft as Real
--

public handler OnSave(out rProperties as Array)
	put the empty array into rProperties
	
	put mTheme into rProperties["theme"]
	put mNavItems into rProperties["items"]
	put mSelectedItem into rProperties["selected"]
	put mItemStyle into rProperties["itemStyle"]
	
	return rProperties
end handler

public handler OnLoad(in pProperties as Array)
	put pProperties["theme"] into mTheme
	put pProperties["items"] into mNavItems
	put pProperties["selected"] into mSelectedItem
	put pProperties["itemStyle"] into mItemStyle
end handler

public handler OnCreate() as undefined
	--properties
	put "ios-8" into mTheme
	-- creating a list of navigation items
	put the empty list into mNavItems
	put [["contacts","favourites","music","search"],["Contacts","Favourites","Music","Search"],["f007","f006","f001","f002"],["f007","f005","f001","f002"]] into mNavItems
	--
	put 1 into mSelectedItem
	put "icons and names" into mItemStyle
	
	-- initialise variables
	put 0 into mNavItemCount
	put 0 into mBoxWidth
	put 0 into mLeft
	
	set my height to 48
	set my width to 200
end handler

public handler OnPaint() as undefined

	// update variables
	put the number of elements in (element 1 of mNavItems) into mNavItemCount
	put my width / mNavItemCount into mBoxWidth
	put 0 into mLeft
	
	// background
	set the paint of this canvas to getPaint("background","fill")
	fill getPath("bounding box") on this canvas
	
	// Calculate the size of each box we're drawing into
	variable tElement
	variable tCount as Integer
	put 1 into tCount
	
	variable tX as Integer
	repeat with tX from 1 up to mNavItemCount
	
		if mSelectedItem is tCount then
			set the paint of this canvas to getPaint("text","selected-fill")
		else
			set the paint of this canvas to getPaint("text","fill")
		end if
		
		-- Draw the text of the nav bar
		if mItemStyle is "icons and names" then
			set the font of this canvas to getFont("label")
			fill text (element tX of element 2 of mNavItems) at center of getRect("label") on this canvas
		end if
	
		-- Draw the icon text
		set the font of this canvas to getFont("icon")
		if tCount is mSelectedItem then
            get the char with code ((element tX of element 4 of mNavItems) converted from base 16)
		else
            get the char with code ((element tX of element 4 of mNavItems) converted from base 16)
		end if
		fill text the result at center of getRect("icon") on this canvas
		
		add mBoxWidth to mLeft
		add 1 to tCount
	end repeat
		
	// top line
	set the paint of this canvas to getPaint("background","stroke")
	fill getPath("line") on this canvas
end handler

public handler OnMouseUp() as undefined

	variable tSelected as Number
	put locToNavItem(the click position) into tSelected
	
	if tSelected > 0 then
		put tSelected into mSelectedItem
		redraw all
		
		variable tItemLabel as String
		put element mSelectedItem of element 2 of mNavItems into tItemLabel
		post "navigate" with [tItemLabel]
	end if
end handler
----------

----------
-- this handler converts mNavItems in a form that can be combined for output 
private handler getNavItems() as String
	
	variable tNavItems as List
	put the empty list into tNavItems
	
	variable tCount as Integer
	variable tListLine as List
	variable tStringLine as String
	variable tItemList as List
	
	put the empty string into tStringLine
	put the empty list into tItemList
	
	repeat with tCount from 1 up to the number of elements in element 1 of mNavItems
		put the empty list into tListLine
			
		push element tCount of element 1 of mNavItems onto back of tListLine
		push element tCount of element 2 of mNavItems onto back of tListLine
		push element tCount of element 3 of mNavItems onto back of tListLine
		push element tCount of element 4 of mNavItems onto back of tListLine
		
		combine tListLine with "," into tStringLine
		push tStringLine onto back of tItemList
	end repeat
	
	variable tNavItemString as String
	put the empty string into tNavItemString
	combine tItemList with newline into tNavItemString
	
	return tNavItemString
end handler

public handler getPath(in pObject as String) as Path
	if pObject is "bounding box" then
		return rectangle path of my bounds 
	else if pObject is "line" then
		return rectangle path of rectangle [0,0,my width,1]
	end if
end handler

public handler getRect(in pObject as String) as Rectangle
	if pObject is "label" then
		return rectangle [mLeft,my height * 0.65,mLeft+mBoxWidth,my height]
		
	else if pObject is "icon" then
		if mItemStyle is "icons and names" then
			return rectangle [mLeft,my height * 0.05,mLeft+mBoxWidth,my height * 0.65]
		else if mItemStyle is "icons" then
			return rectangle [mLeft, 0, mLeft+mBoxWidth, my height]
		end if
	
	end if
end handler

public handler getPaint(pLocation, pType) as Paint
	if pLocation is "background" then
		if pType is "fill" then
			return solid paint with color [246/255, 246/255, 247/255]
		else if pType is "stroke" then
			return solid paint with color [178/255, 178/255, 178/255]
		end if
	else if pLocation is "text" then
		if pType is "fill" then
			return solid paint with color [146/255, 146/255, 146/255]
		else if pType is "selected-fill" then
			return solid paint with color [0, 122/255 ,1]
		end if
	end if
	
	return solid paint with color [1, 100/255, 200/255]
end handler

private handler getFont(in pType as String) as Font
	if pType is "label" then
		if mTheme is "ios-8" then
			return font "Helvetica Neue" at size 10
		else
			return the font of this canvas
		end if
		
	else if pType is "icon" then
		return font "fontawesome" at size 20
	end if
end handler

public handler setTheme(in pThemeName as String) as undefined
	put pThemeName into mTheme
	redraw all
end handler

public handler setNavSelectedItem(in pSelectedItem as Integer) as undefined
	if pSelectedItem > 0 and pSelectedItem <= the number of elements in mNavItems then
		put pSelectedItem into mSelectedItem
		redraw all
	end if
end handler

public handler setItemStyle(in pItemStyle as String) as undefined
	put pItemStyle into mItemStyle
	redraw all
end handler

private handler setNavItems(in pNavItems as String) as undefined
	
	variable tNavItems as List
	split pNavItems by newline into tNavItems
	
	variable tNavElement
	variable tListElement
	
	variable tFinalActions as List
	variable tStringToList as List
	put the empty list into tFinalActions
	
	repeat for each element tNavElement in tNavItems
		put the empty list into tStringToList
		split tNavElement by "," into tStringToList
		
		repeat for each element tListElement in tStringToList
			push tListElement onto back of tFinalActions
		end repeat
		
	end repeat
	
	variable tNavCount as Integer
	variable tCount as Integer
	put the trunc of (the number of elements in tFinalActions)/4 into tNavCount
	
	variable tNameList as List
	variable tLabelList as List
	variable tIconList as List
	variable tSelectedIconList as List
	put the empty list into tNameList
	put the empty list into tLabelList
	put the empty list into tIconList
	put the empty list into tSelectedIconList
	
	repeat with tCount from 1 up to tNavCount
		push element (4*tCount)-3 of tFinalActions onto back of tNameList
		push element (4*tCount)-2 of tFinalActions onto back of tLabelList
		push element (4*tCount)-1 of tFinalActions onto back of tIconList
		push element 4*tCount of tFinalActions onto back of tSelectedIconList
	end repeat
	
	put [tNameList,tLabelList,tIconList,tSelectedIconList] into mNavItems
	
	redraw all
end handler

public handler addNavItem(in pNewItem as String) as undefined

	variable tNewItem as List
	split pNewItem by "," into tNewItem

	variable tNameList as List
	variable tLabelList as List
	variable tIconList as List
	variable tSelectedIconList as List
	put element 1 of mNavItems into tNameList
	put element 2 of mNavItems into tLabelList
	put element 3 of mNavItems into tIconList
	put element 4 of mNavItems into tSelectedIconList
	
	push element 1 of tNewItem onto back of tNameList
	push element 2 of tNewItem onto back of tLabelList
	push element 3 of tNewItem onto back of tIconList
	push element 4 of tNewItem onto back of tSelectedIconList
	
	put [tNameList,tLabelList,tIconList,tSelectedIconList] into mNavItems

	redraw all
end handler

public handler removeNavItem(in pItem as String) as undefined
	
	variable tItems as String
	variable tItemList as List
	put getNavItems() into tItems
	split tItems by newline into tItemList
	put the empty string into tItems
	
	variable tItemElement
	variable tCount as Integer
	put 1 into tCount
	
	repeat for each element tItemElement in tItemList
		if tItemElement contains pItem then
			delete element tCount of tItemList
		end if
	add 1 to tCount
	end repeat
	
	combine tItemList with newline into tItems
	
	setNavItems(tItems)
	
	redraw all
end handler

private handler locToNavItem(in pLoc as Point) as Integer
	variable tNavItemCount as Integer
	put the number of elements in (element 1 of mNavItems) into tNavItemCount
	
	variable tX as Integer
	//alert_point(pLoc)
	repeat with tX from 1 up to tNavItemCount
		if pLoc is within navItemRect(tX) then
			return tX
		end if
	end repeat
	
	return 0
end handler

private handler navItemRect(in pItemCount) as Rectangle
	variable tNavItemCount as Integer
	variable tBoxWidth as Real
	
	put the number of elements in (element 1 of mNavItems) into tNavItemCount
	put my width / tNavItemCount into tBoxWidth
	
	variable tLeft as Real
	
	if pItemCount is 1 then
		put 0 into tLeft
	else
		put tBoxWidth * (pItemCount-1) into tLeft
	end if
	
	return rectangle [tLeft,0,tLeft+tBoxWidth,my height]
end handler

private handler alert_number(in pNumber as Number) as undefined
	execute script "answer" && pNumber formatted as string
end handler

private handler alert_point(in pPoint as Point) as undefined
	variable tClickPoint as List
	split pPoint by "," into tClickPoint

	variable tX as Number
	variable tY as Number
	
	put (element 1 of tClickPoint) parsed as number - the left of my rectangle into tX
	put (element 2 of tClickPoint) parsed as number - the top of my rectangle into tY

	execute script "answer" && tX formatted as string & "," & tY formatted as string
end handler

end widget