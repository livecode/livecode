/*
Copyright (C) 2015-2016 LiveCode Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/**
Palette header bar widget.
*/

widget com.livecode.widget.paletteactions

use com.livecode.canvas
use com.livecode.widget
use com.livecode.engine
use com.livecode.library.iconsvg
use com.livecode.library.widgetutils

metadata title is "Palette Actions"
metadata author is "LiveCode"
metadata version is "1.0.1"
metadata userVisible is "false"
metadata _ide is "true"

property navNames		get getNavNames			set setNavNames
property navIcons		get getNavIcons			set setNavIcons
property navLabels		get getNavLabels		set setNavLabels
property showNavIcons	get mShowNavIcons		set setShowNavIcons
property selectedNavItem	get getSelectedNavItem	set setSelectedNavItem
property selectedNavColor	get mSelectedNavColor	set setSelectedNavColor

property navData		get getNavData			set setNavData

property actionNames		get getActionNames		set setActionNames
property actionIcons		get getActionIcons		set setActionIcons
property actionLabels		get getActionLabels		set setActionLabels
property showActionIcons	get mShowActionIcons	set setShowActionIcons

property actionData		get getActionData		set setActionData

property isHeader		get mIsHeader			set mIsHeader
property navBarRight	get getNavBarRight
property minWidth get mMinWidth

private variable mNavData 			as List
private variable mSelectedNavItem 	as Integer
private variable mShowNavIcons		as Boolean
private variable mSelectedNavColor	as String

private variable mActionData		as List
private variable mShowActionIcons	as Boolean

private variable mSize 				as Real

private variable mTabRects			as List
private variable mActionRects		as List

private variable mRecalculate		as Boolean

private variable mIsHeader 			as Boolean

private variable mHoverTab          as String
private variable mHoverIndex        as Integer

private variable mMinWidth as Real

private variable mFirstTab          as Integer
private variable mLastTab           as Integer
private variable mBackForwardRects  as List

constant kBlack is [0,0,0]
constant kNavColor is [0,0,0,0.5]
constant kWhite is [1,1,1]

constant kDefaultNavName is "nav"
constant kDefaultNavIcon is ""
constant kDefaultNavLabel is "Nav"

constant kDefaultActionName is "action"
constant kDefaultActionIcon is "cog"
constant kDefaultActionLabel is "Action"
constant kDefaultActionMenu is ""

constant kTabPaddingRatio is 0.1
constant kPaddingRatio is 0.25

constant kPaints is { \
	"background": [[[0,0,0], 0.05]], \
	"line": ["border"], \
	"title": ["foreground"], \
	"selected tab": ["background"], \
	"nav": ["foreground"], \
	"hover nav": ["highlight"], \
	"disabled": ["foreground", ["background", 0.7]] \
}

public handler OnCreate()

	variable tAction as Array
	put defaultActionArray() into tAction

	variable tCount as Integer

	variable tKey as String
	variable tMenuItem as Array
	put the empty array into tMenuItem
	repeat with tCount from 1 up to 3
		put tCount formatted as string into tKey
		put the empty array into tMenuItem[tKey]
		put "Choice" && tKey into tMenuItem[tKey]["label"]
		put "false" into tMenuItem[tKey]["checked"]
		put "" into tMenuItem[tKey]["name"]
		put "" into tMenuItem[tKey]["menu"]
		put tMenuItem[tKey] into tAction["menu"][tKey]
		put tAction["menu"] into tMenuItem[tKey]["menu"]
		put tMenuItem[tKey] into tAction["menu"][tKey]
	end repeat

	put [tAction] into mActionData

	variable tNav as Array
	put the empty array into tNav
	variable tCountString as String

	put the empty list into mNavData
	repeat with tCount from 1 up to 3
		put kDefaultNavName && tCount formatted as string into tNav["name"]
		put kDefaultNavLabel && tCount formatted as string into tNav["label"]
		put kDefaultNavIcon into tNav["icon"]
		push tNav onto mNavData
	end repeat

	put 1 into mSelectedNavItem

	put false into mShowNavIcons
	put true into mShowActionIcons

	put true into mRecalculate

	put true into mIsHeader

	put "158,191,44" into mSelectedNavColor

	put the empty list into mTabRects
	put the empty list into mActionRects

    put 0 into mHoverIndex
    put "" into mHoverTab
	put 0 into mMinWidth
	put 1 into mFirstTab
	put 0 into mLastTab
end handler

public handler OnSave(out rProperties as Array)
	variable tProperties as Array
	put the empty array into tProperties
	put getNavData() into tProperties["nav data"]
	put getActionData() into tProperties["action data"]
	put mIsHeader into tProperties["is header"]
	put tProperties into rProperties
end handler

public handler OnLoad(in pProperties as Array)
	setNavData(pProperties["nav data"])
	setActionData(pProperties["action data"])
	put pProperties["is header"] into mIsHeader
end handler

public handler OnPaint()

	if mRecalculate is true then
		recalculateRects()
	end if

	-- draw the background
	if mIsHeader and the number of elements in mNavData > 0 then
		fillPathWithPaints(getPath("background"), "background")
	end if

	-- draw the line above / below
	strokePathWithPaints(getPath("line"), "line")
	
	drawActions()

	drawTabs()
	
	drawTabNav()
end handler

public handler OnClick()
	variable tPoint as Point
	put the click position into tPoint

	variable tTab as String
	variable tIndex as Integer
	if positionToRect(tPoint, tTab, tIndex) then
		if tTab is "tab" then
			setSelectedNavIndex(tIndex)
		else if tTab is "action" then
			if mActionData[tIndex]["menu"] is not empty then
				variable tResult
				variable tMenuString as String

				put menuArrayToString(mActionData[tIndex]["menu"], 0) into tMenuString
				
				popup menu tMenuString at the mouse position
				put the result into tResult
				if tResult is not nothing then
					post "menuPick" with [tResult]
				end if
			else
				post "actionSelected" with [mActionData[tIndex]["name"]]
			end if
		else if tTab is "backforward" then
		    GoBackForward(tIndex is 1)
		end if
	end if
end handler

public handler OnMouseMove()
	updateHover()
end handler

public handler OnMouseLeave()
	clearHover()
end handler

public handler OnGeometryChanged()
	recalculateRects()
end handler

private handler updateHover()
	variable tPoint as Point
	put the mouse position into tPoint

	variable tTab as String
	variable tIndex as Integer
	if positionToRect(tPoint, tTab, tIndex) is false then
		clearHover()
		return
    end if

    if tIndex is not mHoverIndex or tTab is not mHoverTab then
        if tIndex is not 0 then
            // AL-2015-04-24: [[ Bug 15286 ]] Set tooltip of palette actions
            if tTab is "tab" then
                set property "tooltip" of my script object to mNavData[tIndex]["label"]
            else if tTab is "action" then
                set property "tooltip" of my script object to mActionData[tIndex]["label"]
            else if tTab is "backforward" then
                if tIndex is 1 then
                    set property "tooltip" of my script object to "previous"
                else
                    set property "tooltip" of my script object to "next"
                end if
            end if
        end if
        put tIndex into mHoverIndex
        put tTab into mHoverTab
        redraw all
    end if
end handler

private handler clearHover()
	put 0 into mHoverIndex
	put "" into mHoverTab
	set property "tooltip" of my script object to ""
	redraw all
end handler

private handler positionToRect(in pPoint as Point, out rWhich as String, out rIndex as Integer) returns Boolean
	variable tRect as Rectangle
	variable tCount as Integer
    put rectangle [0,0,0,0] into tRect
	put 0 into tCount
	repeat for each element tRect in mTabRects
		add 1 to tCount
		if pPoint is within tRect then
			put "tab" into rWhich
			put tCount + mFirstTab - 1 into rIndex
			return true
		end if
	end repeat

	put 0 into tCount
	repeat for each element tRect in mActionRects
		add 1 to tCount
		if pPoint is within tRect then
			put "action" into rWhich
			put tCount into rIndex
			return true
		end if
	end repeat

    if mFirstTab > 1 and pPoint is within mBackForwardRects[1] then
        put "backforward" into rWhich
        put 1 into rIndex
        return true
    else if mLastTab < the number of elements in mNavData and \
        pPoint is within mBackForwardRects[2] then
        put "backforward" into rWhich
        put 2 into rIndex
        return true
    end if

    put "" into rWhich
    put 0 into rIndex
	return false
end handler

private handler GoBackForward(in pBack as Boolean)
    variable tFirstTab as Integer
    variable tCounter as Integer
    variable tNavData as List
    variable tTabRects as List
    variable tLastTab as Integer
    variable tWidth as Real
    if pBack then
        -- Find the maximum number of newly displayable tabs
        repeat with tCounter from 1 up to mFirstTab - 1
        	-- Work around bug 20270
            put tCounter into tFirstTab
            variable tNavData as List
            variable tTabRects as List
            variable tLastTab as Integer
            put element tFirstTab to -1 of mNavData into tNavData

	        put calculateRects(true, true, mShowNavIcons, tNavData, tWidth) into tTabRects
	        put calculateLastTab(tTabRects, tFirstTab) into tLastTab
	        
	        -- If we can see the first previously undisplayable tab with
	        -- this starting point, then we are done.
	        if tLastTab >= mFirstTab - 1 then
	            exit repeat
	        end if
	    end repeat   
	else
	    -- Find the maximum number of newly displayable tabs
        repeat with tCounter from mFirstTab + 1 up to mLastTab + 1
            -- Work around bug 20270
            put tCounter into tFirstTab
            put element tFirstTab to -1 of mNavData into tNavData

	        put calculateRects(true, true, mShowNavIcons, tNavData, tWidth) into tTabRects
	        put calculateLastTab(tTabRects, tFirstTab) into tLastTab
	        
	        -- If we can see the rest of the tabs with this starting 
	        -- point, then we are done.
	        if tLastTab is the number of elements in mNavData then
	            exit repeat
	        end if
	    end repeat
    end if    
    
    post "navChanged"
    put tFirstTab into mFirstTab
    put true into mRecalculate
    redraw all
end handler
--------------------------------------------------------------------------------
--
--		Painting utilities
--
--------------------------------------------------------------------------------

private handler applyPaint(in pPaintInfo as List)
	set the paint of this canvas to pPaintInfo[1]
	set the opacity of this canvas to pPaintInfo[2]
end handler

private handler strokePathWithPaints(in pPath as Path, in pClass as String)
	variable tPaint as List
	repeat for each element tPaint in getPaints(pClass)
		applyPaint(tPaint)
		stroke pPath on this canvas
	end repeat
end handler

private handler fillPathWithPaints(in pPath as Path, in pClass as String)
	variable tPaint as List
	repeat for each element tPaint in getPaints(pClass)
		applyPaint(tPaint)
		fill pPath on this canvas
	end repeat
end handler

private handler fillSvgPathWithPaints(in pSvgPath as String, \
		in pTargetRect as Rectangle, in pClass as String)
	variable tPath as Path
	put path pSvgPath into tPath

	variable tRect as Rectangle
	variable tPadding as Real
	put my height * kPaddingRatio into tPadding
	put rectangle [the left of pTargetRect + tPadding, the top of pTargetRect, \
			the right of pTargetRect - tPadding, the bottom of pTargetRect] \
			into tRect

	constrainPathToRect(tRect, tPath)

	fillPathWithPaints(tPath, pClass)
end handler

private handler fillTextWithPaints(in pText as String, \
		in pTargetRect as Rectangle, in pClass as String)
	variable tPaint as List
	repeat for each element tPaint in getPaints(pClass)
		applyPaint(tPaint)
		fill text pText at center of pTargetRect on this canvas
	end repeat
end handler

private handler drawTabNav()
    variable tMode as String
    if mFirstTab > 1 then
        if (mHoverIndex is 1 and mHoverTab is "backforward") then
            put "hover nav" into tMode
        else
            put "nav" into tMode
        end if

        -- Draw left tab nav
        fillSvgPathWithPaints(iconSVGPathFromName("double angle left"), \
        mBackForwardRects[1], tMode)
    end if
    
    if mLastTab < the number of elements in mNavData then
    
        if (mHoverIndex is 2 and mHoverTab is "backforward") then
            put "hover nav" into tMode
        else
            put "nav" into tMode
        end if
        -- Draw right tab nav
        fillSvgPathWithPaints(iconSVGPathFromName("double angle right"), \
        mBackForwardRects[2], tMode)
    end if
end handler

private handler drawTabs()
    if mNavData is [] then
        return
    end if
    
	variable tTabIndex as Integer
	put 0 into tTabIndex
	repeat with tTabIndex from mFirstTab up to mLastTab
		variable tTab as Array
        put element tTabIndex of mNavData into tTab
        variable tRect as Rectangle
        put element tTabIndex - mFirstTab + 1 of mTabRects into tRect

        if tTabIndex is mSelectedNavItem then
            // Get 3 sided path of tab (For drawing 3 sided stroke)
            variable tPath as Path
            put getPathOfTab(tRect) into tPath

            // Get 3 sided path of tab (For drawing tab background)
            variable tPathClosed as Path
            put tPath into tPathClosed
            close path on tPathClosed

            // Draw background
            fillPathWithPaints(tPathClosed, "selected tab")

            // Draw 3 sided tab stroke
            strokePathWithPaints(tPath, "line")
        end if

        variable tMode as String

        if (mHoverIndex is tTabIndex and mHoverTab is "tab") then
            put "hover nav" into tMode
        else
            put "nav" into tMode
        end if

        if mShowNavIcons then
            fillSvgPathWithPaints(iconSVGPathFromName(tTab["icon"]), tRect, tMode)
        else
            set the font of this canvas to my font
            fillTextWithPaints(tTab["label"], tRect, tMode)
        end if
    end repeat
end handler

private handler drawActions()
	variable tAction as Array
	variable tActionIndex as Integer
	put 0 into tActionIndex
	repeat for each element tAction in mActionData
	    add 1 to tActionIndex

        variable tRect as Rectangle
        put element tActionIndex of mActionRects into tRect

        variable tMode as String

        if tAction["enabled"] parsed as boolean is false then
            put "disabled" into tMode
        else if mHoverIndex is tActionIndex and mHoverTab is "action" then
            put "hover nav" into tMode
        else
            put "nav" into tMode
        end if

        if mShowActionIcons then
            fillSvgPathWithPaints(iconSVGPathFromName(tAction["icon"]), tRect, tMode)
        else
            set the font of this canvas to my font
            fillTextWithPaints(tAction["label"], tRect, tMode)
        end if
    end repeat
end handler

-- The padding to add if there are actions and tabs.
-- Since layout depends entirely on the height of the widget, so does the padding.
private handler internalPadding() returns Real
	return 2 *  kPaddingRatio * my height
end handler

private handler recalculateRects()
	variable tTabWidth as Real
	variable tActionWidth as Real
	calculateActionRects(tActionWidth)
	calculateTabRects(tTabWidth)
	
	variable tMinWidth as Real
	put tTabWidth + tActionWidth into tMinWidth
	-- Add extra padding if there are actions and tabs
	if tTabWidth is not 0 and tActionWidth is not 0 then
		add internalPadding() to tMinWidth
	end if 
	
	put tMinWidth into mMinWidth
	put false into mRecalculate
end handler

private handler fetchRectAndUpdate(in pIcons as Boolean, in pFromLeft as Boolean, \
    in pElement as Array, in pPadding as Real, in pTabs as Boolean, \
    inout xLeft as Real, inout xRight as Real) returns Rectangle
    
    variable tTop as Real
	variable tBottom as Real
	if pTabs then
		put kTabPaddingRatio * my height + pPadding into tTop
	else
		put pPadding into tTop
	end if
	put my height - pPadding into tBottom
    
	variable tWidth as Real
    if pIcons is false then
        variable tTextRect as Rectangle
        put the bounds of text pElement["label"] with my font into tTextRect
        put the width of tTextRect into tWidth
    else
        put tBottom - pPadding into tWidth
    end if

    if pFromLeft then
        put tWidth + 2 * pPadding + xLeft into xRight
    else
        put xRight - (tWidth + 2 * pPadding) into xLeft
    end if
    
    variable tRect as Rectangle
    put rectangle [xLeft, tTop, xRight, tBottom] into tRect

    if pFromLeft then
        put xRight into xLeft
    else
        put xLeft into xRight
    end if
    
    return tRect
end handler

private handler calculateRects(in pTabs as Boolean, in pFromLeft as Boolean, in pIcons as Boolean, in pData as List, out rMinWidth as Real) returns List
	variable tMinWidth as Real
	put 0 into tMinWidth
	
	variable tPadding as Real
	if pTabs then
		put my height * kPaddingRatio * (1 - kTabPaddingRatio) into tPadding
	else
		put my height * kPaddingRatio into tPadding
	end if

	variable tRects as List
	put the empty list into tRects

	variable tLeft as Real
	variable tRight as Real
	if pFromLeft then
		put tPadding into tLeft
		if pTabs and mFirstTab > 1 then
		    add 2*tPadding + iconWidth() to tLeft
		end if
	else
		put my width - tPadding into tRight
	end if

	variable tElement as Array
	repeat for each element tElement in pData
	    push fetchRectAndUpdate(pIcons, pFromLeft, tElement, tPadding, \
	        pTabs, tLeft, tRight) onto tRects
	end repeat

	if the number of elements in pData is not 0 then
		if pFromLeft then
			put tRight into tMinWidth
		else
			put my width - tLeft into tMinWidth
		end if
		-- Add the padding to the opposite side
		add tPadding to tMinWidth
	end if 
	
	put tMinWidth into rMinWidth
	return tRects
end handler

private handler iconWidth() returns Real
    return my height * (1 + (2 * kPaddingRatio * (kTabPaddingRatio - 1)))
end handler

private handler calculateLastTab(in pTabRects as List, in pFirstTab as Integer) returns Integer
	variable tActionsLeft as Real
	if mActionRects is not [] then
    	put the left of mActionRects[-1] into tActionsLeft
    else
        put the right of my bounds into tActionsLeft
    end if
    
    // Some padding between actions and tabs
    subtract internalPadding() from tActionsLeft
    
    variable tIconWidth as Real
    put iconWidth() into tIconWidth
    
    variable tRect as Rectangle
    variable tLastTab as Integer
    put 0 into tLastTab
    repeat for each element tRect in pTabRects
        if the right of tRect + tIconWidth > tActionsLeft then
            exit repeat
        end if
        add 1 to tLastTab
    end repeat
	
	// Ensure there is space for the 'go right' icon
	if tLastTab > 0 and tLastTab + pFirstTab is not the number of elements in mNavData then
	    if the right of pTabRects[tLastTab] + tIconWidth > tActionsLeft then
	        subtract 1 from tLastTab
	    end if
	end if
	
	-- Show at least 1 tab even if we are too small
	put the maximum of tLastTab and 1 into tLastTab
	return pFirstTab + tLastTab - 1
end handler

private handler calculateTabRects(out rWidth as Real)
    if mNavData is [] then
        put 0 into rWidth
        put [] into mTabRects
        return
    end if

    put the minimum of mFirstTab and the number of elements in mNavData \
        into mFirstTab

    variable tNavData as List
    put element mFirstTab to -1 of mNavData into tNavData

	put calculateRects(true, true, mShowNavIcons, tNavData, rWidth) into mTabRects
	
    put calculateLastTab(mTabRects, mFirstTab) into mLastTab
	
	// Ensure mTabRects only contains visible tab rects
	put element 1 to mLastTab - mFirstTab + 1 of mTabRects into mTabRects
		
	variable tPadding as Real
	put my height * kPaddingRatio * (1 - kTabPaddingRatio) into tPadding

	variable tBackLeft as Real
	variable tBackRight as Real
	variable tForwardLeft as Real
	variable tForwardRight as Real
	put the right of mTabRects[-1] into tForwardLeft
	put tPadding into tBackLeft
	put 0 into tForwardRight
	put 0 into tBackRight

    variable tRects as List
	push fetchRectAndUpdate(true, true, {}, tPadding, \
	        true, tBackLeft, tBackRight) onto tRects
	        
	push fetchRectAndUpdate(true, true, {}, tPadding, \
	        true, tForwardLeft, tForwardRight) onto tRects	
	
    -- return the minimum width
	put the width of tRects[1] + the width of tRects[2] + \
	    the width of mTabRects[1] + tPadding into rWidth
	        
    put tRects into mBackForwardRects
end handler

private handler calculateActionRects(out rWidth as Real)
	if mIsHeader then
		put calculateRects(false, false, mShowActionIcons, mActionData, rWidth) into mActionRects
	else
		put calculateRects(false, true, mShowActionIcons, mActionData, rWidth) into mActionRects
	end if
end handler

private handler decodePaint(in pDesc as any) returns Paint
	if pDesc is a string then
		if pDesc is "background" then
			return my background paint
		else if pDesc is "foreground" then
			return my foreground paint
		else if pDesc is "border" then
			return my border paint
		else if pDesc is "highlight" then
			return my highlight paint
		end if
	else if pDesc is a list then
		return solid paint with color pDesc
	end if
end handler

private handler getPaints(in pObject as String) returns List

	variable tPaintInfo as List
	put kPaints[pObject] into tPaintInfo

	variable tPaint as any
	variable tCount as Number
	repeat with tCount from 1 up to the number of elements in tPaintInfo
		if tPaintInfo[tCount] is a list then
			put decodePaint(tPaintInfo[tCount][1]) into tPaintInfo[tCount][1]
		else
			put [decodePaint(tPaintInfo[tCount]), 1] into tPaintInfo[tCount]
		end if
	end repeat

	return tPaintInfo
end handler

private handler getPath(in pObject as String) returns Path
	variable tHeight as Number
	put (the trunc of my height) - 0.5 into tHeight
	if pObject is "background" then
		return rectangle path of rectangle [0, 0, the rounded of my width + 0.5, tHeight]
	else if pObject is "line" then
		if mIsHeader then
			return line path from point [0, tHeight] to point [my width, tHeight]
		else
			return line path from point [0, 0] to point [my width, 0]
		end if
	end if
end handler

private handler getPathOfTab(in pRect as Rectangle) returns Path
    return rectangle path of rectangle [the rounded of (the left of pRect) - 0.5, the rounded of (my height * kTabPaddingRatio) + 0.5, the rounded of (the right of pRect) + 0.5, my height+0.5]
end handler

private handler menuItemToString(in pMenuItem as Array, in pLevel as Integer) returns String
	variable tMenuString as String
	put "" into tMenuString

	put pMenuItem["label"] after tMenuString
	if "name" is among the keys of pMenuItem then
		put "/|" & pMenuItem["name"] after tMenuString
	end if

	repeat pLevel times
		put "\t" before tMenuString
	end repeat

	if "checked" is among the keys of pMenuItem then
		if pMenuItem["checked"] parsed as boolean then
			put "!c" before tMenuString
		else
			put "!n" before tMenuString
		end if
	else if "menu" is among the keys of pMenuItem then
		put "\n" & menuArrayToString(pMenuItem["menu"], pLevel + 1) after tMenuString
	end if

	return tMenuString
end handler

private handler menuArrayToString(in pArray as Array, in pLevel as Integer) returns String
	variable tKeys as List
	put the keys of pArray into tKeys
	sort tKeys in ascending order

	variable tMenu as String
	put "" into tMenu

	variable tKey as String
	variable tData as Array
	repeat for each element tKey in tKeys
		if tMenu is empty then
			put "" into tMenu
		else
			put "\n" after tMenu
		end if
		put pArray[tKey] into tData
		put menuItemToString(tData, pLevel) after tMenu
	end repeat
	return tMenu
end handler

--------------------------------------------------------------------------------
--
--		Data utilities
--
--------------------------------------------------------------------------------

private handler listToArray(in pList as List) returns Array
	variable tCount
	variable tArray
	put the empty array into tArray
	repeat with tCount from 1 up to the number of elements in pList
		put element tCount of pList into tArray[tCount formatted as string]
	end repeat
	return tArray
end handler

-- Sorts numerically, converting strings to numbers where possible
private handler CompareKeysNumeric(in pLeft as any, in pRight as any) returns Integer
	variable tLeft as optional Number
	variable tRight as optional Number
	
	if pLeft is a number then
		put pLeft into tLeft
	else
		put pLeft parsed as number into tLeft
	end if
	
	if pRight is a number then
		put pRight into tRight
	else
		put pRight parsed as number into tRight
	end if

	if tRight is tLeft then
		return 0
	end if
		
	if tRight is nothing then
		return -1
	end if
	
	if tLeft is nothing then
		return 1
	end if
	
	if tLeft < tRight then
        return -1
	end if

    return 1
end handler

private handler setData(in pArray as Array, in pDefaultArray as Array, out rList as List)
	variable tList as List
	put the empty list into tList

	if pArray is not empty then
		variable tOrder as List
		put the keys of pArray into tOrder
		sort tOrder using handler CompareKeysNumeric

		variable tKeys as List
		put the keys of pDefaultArray into tKeys

		variable tOrderKey as String
		variable tKey as String
		variable tElement as Array

		repeat for each element tOrderKey in tOrder
			put the empty array into tElement
			repeat for each element tKey in tKeys
				if tKey is among the keys of pArray[tOrderKey] then
					put pArray[tOrderKey][tKey] into tElement[tKey]
				else
					put pDefaultArray[tKey] into tElement[tKey]
				end if
			end repeat
			push tElement onto tList
		end repeat
	end if

	put tList into rList
	put true into mRecalculate
	redraw all
end handler

private handler getDataElement(in pElementName as String, in pList as List) returns String
	variable tList
	put the empty list into tList

	variable tElement
	repeat for each element tElement in pList
		push tElement[pElementName] onto tList
	end repeat

	variable tElements
	combine tList with "," into tElements
	return tElements
end handler

private handler setDataElement(in pElementName as String, in pElements as String, in pDefaultArray as Array, inout xList as List)
	variable tElements
	split pElements by "," into tElements

	variable tCount
	put 0 into tCount

	variable tElement
	repeat for each element tElement in xList
		add 1 to tCount
		if tCount > the number of elements in tElements then
			put pDefaultArray[pElementName] into xList[tCount][pElementName]
		else
			put tElements[tCount] into xList[tCount][pElementName]
		end if
	end repeat

	// If we there are more of the given element than there are items, generate more
	add 1 to tCount
	repeat with tCount from tCount up to the number of elements in tElements
		push pDefaultArray onto xList
		put tElements[tCount] into xList[tCount][pElementName]
	end repeat

	put true into mRecalculate

	redraw all
end handler

// Only the primary data element ("name" for both actions and nav) can *reduce* the number of elements in the data list.
private handler setPrimaryDataElement(in pElementName as String, in pElements as String, in pDefaultArray as Array, inout xList as List)
	variable tElements
	split pElements by "," into tElements

	variable tCount
	put 0 into tCount

	variable tElement
	repeat for each element tElement in tElements
		add 1 to tCount
		if tCount > the number of elements in xList then
			push pDefaultArray onto xList
		end if

		put tElement into xList[tCount][pElementName]
	end repeat

	// If we there are more items than there are primary elements, pop them off.
	add 1 to tCount
	repeat with tCount from tCount up to the number of elements in xList
		pop xList
	end repeat

	put true into mRecalculate

	redraw all
end handler

--------------------------------------------------------------------------------
--
--		Nav data handling
--
--------------------------------------------------------------------------------

private handler defaultNavArray() returns Array
	variable tArray as Array
	put the empty array into tArray
	put kDefaultNavName into tArray["name"]
	put kDefaultNavLabel into tArray["label"]
	put kDefaultNavIcon into tArray["icon"]
	return tArray
end handler

private handler getNavData() returns Array
	return listToArray(mNavData)
end handler

private handler setNavData(in pNavData as Array)
	setData(pNavData, defaultNavArray(), mNavData)
end handler

private handler getNavNames() returns String
	return getDataElement("name", mNavData)
end handler

private handler setNavNames(in pNames as String)
	setPrimaryDataElement("name", pNames, defaultNavArray(), mNavData)
end handler

private handler getNavIcons() returns String
	return getDataElement("icon", mNavData)
end handler

private handler setNavIcons(in pIcons as String)
	setDataElement("icon", pIcons, defaultNavArray(), mNavData)
end handler

private handler getNavLabels() returns String
	return getDataElement("label", mNavData)
end handler

private handler setNavLabels(in pLabels as String)
	setDataElement("label", pLabels, defaultNavArray(), mNavData)
end handler

private handler setShowNavIcons(in pShowIcons as Boolean)
	put pShowIcons into mShowNavIcons
	recalculateRects()
	redraw all
end handler

private handler getSelectedNavItem() returns String
	if mSelectedNavItem > 0 then
		return mNavData[mSelectedNavItem]["name"]
	end if

	return ""
end handler

private handler setSelectedNavItem(in pItem as String)
	variable tElement as Array
	variable tCount as Integer
	put 0 into tCount
	repeat for each element tElement in mNavData
		add 1 to tCount
		if tElement["name"] is pItem then
			put tCount into mSelectedNavItem
			redraw all
			return
		end if
	end repeat
	put 1 into mSelectedNavItem
	redraw all
end handler

private handler setSelectedNavIndex(in pIndex as Integer)
	if pIndex is not mSelectedNavItem then
		if 0 < pIndex and pIndex <= the number of elements in mNavData then
			put pIndex into mSelectedNavItem
			post "navSelected" with [mNavData[pIndex]["name"]]
			redraw all
		else
			put 0 into mSelectedNavItem
		end if
	end if
end handler

private handler setSelectedNavColor(in pColor as String)
	put pColor into mSelectedNavColor
	redraw all
end handler

private handler getNavBarRight() returns Real
	if the number of elements in mTabRects > 0 then
		return the right of the tail of mTabRects
	end if

	return 0
end handler

--------------------------------------------------------------------------------
--
--		Action data handling
--
--------------------------------------------------------------------------------

private handler defaultActionArray() returns Array
	variable tArray as Array
	put the empty array into tArray
	put kDefaultActionName into tArray["name"]
	put kDefaultActionLabel into tArray["label"]
	put kDefaultActionIcon into tArray["icon"]
	put the empty array into tArray["menu"]
	put "true" into tArray["enabled"]
	return tArray
end handler

private handler getActionData() returns Array
	return listToArray(mActionData)
end handler

private handler setActionData(in pActions as Array)
	setData(pActions, defaultActionArray(), mActionData)
end handler

public handler setShowActionIcons(in pShowIcons as Boolean)
	put pShowIcons into mShowActionIcons
	recalculateRects()
	redraw all
end handler

private handler getActionNames() returns String
	return getDataElement("name", mActionData)
end handler

private handler setActionNames(in pNames as String)
	setPrimaryDataElement("name", pNames, defaultActionArray(), mActionData)
end handler

private handler getActionIcons() returns String
	return getDataElement("icon", mActionData)
end handler

private handler setActionIcons(in pIcons as String)
	setDataElement("icon", pIcons, defaultActionArray(), mActionData)
end handler

private handler getActionLabels() returns String
	return getDataElement("label", mActionData)
end handler

private handler setActionLabels(in pLabels as String)
	setDataElement("label", pLabels, defaultActionArray(), mActionData)
end handler

private handler measureIcon(in pPath as String) returns Rectangle
	variable tPath as Path
	put path pPath into tPath
	return the bounding box of tPath
end handler

end widget
