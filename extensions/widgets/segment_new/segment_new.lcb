/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
Description: This widget is a segmented control.
A segmented control is a horizontal control that is made up of multiple segments, where each segment functions as a discrete button.
*/

-- declaring extension as widget, followed by identifier
widget com.livecode.extensions.livecode.segmented
--

-- adding metadata to ensure the extension displays correctly in livecode
metadata title is "Segmented"
metadata author is "Georgia Hutchings"
metadata version is "1.0.0"
--

-- dependency declarations
use com.livecode.canvas
use com.livecode.widget
use com.livecode.engine
--

-- property declarations
property segmentStyle 		get mStyle				set setStyle
property multiSelect		get mMultiSelect		set setMultiSelect		

property segmentNames		get getSegmentNames		set setSegmentNames
property segmentLabels		get getSegmentLabels	set setSegmentLabels
property segmentIcons		get getSegmentIcons		set setSegmentIcons	
property selectedIcons		get getSelectedIcons	set setSelectedIcons

property segmentDisplay		get mSegmentDisplay		set setSegmentDisplay
property segmentMinWidth	get getSegmentMinWidth	set setSegmentMinWidth
property selectedSegment	get getSelectedSegment	set setSelectedSegment	
--

-- property metadata
metadata segmentStyle.editor 		is "com.livecode.pi.enum"
metadata segmentStyle.options 		is "segment,bar"
metadata segmentStyle.default		is "segment"
metadata multiSelect.editor			is "com.livecode.pi.boolean"
metadata multiSelect.default		is "false"

metadata segmentNames.editor		is "com.livecode.pi.string"
metadata segmentNames.default		is "segment1,segment2,segment3"
metadata segmentLabels.editor 		is "com.livecode.pi.string"
metadata segmentLabels.default		is "Title,Title,Title"
metadata segmentIcons.editor		is "com.livecode.pi.string"
metadata segmentIcons.default		is "f036,f037,f038"
metadata selectedIcons.editor		is "com.livecode.pi.string"
metadata selectedIcons.default		is "f036,f037,f038"

metadata segmentDisplay.editor		is "com.livecode.pi.enum"
metadata segmentDisplay.options		is "text,icon"
metadata segmentDisplay.default		is "text"
metadata segmentMinWidth.editor		is "com.livecode.pi.string"
metadata segmentMinWidth.default 	is "30,30,30"
metadata selectedSegment.editor		is "com.livecode.pi.string"
metadata selectedSegment.default	is "1"
--

-- private instance variables
--properties
private variable mStyle				as String
private variable mMultiSelect		as Boolean

private variable mSegmentNames		as List
private variable mSegmentLabels		as List
private variable mSegmentIcons		as List
private variable mSelectedIcons		as List

private variable mSegmentDisplay	as String
private variable mSegmentMinWidth	as List
private variable mSelectedSegments	as List

--variables
private variable mGeometryIsChanged	as Boolean
private variable mNumSegments		as Integer
private variable mLeft				as Real

private variable mPerimeter			as Path
private variable mLines				as List			-- list of line paths
private variable mRadius			as Real
--

-- constants
constant kIconSize is 16
constant kTextSize is 13
--

----------
-- this handler is called when the widget is saved
public handler OnSave(out rProperties as Array)
	put the empty array into rProperties
	
	put mStyle				into rProperties["style"]
	put mMultiSelect		into rProperties["multiSelect"]
	put mSegmentNames		into rProperties["segmentNames"]
	put mSegmentLabels		into rProperties["segmentLabels"]
	put mSegmentIcons		into rProperties["segmentIcons"]
	put mSelectedIcons		into rProperties["selectedIcons"]
	put mSegmentDisplay		into rProperties["segmentDisplay"]
	put mSegmentMinWidth	into rProperties["segmentMinWidth"]	
	put mSelectedSegments	into rProperties["selectedSegment"]
	
	return rProperties
end handler
----------

----------
-- this handler is called when the widget is created
public handler OnLoad(in pProperties as Array)
	
	put pProperties["style"]			into mStyle
	put pProperties["multiSelect"]		into mMultiSelect
	put pProperties["segmentNames"]		into mSegmentNames
	put pProperties["segmentLabels"]	into mSegmentLabels
	put pProperties["segmentIcons"]		into mSegmentIcons
	put pProperties["selectedIcons"]	into mSelectedIcons
	put pProperties["segmentDisplay"]	into mSegmentDisplay
	put pProperties["segmentMinWidth"]	into mSegmentMinWidth
	put pProperties["selectedSegment"]	into mSelectedSegments
	
end handler
----------

----------
-- this handler is called when the widget is created
public handler OnCreate()
	
	-- properties
	put "segment" into mStyle
	put false into mMultiSelect
	
	put ["segment1","segment2","segment3"] into mSegmentNames
	put ["Title","Title","Title"] into mSegmentLabels
	put ["f036","f037","f038"] into mSegmentIcons
	put ["f036","f037","f038"] into mSelectedIcons
	
	put "icon" into mSegmentDisplay
	put [30,30,30] into mSegmentMinWidth
	put [1] into mSelectedSegments
	--
	
	-- variables
	put true into mGeometryIsChanged
	put (the number of elements in mSegmentNames) into mNumSegments
	put 0 into mLeft
	put the empty path into mPerimeter
	put the empty list into mLines
	put 0 into mRadius
	--
	
end handler
----------

----------
-- this handler is called whenever LiveCode needs to redraw the widget
public handler OnPaint()
	
	put (the number of elements in mSegmentNames) into mNumSegments 
	
	if mGeometryIsChanged then
		-- update mPerimeter and mLines variables if the geometry has changed
		put (the trunc of my height)/5 into mRadius
		updatePerimeter()
		updateLines()
	end if
	
	drawSegments()
	
	-- draw the lines to separate the segments
	set the antialias of this canvas to false
	set the stroke width of this canvas to 1
	set the paint of this canvas to fetchPaint("lines")
	
	variable tLine
	repeat for each element tLine in mLines
		stroke tLine on this canvas
	end repeat
	
	set the antialias of this canvas to true
	--
	
	-- draw the perimeter of the control
	set the paint of this canvas to fetchPaint("lines")
	set the stroke width of this canvas to 1
	stroke mPerimeter on this canvas
	--
	
	put false into mGeometryIsChanged
end handler
----------

----------
-- this handler is called whenever the geometry is changed
public handler OnGeometryChanged()
	put true into mGeometryIsChanged
end handler
----------

----------
-- this handler is called when the mouse is clicked
public handler OnClick(in pXLoc as Integer, in pYLoc as Integer, in pMouseButton as Integer, in pClicks as Integer)
	
	variable tX as Integer
	variable tLabel as String
	variable tSegment
	variable tCount as Integer
	 
	if mMultiSelect is false then
		-- if cannot multiselect, then need to select the clicked-on segment and deselect the currently selected segment
		-- if the clicked-on segment is already selected, then do nothing
	
		if the click position is not within fetchBounds(element 1 of mSelectedSegments) then
			repeat with tX from 1 up to mNumSegments
			
				if the click position is within fetchBounds(tX) then
					
					put the empty list into mSelectedSegments
					push tX onto back of mSelectedSegments
					
					put element tX of mSegmentNames into tLabel
					post "segmentSelected" with [tLabel]
				end if
				
			end repeat	
		end if
		
	else
		-- if can multiselect, then select the clicked-on segment if it is unselected or unselect if its selected
		-- cannot deselect a segment if it is the only selected segment
		
		repeat with tX from 1 up to mNumSegments
			if the click position is within fetchBounds(tX) then
		
				variable tIsIn
				put tX is in mSelectedSegments into tIsIn
		
				if tIsIn then
					if (the number of elements in mSelectedSegments) > 1 then
				
						put 1 into tCount
						variable tElement
						repeat for each element tElement in mSelectedSegments
							if tElement = tX then
								exit repeat
							end if
							add 1 to tCount
						end repeat
					
						delete element tCount of mSelectedSegments
						put element tX of mSegmentNames into tLabel
						post "segmentUnselected" with [tLabel]
						
					end if
				else
					put element tX of mSegmentNames into tLabel
					post "segmentSelected" with [tLabel]
					push tX onto back of mSelectedSegments
						
				end if
			end if
		end repeat
	end if
	
	redraw all
end handler
----------

----------
-- this handler draws the segments
private handler drawSegments() as undefined
	
	variable tX as Integer
	variable tLabel as String
	variable tWidth as Real
	variable tIsIn as Boolean
	
	put 0 into mLeft
	set the font of this canvas to fetchFont()
	
	repeat with tX from 1 up to mNumSegments
		put fetchWidth(tX) into tWidth
		put tX is in mSelectedSegments into tIsIn
		
		if tIsIn then
	
			-- fill in the background of the selected segment(s)
			set the paint of this canvas to fetchPaint("lines")
			if tX = 1 then
				-- rounded rectangle segment
				fill rounded rectangle path of rectangle [mLeft, 0, mLeft+tWidth, my height] with radius mRadius on this canvas
				fill rectangle path of rectangle [mLeft+tWidth, 0, mLeft+tWidth*0.5, my height] on this canvas
				
			else if tX = mNumSegments then
				-- rounded rectangle segment
				fill rounded rectangle path of rectangle [mLeft, 0, mLeft+tWidth, my height] with radius mRadius on this canvas
				fill rectangle path of rectangle [mLeft, 0, mLeft+tWidth*0.5, my height] on this canvas
				
			else
				fill rectangle path of rectangle [mLeft, 0, mLeft+tWidth, my height] on this canvas
			end if
			--
			
			-- draw the label(s) in the selected segment(s)
			if mSegmentDisplay is "icon" then
				get the char with code ((element tX of mSelectedIcons) converted from base 16) 
				put the result into tLabel
			else
				put (element tX of mSegmentLabels) into tLabel
			end if
			
			set the paint of this canvas to fetchPaint("selected label")
			fill text tLabel at center of fetchLabelRect(tWidth) on this canvas
			--
		else
			
			-- draw the label(s) in the non-selected segment(s)
			if mSegmentDisplay is "icon" then
				get the char with code ((element tX of mSegmentIcons) converted from base 16) 
				put the result into tLabel
			else
				put (element tX of mSegmentLabels) into tLabel
			end if
			
			set the paint of this canvas to fetchPaint("label")	
			fill text tLabel at center of fetchLabelRect(tWidth) on this canvas
			--
			
		end if
		add tWidth to mLeft
	end repeat
	
end handler
----------

----------
-- this handler updates the mLines variable, a list of line paths that separate the segments
private handler updateLines() as undefined
	
	variable tX as Integer
	variable tWidth as Real
	variable tLeft as Real
	
	put the empty list into mLines
	
	put 0 into tLeft
	
	repeat with tX from 1 up to mNumSegments
	
		put fetchWidth(tX) into tWidth
		add tWidth to tLeft
		if tX < mNumSegments then
			push line path from point [tLeft, 0] to point [tLeft, my height] onto back of mLines
		end if
		
	end repeat
end handler
----------

----------
-- this handler updates the mPerimeter variable, a rectangle that is the perimeter of the control
private handler updatePerimeter() as undefined
	variable tRight as Real
	variable tX as Integer
	
	put 0 into tRight
	repeat with tX from 1 up to mNumSegments
	 	add fetchWidth(tX) to tRight
	end repeat
	
	put rounded rectangle path of rectangle [0.5, 0.5, (the trunc of tRight) + 0.5, (the trunc of my height) - 0.5] with radius mRadius into mPerimeter
end handler
----------

----------
-- this handler returns a path
private handler fetchPath(in pObject as String, in pInt as Integer) as Path
	
	if pObject is "border" then
		return rounded rectangle path of rectangle [0.5, 0.5, (the trunc of my width)-0.5, (the trunc of my height)-0.5] with radius 2
	end if
	
end handler
----------

----------
-- this handler returns a paint
private handler fetchPaint(in pObject as String) as Paint
	
	if pObject is "lines" then
		return solid paint with color [51/255, 153/255, 1]
		
	else if pObject is "label" then
		return solid paint with color [51/255, 153/255, 1]
		
	else if pObject is "selected label" then
		return solid paint with color [1,1,1]
	
	end if

end handler
----------

----------
-- this handler returns a font
private handler fetchFont() as Font
	
	if mSegmentDisplay is "icon" then
		return font "fontawesome" at size kIconSize
		
	else
		variable tFont as Font
		put the font of this canvas into tFont
		set the size of tFont to kTextSize
		return tFont
		
	end if
end handler
----------

----------
-- this handler returns a label rectangle
private handler fetchLabelRect(in pWidth as Real) as Rectangle
	return rectangle [mLeft, 0, mLeft + pWidth, my height]
	
end handler
----------

----------
-- this handler returns the width of a segment
private handler fetchWidth(in pSegment as Integer) as Real
	
	variable tWidth as Real
	
	if pSegment is 0 then
		return 0
	else
	
		if mSegmentDisplay is "icon" then
			put kIconSize into tWidth
		else
			put (the number of chars in element pSegment of mSegmentLabels)*(kTextSize/3)*2 into tWidth
		end if
		
		if tWidth < (element pSegment of mSegmentMinWidth) then
			put (element pSegment of mSegmentMinWidth) into tWidth
		end if
	
		return tWidth
	end if
	
end handler
----------
-- this handler returns the bounding box of a segment
private handler fetchBounds(in pSegment as Integer) as Rectangle
	
	variable tLeft as Real
	put 0 into tLeft
	
	variable tX as Integer
	repeat with tX from 1 up to pSegment-1
	 	add fetchWidth(tX) to tLeft
	end repeat
		
	variable tWidth
	put fetchWidth(pSegment) into tWidth
	
	return rectangle [tLeft, 0, tLeft + tWidth, my height]
end handler
----------

----------
-- this handler formats the segmentNames property for output in the property inspector
private handler getSegmentNames() as String

	variable tSegmentNames as String
	combine mSegmentNames with "," into tSegmentNames
	return tSegmentNames
	
end handler
----------

----------
-- this handler formats the segmentLabels property for output in the property inspector
private handler getSegmentLabels() as String
	
	variable tSegmentLabels as String
	combine mSegmentLabels with "," into tSegmentLabels
	return tSegmentLabels

end handler
----------

----------
-- this handler formats the segmentIcons property for output in the property inspector
private handler getSegmentIcons() as String
	
	variable tSegmentIcons as String
	combine mSegmentIcons with "," into tSegmentIcons
	return tSegmentIcons
	
end handler
----------

----------
-- this handler formats the selectedIcons property for output in the property inspector
private handler getSelectedIcons() as String

	variable tSelectedIcons as String
	combine mSelectedIcons with "," into tSelectedIcons
	return tSelectedIcons
	
end handler
----------

----------
-- this handler formats the selectedSegments property for output in the property inspector
private handler getSelectedSegment() as String 
	
	variable tSelected
	variable tSelectedString as String
	variable tStringList as List
	
	put the empty list into tStringList
	
	repeat for each element tSelected in mSelectedSegments
		put tSelected formatted as string into tSelectedString
		push tSelectedString onto back of tStringList
	end repeat
	
	variable tFinalString as String
	combine tStringList with "," into tFinalString
	return tFinalString
	
end handler
----------

----------
-- this handler formats the segmentMinWidths property for output in the property inspector
private handler getSegmentMinWidth() as String
		
	variable tMinWidth
	variable tMinWidthString as String
	variable tStringList as List
	
	put the empty list into tStringList
	
	repeat for each element tMinWidth in mSegmentMinWidth
		put tMinWidth formatted as string into tMinWidthString
		push tMinWidthString onto back of tStringList
	end repeat
	
	variable tFinalString as String
	combine tStringList with "," into tFinalString
	return tFinalString
	
end handler
----------

----------
-- this handler sets the style
/*
Summary: Sets the style of the control.

Parameters:
pStyle: The style of the control.

Description:
Sets the style property of the control (segmented control or bar button).
*/
private handler setStyle(in pStyle as String) as undefined
	put pStyle into mStyle
	put true into mGeometryIsChanged
	redraw all
end handler
----------

----------
-- this handler sets whether the control can have multiple segments selected
/*
Summary: Sets whether the control can have multiple segments selected

Parameters:
pCanMultiSelect:

Description:
Sets the multiSelect property of the control.
*/
private handler setMultiSelect(in pCanMultiSelect as Boolean) as undefined
	put pCanMultiSelect into mMultiSelect
end handler
----------

----------
-- this handler sets the names of the segments
/*
Summary: Sets the names of the segments.

Parameters:
pNames: A comma-delimited list of names for the segments.

Descriptions:
Sets the segmentNames property of the control; sets the names of each segment in the control.
*/
private handler setSegmentNames(in pNames as String) as undefined
	split pNames by "," into mSegmentNames
	put 1 into mSelectedSegments
	put true into mGeometryIsChanged
	redraw all
end handler
----------	

----------
-- this handler sets the labels of the segments
/*
Summary: Sets the labels of the segments.

Parameters:
pLabels: A comma-delimited list of labels for the segments.

Descriptions:
Sets the segmentLabels property of the control; sets the labels of each segment in the control.
*/
private handler setSegmentLabels(in pLabels as String) as undefined
	split pLabels by "," into mSegmentLabels
	put true into mGeometryIsChanged
	redraw all
end handler
----------

----------
-- this handler sets the icons of the segments
/*
Summary: Sets the icons of the segments.

Parameters:
pIcons: A comma-delimited list of fontawesome icons for the segments

Description:
Sets the segmentIcons property of the control; sets the icons of each segment in the control.
*/
private handler setSegmentIcons(in pIcons as String) as undefined
	replace " " with "" in pIcons
	split pIcons by "," into mSegmentIcons
	put true into mGeometryIsChanged
	redraw all
end handler
----------

----------
-- this handler sets the selected icons of the segments
/*
Summary: Sets the selected icons of the segments.

Parameters:
pSelectedIcons: A comma-delimited list of fontawesome icons.

Description:
Sets the selectedIcons property of the control; sets the selected icons of each segment in the control.
*/
private handler setSelectedIcons(in pSelectedIcons as String) as undefined
	replace " " with "" in pSelectedIcons
	split pSelectedIcons by "," into mSelectedIcons
	put true into mGeometryIsChanged
	redraw all
end handler
----------

----------
/*
Summary: Sets the segment display style.

Parameters:
pSegmentDisplay: The style of the segment display.

Description:
Sets the segmentDisplay property of the control to either icon or label.
*/
private handler setSegmentDisplay(in pSegmentDisplay as String) as undefined
	put pSegmentDisplay into mSegmentDisplay
	put true into mGeometryIsChanged
	redraw all
end handler
----------

----------
/*
Summary: Sets the minimum widths of the segments.

Parameters:
pMinWidths: A comma-delimited list of numbers.

Description:
Sets the segmentMinWidth property of the control; sets the minimum width of each segment in the control.
*/
private handler setSegmentMinWidth(in pMinWidths as String) as undefined
	put the empty list into mSegmentMinWidth
	
	variable tStringList as List
	split pMinWidths by "," into tStringList
	
	variable tStringMinWidth as String
	variable tMinWidth as Real
	repeat for each element tStringMinWidth in tStringList
		put tStringMinWidth parsed as number into tMinWidth
		push tMinWidth onto back of mSegmentMinWidth
	end repeat
		
	put true into mGeometryIsChanged
	redraw all
end handler
----------

----------
/*
Summary: Sets the selected segment.

Parameters:
pSelectedSegment: The number of the selected segment.

Description:
Sets the selectedSegment property of the control; sets the selected segment of the control
*/
private handler setSelectedSegment(in pSelectedSegment as String) as undefined
	put the empty list into mSelectedSegments
	
	variable tStringList as List
	split pSelectedSegment by "," into tStringList
	
	variable tSelectedString as String
	variable tSelected as Real
	repeat for each element tSelectedString in tStringList
		put tSelectedString parsed as number into tSelected
		push tSelected onto back of mSelectedSegments
	end repeat
	redraw all
end handler 
----------

end widget