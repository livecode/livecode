/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
Module: com.livecode.extensions.livecode.selector

Type: widget

Description: This widget is a selector. 
This widget has two properties that can be set: numSelections and selected.
*/

-- declaring extension as widget, followed by identifier
widget com.livecode.extensions.livecode.selector
--

-- adding metadata to ensure the extension displays correctly in livecode
metadata title is "Selector"
metadata author is "LiveCode"
metadata version is "1.0.2"
--

-- dependancy declarations
use com.livecode.canvas
use com.livecode.widget
use com.livecode.engine
--

-- property declarations
property totalOptions		get mNumSelections		set setNumSelections
property selectedOption		get mSelected			set setSelected

--

-- private instance variables
private variable mNumSelections		as Integer
private variable mSelected			as Integer
--

----------
-- this handler is called when the widget is saved
public handler OnSave(out rProperties as array)
	put the empty array into rProperties
	
	put mNumSelections into rProperties["numSelections"]
	put mSelected into rProperties["selected"]
	
	return rProperties
end handler
----------

----------
-- this handler is called when the widget is loaded
public handler OnLoad(in pProperties as array)
	put pProperties["numSelections"] into mNumSelections
	put pProperties["selected"] into mSelected
end handler
----------


----------
-- called when the widget is created
public handler OnCreate()
	put 5 into mNumSelections
	put 1 into mSelected
end handler
----------

----------
-- called whenever LiveCode needs to redraw the widget
public handler OnPaint()
	
	variable tCount as integer
	repeat with tCount from 1 up to mNumSelections
		
		set the paint of this canvas to getPaint("background",tCount)
		fill getPath("circle",tCount) on this canvas
			
		set the font of this canvas to font getFontName() at size (my width)/(3*mNumSelections)
		set the paint of this canvas to getPaint("labels",0)
		fill text getLabel(tCount) at center of getRect("label", tCount) on this canvas
		
	end repeat
	
end handler
----------

----------
public handler OnMouseUp()
	put getSelected() into mSelected
	redraw all
    
	post "mouseUp" with [mSelected]
end handler
----------

----------
-- this handler returns a label
private handler getLabel(in pSelection as integer) as string

	variable tLabel
	put pSelection formatted as string into tLabel
	
	if pSelection > 9 then
		return char 1 to 2 of tLabel
	else
		return the first char of tLabel
	end if
	
	--return tLabel
end handler
----------

----------
-- this handler returns a paint
private handler getPaint(in pObject as string, in pSelection as integer) as Paint
	
	if pObject is "background" then
		if pSelection is mSelected then
			return solid paint with color [51/255, 153/255, 1]
		else 
			return solid paint with color [224/255, 224/255, 224/255]
		end if
		
	else if pObject is "labels" then
		return solid paint with color [1,1,1]
	end if
	
end handler
----------

----------
-- this handler returns a path
private handler getPath(in pShape as string, in pSelection as integer) as Path
	variable tCenterX as number
	put (my width)/(2*mNumSelections) + (pSelection-1)*(my width)/mNumSelections into tCenterX
	
	if pShape is "circle" then
		return circle path centered at point [tCenterX, (my height)/2] with radius (my width)/(3*mNumSelections)
	end if

end handler
----------

----------
-- this handler returns a rectangle
private handler getRect(in pType as string, in pSelection as integer) as Rectangle
	variable tCenterX as number
	put (my width)/(2*mNumSelections) + (pSelection-1)*(my width)/mNumSelections into tCenterX
	
	if pType is "label" then
		return rectangle [tCenterX-(my width)/(3*mNumSelections), 0, tCenterX+(my width)/(3*mNumSelections),my height]
	end if
	
end handler
----------

----------
-- this handler returns the font name 
private handler getFontName() as string
	return the name of the font of this canvas
end handler
----------

----------
-- this handler returns the number of the action the mouse has clicked on
private handler getSelected() as number

	variable tZ as integer
	variable tCenter as real
	variable tDifference as real
	variable tRectangle as Rectangle
	
	repeat with tZ from 1 up to mNumSelections
		put (my width)/(2*mNumSelections) + (tZ-1)*(my width)/mNumSelections into tCenter
		put (my width)/(3*mNumSelections) into tDifference
	
		put rectangle [tCenter-tDifference, (my height/2)-tDifference, tCenter+tDifference, (my height/2)+tDifference] into tRectangle
		if the click position is within tRectangle then
			return tZ
		end if
	end repeat
		
	return mSelected
end handler
----------

----------
-- this handler sets the number of selections
/*
Summary: Sets the number of selections.

Parameters:
pSelections: The number of selections.

Description:
Sets the numSelections property.
Sets the number of options available in the selector.
*/
public handler setNumSelections(in pSelections as Integer) as undefined
	put pSelections into mNumSelections
	redraw all
end handler
----------

----------
-- this handler sets the number that is selected
/*
Summary: Sets the selected option.

Parameters:
pSelected: The number of the selected option.

Description:
Sets the selected property.
Sets the selected option to selection number pNumber.
*/
public handler setSelected(in pSelected as Integer) as undefined
	put pSelected into mSelected
	redraw all
end handler
----------

end widget