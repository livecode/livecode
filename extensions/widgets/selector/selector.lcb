/*Copyright (C) 2015 Runtime Revolution Ltd.This file is part of LiveCode.LiveCode is free software; you can redistribute it and/or modify it underthe terms of the GNU General Public License v3 as published by the FreeSoftware Foundation.LiveCode is distributed in the hope that it will be useful, but WITHOUT ANYWARRANTY; without even the implied warranty of MERCHANTABILITY orFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public Licensefor more details.You should have received a copy of the GNU General Public Licensealong with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */-- declaring extension as widget, followed by identifierwidget com.livecode.extensions.livecode.selector---- adding metadata to ensure the extension displays correctly in livecodemetadata title is "Selector"metadata author is "Georgia Hutchings"metadata version is "1.0.2"---- dependancy declarationsuse com.livecode.canvasuse com.livecode.widgetuse com.livecode.engine---- property declarationsproperty theme				get mThemeproperty numSelections		get mNumSelections		set setNumSelectionsproperty selected			get mSelected			set setSelected---- private instance variablesprivate variable mTheme				as stringprivate variable mNumSelections		as numberprivate variable mSelected			as numberprivate variable mTransparent 		as Colorprivate variable mColorWhite 		as Colorprivate variable mColorBlack 		as Colorprivate variable mColorGrey 		as Colorprivate variable mColorMacBlue 		as Color-------------- called when the widget is createdpublic handler OnCreate()	put "ios-8" into mTheme	put 5 into mNumSelections	put 0 into mSelected		put color [1.0, 1.0, 1.0, 0.0] into mTransparent	put color [1.0, 1.0, 1.0] into mColorWhite	put color [0.0, 0.0, 0.0] into mColorBlack	put color [224/255, 224/255, 224/255] into mColorGrey	put color [51/255, 153/255, 1.0] into mColorMacBlueend handler---------------------- called whenever LiveCode needs to redraw the widgetpublic handler OnPaint()		variable tCount as number	repeat with tCount from 1 up to mNumSelections				set the paint of this canvas to getPaint("background",tCount)		fill getPath("circle",tCount) on this canvas					set the font of this canvas to font getFontName() at size (my width)/(3*mNumSelections)		set the paint of this canvas to getPaint("labels",0)		fill text getLabel(tCount) at center of getRect("label", tCount) on this canvas			end repeat	end handler--------------------public handler OnMouseUp()	put getSelected() into mSelected	redraw allend handler---------------------- this handler sets the number of selectionspublic handler setNumSelections(in pNumber as number) as undefined	put pNumber into mNumSelections	redraw allend handler---------------------- this handler sets the number that is selectedpublic handler setSelected(in pNumber as number) as undefined	put pNumber into mSelected	redraw allend handler---------------------- this handler returns a labelprivate handler getLabel(in pNumber as number) as string	variable tString	variable tLabel	put pNumber formatted as string into tString		if pNumber > 9 then		put char 1 to 2 of tString into tLabel	else		put the first char of tString into tLabel	end if		return tLabelend handler---------------------- this handler returns a paintprivate handler getPaint(pObject, pNumber) as Paint		if pObject is "background" then		if pNumber is mSelected then			return solid paint with mColorMacBlue		else 			return solid paint with mColorGrey		end if			else if pObject is "labels" then		return solid paint with mColorWhite	end if	end handler---------------------- this handler returns a pathprivate handler getPath(pShape, pNumber) as Path	variable tCenterX as number	put (my width)/(2*mNumSelections) + (pNumber-1)*(my width)/mNumSelections into tCenterX		if pShape is "circle" then		return circle path centered at point [tCenterX, (my height)/2] with radius (my width)/(3*mNumSelections)	end ifend handler---------------------- this handler returns a rectangleprivate handler getRect(pType, pNumber) as Rectangle	variable tCenterX as number	put (my width)/(2*mNumSelections) + (pNumber-1)*(my width)/mNumSelections into tCenterX		if pType is "label" then		return rectangle [tCenterX-(my width)/(3*mNumSelections), 0, tCenterX+(my width)/(3*mNumSelections),my height]	end if	end handler---------------------- this handler returns the font name private handler getFontName() as string	if mTheme is "ios-8" then		return "Helvetica Neue"	end if		return the name of the font of this canvasend handler---------------------- this handler returns the number of the action the mouse has clicked onprivate handler getSelected() as number	variable tClickLoc	execute script "return the clickloc"	put the result into tClickLoc		variable tClickPoint as list	split tClickLoc by "," into tClickPoint		variable tX as number	variable tY as number	put (element 1 of tClickPoint) parsed as number - the left of my rectangle into tX	put (element 2 of tClickPoint) parsed as number - the top of my rectangle into tY	variable tPoint as Point	put point [tX,tY] into tPoint		variable tZ as number	variable tCenter as number	variable tDifference as number	variable tRectangle as Rectangle		repeat with tZ from 1 up to mNumSelections				put (my width)/(2*mNumSelections) + (tZ-1)*(my width)/mNumSelections into tCenter		put (my width)/(3*mNumSelections) into tDifference			put rectangle [tCenter-tDifference, (my height/2)-tDifference, tCenter+tDifference, (my height/2)+tDifference] into tRectangle		if tPoint is within tRectangle then			return tZ		end if	end repeat			return mSelectedend handler----------end widget