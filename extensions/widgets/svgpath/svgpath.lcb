/*
Copyright (C) 2015-2016 LiveCode Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/**
This widget displays an SVG path as an icon.  It has a default state and a
"highlighted" state.
*/
widget com.livecode.widget.svgpath
--

-- dependency declarations
use com.livecode.canvas
use com.livecode.widget
use com.livecode.engine
use com.livecode.library.iconsvg
use com.livecode.library.widgetutils

-- adding metadata to ensure the extension displays correctly in livecode
metadata title is "SVG Icon"
metadata author is "LiveCode"
metadata version is "2.1.1"
metadata svgicon is "M61.8,0H4C1.8,0,0,1.8,0,4v27.8c0,2.2,1.8,4,4,4h57.8c2.2,0,4-1.8,4-4V4C65.8,1.8,64,0,61.8,0z M20.9,25.3c-1.2,0.9-2.8,1.4-4.9,1.4c-0.8,0-1.6-0.1-2.2-0.2c-0.7-0.1-1.3-0.3-1.9-0.5c-0.1,0.2-0.3,0.4-0.5,0.5s-0.5,0.2-0.8,0.2c-0.6,0-1-0.1-1.2-0.3c-0.2-0.2-0.4-0.6-0.4-1.2l-0.1-3.2v-0.2c0-0.6,0.1-1,0.3-1.3c0.2-0.2,0.6-0.4,1.2-0.4c0.6,0,1.1,0.4,1.5,1.3c0.1,0.2,0.2,0.4,0.2,0.5c0.4,0.7,0.9,1.2,1.5,1.6c0.6,0.4,1.4,0.5,2.4,0.5c0.8,0,1.5-0.2,2-0.5c0.5-0.4,0.7-0.8,0.7-1.5c0-1-1.1-1.7-3.2-2.2c-0.6-0.1-1.1-0.3-1.5-0.4c-1.8-0.5-3-1.1-3.7-1.8c-0.7-0.7-1-1.7-1-2.9c0-1.6,0.6-2.9,1.8-3.9c1.2-1,2.7-1.5,4.6-1.5c0.6,0,1.2,0.1,1.8,0.2c0.6,0.1,1.2,0.3,1.8,0.6c0.1-0.3,0.3-0.5,0.5-0.6c0.2-0.1,0.4-0.2,0.8-0.2c0.5,0,0.9,0.1,1,0.3c0.2,0.2,0.2,0.6,0.3,1.2l0.1,2.7v0.2c0,0.5-0.1,0.9-0.3,1.1c-0.2,0.2-0.6,0.3-1.1,0.3c-0.7,0-1.1-0.4-1.5-1.1c0-0.1-0.1-0.2-0.1-0.2c-0.3-0.6-0.7-1-1.2-1.3c-0.5-0.3-1.1-0.4-1.7-0.4c-0.8,0-1.5,0.2-2,0.6s-0.8,0.9-0.8,1.5c0,0.8,1.2,1.5,3.5,2c0.4,0.1,0.7,0.1,0.9,0.2c1.8,0.4,3.1,1,3.8,1.8c0.8,0.8,1.2,1.9,1.2,3.2C22.6,23.1,22,24.4,20.9,25.3zM40.9,12.5c-0.3,0.3-0.6,0.4-1.1,0.4h-0.2l-4.2,12c-0.2,0.6-0.4,1-0.6,1.1s-0.6,0.2-1.1,0.2h-1.7c-0.8,0-1.4-0.4-1.7-1.3l0-0.1l-4.3-12h-0.2c-0.5,0-0.8-0.1-1.1-0.4s-0.4-0.6-0.4-1.1c0-0.6,0.1-0.9,0.4-1.2s0.7-0.4,1.3-0.4H30c0.6,0,1,0.1,1.3,0.4c0.3,0.2,0.4,0.6,0.4,1.2c0,0.5-0.1,0.9-0.4,1.2c-0.3,0.2-0.7,0.4-1.3,0.4h-0.4l3.3,9.8l3.4-9.8H36c-0.6,0-1-0.1-1.3-0.4c-0.3-0.2-0.4-0.6-0.4-1.2c0-0.5,0.1-0.9,0.4-1.2c0.3-0.2,0.7-0.4,1.3-0.4h3.5c0.6,0,1.1,0.1,1.3,0.4c0.3,0.2,0.4,0.6,0.4,1.2C41.3,11.9,41.2,12.2,40.9,12.5z M57.8,20.6c-0.3,0.3-0.6,0.4-1.1,0.4h-0.2v3.3v0.2c0,0.3,0,0.5-0.1,0.6s-0.2,0.2-0.4,0.4c-0.5,0.3-1.4,0.6-2.5,0.8c-1.1,0.2-2.3,0.4-3.5,0.4c-2.4,0-4.4-0.8-5.9-2.4c-1.5-1.6-2.2-3.7-2.2-6.2c0-2.5,0.8-4.5,2.3-6.2c1.5-1.6,3.4-2.5,5.8-2.5c0.6,0,1.3,0.1,1.9,0.2s1.3,0.4,2,0.7c0.2-0.3,0.4-0.6,0.6-0.7c0.2-0.1,0.4-0.2,0.7-0.2c0.5,0,0.8,0.1,1,0.4c0.2,0.2,0.3,0.6,0.3,1.2l0,3.6c0,0.6-0.1,1.1-0.3,1.3c-0.2,0.2-0.6,0.3-1.1,0.3c-0.4,0-0.7-0.1-0.9-0.3c-0.2-0.2-0.4-0.5-0.5-1C53.3,14,53,13.4,52.5,13s-1.2-0.6-2.2-0.6c-1.4,0-2.5,0.5-3.3,1.4c-0.8,1-1.1,2.3-1.1,4.2s0.4,3.2,1.2,4.2c0.8,1,1.9,1.5,3.4,1.5c0.3,0,0.7,0,1.1-0.1c0.4-0.1,0.9-0.2,1.5-0.4V21h-1.6c-0.6,0-1.1-0.1-1.3-0.3c-0.3-0.2-0.4-0.6-0.4-1.1c0-0.6,0.1-0.9,0.4-1.2s0.7-0.4,1.3-0.4h5c0.6,0,1.1,0.1,1.4,0.3s0.4,0.6,0.4,1.2C58.2,20,58.1,20.4,57.8,20.6z"
metadata _ide is "true"

private variable mPathName as String
private variable mPath as String
private variable mHilited as Boolean
private variable mMaintainAspectRatio as Boolean
-- some SVG Paths need to be flipped (all font awesome SVG paths do,
-- Illustrator SVG does not)
private variable mFlipVertically as Boolean
private variable mAngle as Real
private variable mFillRule as String
private variable mScaledWidth as Real
private variable mScaledHeight as Real


/**
Syntax:
set the foreColor of <widget> to <pColor>
get the foreColor of <widget>

Summary: Determines the color of the icon when not highlighted.

Description:
Use the <foreColor> property to set the color of the SVG path, when the icon
isn't highlighted.
*/
metadata foregroundColor.editor is "com.livecode.pi.color"
metadata foregroundColor.default is ""
metadata foregroundColor.section is "Colors"
metadata foregroundColor.label is "Normal color"

/**
Syntax:
set the hiliteColor of <widget> to <pColor>
get the hiliteColor of <widget>

Summary: Determines the color of the icon when highlighted.

Description:
Use the <hiliteColor> property to set the color of the SVG path, when the icon
is highlighted.
*/
metadata hiliteColor.editor is "com.livecode.pi.color"
metadata hiliteColor.default is ""
metadata hiliteColor.section is "Colors"
metadata hiliteColor.label is "Hilite color"

/**
Syntax:
set the iconPresetName of <widget> to <pIconName>
get the iconPresetName of <widget>

Summary: A predefined SVG icon path names.

Parameters:
pIconName: The name of the icon to display.

Example: set the iconPresetName of widget "SVG Icon" to "thumbs up"

Description:
Use the <iconPresetName> property to set the icon of the widget to one of the
predefined graphics provided by the "IconSVG" library.

You can get a list of available predefined path names by running
`put iconNames()` in the Message Box.
*/
property iconPresetName get mPathName set setPathPreset
metadata iconPresetName.editor is "com.livecode.pi.svgicon"
metadata iconPresetName.default is "Star"
metadata iconPresetName.label is "Preset"

/**
Syntax:
set the iconPath of <widget> to <pSVGPath>
get the iconPath of <widget>

Summary: The path data displayed by the SVG path widget.

Parameters:
pSVGPath: A string containing valid SVG path syntax.

Example:
-- Create a filled triangle
set the iconPath of widget "SVG Icon" to "M150 0 L75 200 L225 200 Z"

Description:
The SVG path string to be displayed by the SVG path widget.

See https://www.w3.org/TR/SVG/paths.html#PathData for the SVG path data
specification.
*/
property iconPath get mPath set setPath
metadata iconPath.editor is "com.livecode.pi.text"
metadata iconPath.label is "Path data"

/**
Syntax:
set the highlight of <widget> to {true|false}
get the highlight of <widget>

Summary: `true` if the SVG path is highlighted; `false` otherwise

Description:
Use the `highlight` property to test or control whether the SVG path is
displayed as highlighted or not.
*/
property "highlight" get mHilited set setIsHilited
metadata highlight.default is "false"
metadata highlight.label is "Hilited"

/**
Syntax:
set the maintainAspectRatio of <widget> to {true|false}
get the maintainAspectRatio of <widget>

Summary: Whether the SVG path maintains its aspect ratio when resized.

Description:
If the <maintainAspectRatio> of the SVG path is `true`, the icon will be its
maximum size within its bounds while maintaining the original ratio of width
to height. If `false`, it will stretch to fit the extent of its bounds.
*/
property maintainAspectRatio  get mMaintainAspectRatio  set setMaintainAspectRatio
metadata maintainAspectRatio.default is "true"
metadata maintainAspectRatio.label is "Fix aspect ratio"

/**
Syntax:
get the scaledWidth of <widget>

Summary: The width of the bounding rect of the SVG path, in fractional pixels.

Description:
If the <maintainAspectRatio> of the SVG path is `true`, then the <scaledWidth>
of the object will return the width of the bounding rect of the SVG path.
Otherwise, it will return the width of the widget.

Related: scaledHeight(property), maintainAspectRatio(property)
*/
property "scaledWidth" get mScaledWidth

/**
Syntax:
get the scaledHeight of <widget>

Summary: The height of the bounding rect of the SVG path, in fractional pixels.

Description:
If the <maintainAspectRatio> of the SVG path is `true`, then the <scaledHeight>
of the object will return the height of the bounding rect of the SVG path.
Otherwise, it will return the height of the widget.

Related: scaledWidth(property), maintainAspectRatio(property)
*/
property "scaledHeight" get mScaledHeight

/**
Syntax:
set the flipped of <widget> to {true|false}
get the flipped of <widget>

Summary: `true` if the SVG path is flipped top-to-bottom; `false` otherwise

Description:
When <flipped> is set to `true`, the SVG path is drawn upside down.
*/
property "flipped" get mFlipVertically set setFlipVertically
metadata flipped.default is "false"
metadata flipped.label is "Flip"

/**
Syntax:
set the angle of <widget> to <pAngle>
get the angle of <widget>

Summary: The angle of rotation of the SVG path, in degrees clockwise.

Description:
The <angle> property controls the angle of rotation of for the SVG path
around the centre of the path's bounding box.  The rotation is in clockwise
degrees.
*/
property "angle" get mAngle set setAngle
metadata angle.editor is "com.livecode.pi.number"
metadata angle.default is "0"
metadata angle.label is "Rotation"

/**
Syntax:
set the fillRule of <widget> to <pRule>
get the fillRule of <widget>

Parameters:
pRule(enum): The fill rule to be used.
- "non-zero": Fill regions encircled at least once by the path.
- "even odd": Fill regions encircled an even number of times by the path.

Summary: The fill rule to be used when rendering the SVG path.

Description:
Use the <fillRule> property to set the fill rule to be used for the widget.
You may need to adjust it to ensure that paths that cross themselves, and paths
that are made up of overlapping subpaths, are filled correctly.

The areas enclosed by the path are each filled or not filled depending on the
fill rule used and the number of times the path loops around them.  When the
path goes around a region clockwise, it adds 1 to number of encirclements.
When it goes around a region anticlockwise, it subtracs 1 from the number of
encirclements.

See https://www.w3.org/TR/SVG/painting.html#FillRuleProperty for examples of
the "non-zero" and "even odd" fill rules.
*/
property fillRule       get mFillRule      set setFillRule
metadata fillRule.editor is "com.livecode.pi.enum"
metadata fillRule.options is "non-zero,even odd"
metadata fillRule.default is "non-zero"
metadata fillRule.label is "Fill rule"
--

----------
-- called when widget is created
public handler OnCreate()
	put 0 into mAngle
	put false into mHilited
	put true into mMaintainAspectRatio
	put false into mFlipVertically
	put "non-zero" into mFillRule
	setPathPreset("Star")
end handler
----------

----------
-- this handler is called when the widget is saved
public handler OnSave(out rProperties as Array)
	put the empty array into rProperties
	put mPathName into rProperties["iconPresetName"]
	put mPath into rProperties["svg path"]
	put mHilited into rProperties["hilited"]
	put mMaintainAspectRatio into rProperties["maintain aspect ratio"]
	put mFlipVertically into rProperties["flip vertically"]
	put mAngle into rProperties["angle"]
	put mFillRule into rProperties["fillRule"]
end handler
----------

----------
-- this handler is called when the widget is loaded
public handler OnLoad(in pProperties as Array)
	put pProperties["svg path"] into mPath
	put pProperties["hilited"] into mHilited
	put pProperties["maintain aspect ratio"] into mMaintainAspectRatio
	put pProperties["flip vertically"] into mFlipVertically
	put pProperties["angle"] into mAngle
	if "iconPresetName" is among the keys of pProperties then
		put pProperties["iconPresetName"] into mPathName
	end if
	// Older SVG widgets do not have this property
	if "fillRule" is among the keys of pProperties then
		put pProperties["fillRule"] into mFillRule
	end if

	CalculateScaledSizes()
end handler
----------

----------
-- this handler is called when the widget is resized
public handler OnGeometryChanged()
	CalculateScaledSizes()
end handler
----------

----------
-- the following handlers deal with mouse events
public handler OnMouseUp()
	if the click count is 2 then
		post "mouseDoubleUp" with [the click button formatted as string]
	else
		post "mouseUp" with [the click button formatted as string]
	end if
end handler

public handler OnMouseDown()
	post "mouseDown" with [the click button formatted as string]
end handler

public handler OnMouseEnter()
	post "mouseEnter"
end handler

public handler OnMouseLeave()
	post "mouseLeave"
end handler
----------

public handler setIsHilited(in pBoolean as Boolean)
	put pBoolean into mHilited
	redraw all
end handler

public handler setMaintainAspectRatio(in pBoolean as Boolean)
	put pBoolean into mMaintainAspectRatio
	CalculateScaledSizes()
	redraw all
end handler

public handler setFlipVertically(in pBoolean as Boolean)
	put pBoolean into mFlipVertically
	redraw all
end handler

public handler setPath(in pPath as String) returns nothing
	put pPath into mPath
	put "" into mPathName
	CalculateScaledSizes()
	redraw all
end handler

public handler setPathPreset(in pPresetName as String) returns nothing
	put iconSVGPathFromName(pPresetName) into mPath
	put pPresetName into mPathName
	CalculateScaledSizes()
	redraw all
end handler

public handler setAngle(in pAngle as Number) returns nothing
	put pAngle into mAngle
	CalculateScaledSizes()
	redraw all
end handler

public handler setFillRule(in pRule as String) returns nothing
	put pRule into mFillRule
	redraw all
end handler

----------
-- called whenever LiveCode needs to redraw the widget
public handler OnPaint()
	variable tPath as Path
	put path mPath into tPath

	variable tBounds
	if mFlipVertically then
		scale tPath by [1,-1]
		translate tPath by [0, the height of the bounding box of tPath]
	end if

	if mAngle > 0 then
		rotate tPath by mAngle
	end if

	// scale to fit within widget and maintain aspect ratio
	if mMaintainAspectRatio then
		constrainPathToRect(my bounds, tPath)
	else
		scale tPath by [my width / the width of the bounding box of tPath, \
				my height / the height of the bounding box of tPath]
		put the bounding box of tPath into tBounds
		translate tPath by [the left of tBounds * -1, the top of tBounds * -1]
	end if

	if mHilited is false then
		set the paint of this canvas to my foreground paint
	else
		set the paint of this canvas to my highlight paint
	end if

	set the fill rule of this canvas to mFillRule

	fill tPath on this canvas
end handler
----------

----------
-- used in various places to calculate the scaledWidth & scaledHeight variables
private handler CalculateScaledSizes()
	//recalculate the bounding box for the path
	variable tPath as Path
	put path mPath into tPath
	if mMaintainAspectRatio then
		constrainPathToRect(my bounds, tPath)
		put the width of the bounding box of tPath into mScaledWidth
		put the height of the bounding box of tPath into mScaledHeight
	else
		put my width into mScaledWidth
		put my height into mScaledHeight
	end if
end handler
----------

end widget
