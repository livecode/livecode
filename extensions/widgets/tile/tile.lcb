widget community.livecode.buchanan.tile

use com.livecode.canvas
use com.livecode.widget
use com.livecode.engine
use com.livecode.library.iconSVG
use com.livecode.library.widgetutils

metadata title is "Tile"
metadata author is "Elanor Buchanan"
metadata version is "1.0.0"
metadata preferredSize is "200,200"

--metadata uservisible is "false"
metadata sourceColor.editor is "com.livecode.pi.color"
metadata sourceColor.default is "blue"

metadata tileLabel.editor is "com.livecode.pi.string"
metadata tileLabel.default is "Label"

metadata colorStep.editor is "com.livecode.pi.string"
metadata colorStep.default is "0"

--metadata mTileIcon.editor is "com.livecode.pi.text"
--metadata mTileIcon.default is "M 30.00,31.00 C 30.00,31.00 24.00,31.00 24.00,31.00 23.39,23.73 21.15,18.06 14.99,13.65 6.70,7.70 2.32,13.09 2.00,3.00 19.06,3.15 29.84,13.90 30.00,31.00 Z M 13.91,15.80 C 19.10,19.75 20.69,24.77 21.00,31.00 21.00,31.00 15.00,31.00 15.00,31.00 13.47,22.99 9.76,19.85 2.00,18.00 2.70,9.63 8.91,12.00 13.91,15.80 Z M 7.87,30.34 C 4.75,31.43 0.71,28.46 4.44,24.04 11.23,21.93 11.93,28.93 7.87,30.34 Z"

// Properties
--property sourceColor get mSourceColor set setSourceColor
property tileLabel get mTileLabel set setTileLabel
--property colorStep get mColorStep set setColorStep
property iconName get mIconName set setIconName
property hoverIconName get mHoverIconName set setHoverIconName
property hovering get mHover set setHover
property fgColor get mForegroundColor set setForegroundColor
property fgHoverColor get mForegroundHoverColor set setForegroundHoverColor
property bgColor get mBackgroundColor set setBackgroundColor
property bgHoverColor get mBackgroundHoverColor set setBackgroundHoverColor

//Local variables
--private variable mSourceColor as Color
private variable mTileLabel as String
--private variable mColorStep as Integer
private variable mIconName as String
private variable mIconPath as String
private variable mHoverIconName as String
private variable mHoverIconPath as String
private variable mHover as Boolean
private variable mForegroundColor as Color
private variable mForegroundHoverColor as Color
private variable mBackgroundColor as Color
private variable mBackgroundHoverColor as Color

public handler onCreate()
    --put color [0, 0, 1] into mSourceColor
    put "Label" into mTileLabel
    --put 0 into mColorStep
    put false into mHover
    put "star" into mIconName
    put "sun" into mHoverIconName
    put iconSVGPathFromName(mIconName) into mIconPath
    put iconSVGPathFromName(mHoverIconName) into mHoverIconPath

    put color [1,1,1] into mForegroundColor
    put color [0,0,0] into mForegroundHoverColor
    put color [0,0,1] into mBackgroundColor
    put color [1,1,1] into mBackgroundHoverColor
end handler

public handler OnPaint()
  variable tHeight as Real
  variable tWidth as Real
  put my width into tWidth
  put my height into tHeight

  // Tile
  variable tSquarePath as Path
  variable tBounds as Rectangle
  put rectangle path of rectangle [0, 0, tWidth, tHeight] into tSquarePath

  if mHover is true then
     set the paint of this canvas to solid paint with mBackgroundHoverColor
  else
     set the paint of this canvas to solid paint with mBackgroundColor
  end if
  fill tSquarePath on this canvas

  //Label
  if mHover is true then
     set the paint of this canvas to solid paint with mForegroundHoverColor
  else
     set the paint of this canvas to solid paint with mForegroundColor
  end if
  fill text mTileLabel at center of rectangle [0, (tHeight*0.7)-5, tWidth, tHeight-5] on this canvas

  variable tTextBounds as Rectangle
  variable tTextHeight
  variable tTextTop
  variable tTextGap

  measure mTileLabel on this canvas
  put the result into tTextBounds
  put the height of tTextBounds into tTextHeight
  put ((tHeight*0.3) - (tTextHeight))/2 into tTextGap
  put (tHeight*0.7) + (tTextGap) into tTextTop

  //Icon
  variable tIconPath as Path

  if mHover is true then
     set the paint of this canvas to solid paint with mForegroundHoverColor
     put path mHoverIconPath into tIconPath
  else
     set the paint of this canvas to solid paint with mForegroundColor
     put path mIconPath into tIconPath
  end if

  variable tIconBounds as Rectangle
  variable tIconSpace
  put the minimum of (tHeight*0.4) and (tWidth*0.4) into tIconSpace
  put rectangle [0, 0, tIconSpace, tIconSpace] into tIconBounds
  constrainPathToRect(tIconBounds, tIconPath)

  variable tIconWidth
  variable tIconHeight
  variable tIconX
  variable tIconY
  put the bounding box of tIconPath into tBounds
  put the width of tBounds into tIconWidth
  put the height of tBounds into tIconHeight
  put the left of tBounds into tIconX
  put the top of tBounds into tIconY
  --translate tIconPath by [(tWidth - tIconWidth)/2 - tIconx, ((tHeight*0.7)-tIconHeight)/2 - tIconY]
  translate tIconPath by [(tWidth - tIconWidth)/2 - tIconx, ((tTextTop)-tIconHeight)/2 - tIconY]
  fill tIconPath on this canvas
end handler

/*public handler setSourceColor(in pColor as String) returns nothing
	put stringToColor(pColor) into mSourceColor
	redraw all
end handler*/

public handler setTileLabel(in pLabel as String) returns nothing
    put pLabel into mTileLabel
    redraw all
end handler

/*public handler setColorStep(in pStep as Integer) returns nothing
    put pStep into mColorStep
    redraw all
end handler*/

/*public handler setTileIcon(in pPath as String) returns nothing
    put pPath into mTileIcon
    redraw all
end handler*/

/*public handler iconColor(in pColor as Color) returns Color
   variable tRed as Real
   variable tGreen as Real
   variable tBlue as Real
   variable tGamma as Real
   variable tLum as Real

   put the red of pColor into tRed
   put the green of pColor into tGreen
   put the blue of pColor into tBlue
   put 2.2 into tGamma

   put  (0.2126 *  (tRed^tGamma )) + (0.7152 * ( tGreen ^ tGamma)) + (0.0722 * ( tBlue ^ tGamma)) into tLum

   if tLum > 0.5 then
      return color [0, 0, 0]
   else
      return color [1, 1, 1]
   end if
end handler*/


public handler OnMouseUp()
   post "mouseUp"
end handler

public handler OnMouseDown()

end handler

public handler OnMouseMove()
	updateHover()
end handler


public handler OnMouseLeave()
	updateHover()
end handler

private handler updateHover()
	variable tPoint as Point
	put the mouse position into tPoint

	if tPoint is within my bounds then
	    put true into mHover
    else
      put false into mHover
    end if
    redraw all
end handler

/*public handler setIconPath(in pName as String) returns nothing
	put iconSVGPathFromName(pName) into mIconPath
	redraw all
end handler*/

public handler setIconName(in pName as String) returns nothing
   put iconSVGPathFromName(pName) into mIconPath
   put pName into mIconName
   redraw all
end handler

public handler setHoverIconName(in pName as String) returns nothing
   put iconSVGPathFromName(pName) into mHoverIconPath
   put pName into mHoverIconName
   redraw all
end handler

public handler setForegroundColor(in pColor as String) returns nothing
   put stringToColor(pColor) into mForegroundColor
	redraw all
end handler

public handler setForegroundHoverColor(in pColor as String) returns nothing
   put stringToColor(pColor) into mForegroundHoverColor
	redraw all
end handler

public handler setBackgroundColor(in pColor as String) returns nothing
   put stringToColor(pColor) into mBackgroundColor
	redraw all
end handler

public handler setBackgroundHoverColor(in pColor as String) returns nothing
   put stringToColor(pColor) into mBackgroundHoverColor
	redraw all
end handler

public handler setHover(in pValue as Boolean) returns nothing
   put pValue into mHover
	redraw all
end handler


/*public handler getIconPath() returns String
	return mPath
end handler*/

end widget
