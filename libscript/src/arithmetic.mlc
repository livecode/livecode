/* Copyright (C) 2003-2013 Runtime Revolution Ltd.
 
 This file is part of LiveCode.
 
 LiveCode is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License v3 as published by the Free
 Software Foundation.
 
 LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*  
This library consists of the basic arithmetic operations of standard library of LiveCode Builder.
*/

module com.livecode.arithmetic

--

public foreign handler MCArithmeticExecAddIntegerToInteger(in Value as int, inout Target as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecAddRealToReal(in Value as double, inout Target as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecAddNumberToNumber(in Value as number, inout Target as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecSubtractIntegerFromInteger(in Value as int, inout Target as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecSubtractRealFromReal(in Value as double, inout Target as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecSubtractNumberFromNumber(in Value as number, inout Target as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecMultiplyIntegerByInteger(inout Target as int, in Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecMultiplyRealByReal(inout Target as double, in Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecMultiplyNumberByNumber(inout Target as number, in Value as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecDivideIntegerByInteger(inout Target as int, in Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecDivideRealByReal(inout Target as double, in Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecDivideNumberByNumber(inout Target as number, in Value as number) as undefined binds to "<builtin>"

public foreign handler MCArithmeticEvalPlusInteger(in Operand as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalPlusReal(in Operand as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalPlusNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalMinusInteger(in Operand as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalMinusReal(in Operand as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalMinusNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCArithmeticEvalIntegerPlusInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealPlusReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberPlusNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerMinusInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealMinusReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberMinusNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerTimesInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealTimesReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberTimesNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerOverInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealOverReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberOverNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCArithmeticEvalIntegerModInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealModReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberModNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerWrapInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealWrapReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberWrapNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCArithmeticEvalIntegerIsGreaterThanInteger(in Left as int, in Right as int, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealIsGreaterThanReal(in Left as double, in Right as double, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberIsGreaterThanNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerIsGreaterThanOrEqualToInteger(in Left as int, in Right as int, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealIsGreaterThanOrEqualToReal(in Left as double, in Right as double, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberIsGreaterThanOrEqualToNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerIsLessThanInteger(in Left as int, in Right as int, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealIsLessThanReal(in Left as double, in Right as double, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberIsLessThanNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerIsLessThanOrEqualToInteger(in Left as int, in Right as int, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealIsLessThanOrEqualToReal(in Left as double, in Right as double, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberIsLessThanOrEqualToNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"

public foreign handler MCArithmeticEvalEqualToInteger(in Left as int, in Right as int, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalEqualToReal(in Left as double, in Right as double, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalEqualToNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNotEqualToInteger(in Left as int, in Right as int, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNotEqualToReal(in Left as double, in Right as double, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNotEqualToNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"

public foreign handler MCArithmeticEvalNumberFormattedAsString(in Target as number, out Value as string) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalStringParsedAsNumber(in Target as string, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCArithmeticEvalListOfStringParsedAsListOfNumber(in Target as list, out Value as list) as undefined binds to "<builtin>"

--

/*
Summary:    Adds <Value> to <Target>.
Target:     An expression that evaluates to a numeric container.
Value:      An expression that evaluates to a number.   

Example:
    variable tVar as number
    put 2 into tVar
    add 10 to tVar -- tVar contains 12

Description:
Adds the number <Value> to <Target>.

>*Note:* It is a syntax error if <Target> does not evaluate to a variable.

Tags: Math
*/

syntax AddNumberTo is statement
    "add" <Value: Expression> "to" <Target: Expression>
begin
    MCArithmeticExecAddNumberToNumber(Value, Target)
end syntax


/*
Summary:    Subtracts <Value> from <Target>.
Target:     An expression that evaluates to a numeric variable.
Value:      An expression that evaluates to a number.   

Example:
	variable tVar as real
	put 10 into tVar
	subtract 2.5 from tVar -- tVar contains 7.5

Description:
Subtracts the number <Value> from <Target>.

>*Note:* It is a syntax error if <Target> does not evaluate to a variable.

Tags: Math
*/

syntax SubtractNumberFrom is statement
    "subtract" <Value: Expression> "from" <Target: Expression>
begin
    MCArithmeticExecSubtractNumberFromNumber(Value, Target)
end syntax

/*
Summary:    Multiplies <Target> by <Value>.
Target:     An expression that evaluates to a numeric variable.
Value:      An expression that evaluates to a number.   

Example:
	variable tVar as number
	put 2 into tVar
	multiply tVar by 2 -- tVar contains 4

Description:
Multiplies the number <Target> by <Value>.

>*Note:* It is a syntax error if <Target> does not evaluate to a variable.

Tags: Math
*/

syntax MultiplyNumberBy is statement
    "multiply" <Target: Expression> "by" <Value: Expression>
begin
    MCArithmeticExecMultiplyNumberByNumber(Target, Value)
end syntax

/*
Summary:    Divides <Target> by <Value>.
Target:     An expression that evaluates to a numeric variable.
Value:      An expression that evaluates to a number.   

Example:
	variable tVar
	put 3 into tVar
	divide tVar by 2 -- tVar contains 1.5

Description:
Divides the number <Target> by <Value>.

>*Note:* It is a syntax error if <Target> does not evaluate to a variable.

Tags: Math
*/

syntax DivideNumberBy is statement
    "divide" <Target: Expression> "by" <Value: Expression>
begin
    MCArithmeticExecDivideNumberByNumber(Target, Value)
end syntax

--

/*
Summary:    Unary plus operator.
Operand:    An expression that evaluates to a number.

Returns: 	The result of evaluating <Operand>.

Example:
	variable tVar as number
	put +5 into tVar -- tVar contains 5

Description: 
The unary plus operator is a no-op on the predefined numeric types.

Tags: Math
*/

syntax PlusUnaryOperator is prefix operator with precedence 1
    "+" <Operand: Expression>
begin
    MCArithmeticEvalPlusNumber(Operand, output)
end syntax

/*
Summary:    Unary minus operator.
Operand:    An expression that evaluates to a number.

Returns: 	The negated result of evaluating <Operand>.

Example:
	variable tVar as number
	put -(5 + 4) into tVar -- tVar contains -9

Tags: Math
*/

syntax MinusUnaryOperator is prefix operator with precedence 1
    "-" <Operand: Expression>
begin
    MCArithmeticEvalMinusNumber(Operand, output)
end syntax

--

/*
Summary:    Binary plus operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns: 	The result of adding the numbers <Left> and <Right>.

Example:
	variable tVar as number
	put 5 + 4 + 3 into tVar -- tVar contains 12

Tags: Math
*/

syntax PlusOperator is left binary operator with precedence 4
    <Left: Expression> "+" <Right: Expression>
begin
    MCArithmeticEvalNumberPlusNumber(Left, Right, output)
end syntax

/*
Summary:    Binary minus operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns: 	The result of subtracting the number <Right> from <Left>.

Example:
	variable tVar as number
	put 5 - 3 - 1 into tVar -- tVar contains 1
	
Tags: Math
*/

syntax MinusOperator is left binary operator with precedence 4
    <Left: Expression> "-" <Right: Expression>
begin
    MCArithmeticEvalNumberMinusNumber(Left, Right, output)
end syntax

/*
Summary:    Binary multiplication operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns: 	The result of multiplying the numbers <Left> and <Right>.

Example:
	variable tVar as number
	put 3 * 5 into tVar -- tVar contains 15
	
Tags: Math

*/

syntax TimesOperator is left binary operator with precedence 3
    <Left: Expression> "*" <Right: Expression>
begin
    MCArithmeticEvalNumberTimesNumber(Left, Right, output)
end syntax

/*
Summary:    Binary division operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns: 	The result of dividing the number <Left> by <Right>.

Example:
	variable tVar as number
	put 3 / 5 into tVar -- tVar contains 0.6
	
Tags: Math
*/

syntax OverOperator is left binary operator with precedence 3
    <Left: Expression> "/" <Right: Expression>
begin
    MCArithmeticEvalNumberOverNumber(Left, Right, output)
end syntax

--

/*
Summary:    Mod operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns: <Left> mod <Right>.

Example:
	variable tVar as number
	put 4^((7 - 1)/2) mod 7 into tVar -- tVar contains 1
	
Description:
Returns the remainder on dividing <Left> by <Right>

*/

syntax ModOperator is neutral binary operator with precedence 3
    <Left: Expression> "mod" <Right: Expression>
begin
    MCArithmeticEvalNumberModNumber(Left, Right, output)
end syntax

/*
Summary:    Wrap operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns:		If x >= 0, then x wrap y returns ((x-1) mod abs(y)) + 1.
			If x < 0, then x wrap y returns -((x-1) mod abs(y)) + 1.
			
Example:
	variable tVar as number
	put 5 wrap 3 into tVar -- tVar contains 2

Example:
	variable tVar as number
	put -3 wrap 3 into tVar -- tVar contains -3

Description:
Use wrap to ensure the value of a variable stays within a specified range. For x,y > 0, 
successive values of x wrap y cycle through the sequence 1, 2, ..., y.

*/

syntax WrapOperator is neutral binary operator with precedence 3
    <Left: Expression> "wrap" <Right: Expression>
begin
    MCArithmeticEvalNumberWrapNumber(Left, Right, output)
end syntax

--

/*
Summary:    Greater than relation.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns: 	True if <Left> is greater than <Right>, and false otherwise.
*/

syntax NumberIsGreaterThanNumber is neutral binary operator with precedence 5
    <Left: Expression> ">" <Right: Expression>
begin
    MCArithmeticEvalNumberIsGreaterThanNumber(Left, Right, output)
end syntax

/*
Summary:    Greater than or equal to relation.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns: 	True if <Left> is greater than or equal to <Right>, and false otherwise.
*/

syntax NumberIsGreaterThanOrEqualToNumber is neutral binary operator with precedence 5
    <Left: Expression> ">=" <Right: Expression>
begin
    MCArithmeticEvalNumberIsGreaterThanOrEqualToNumber(Left, Right, output)
end syntax

/*
Summary:    Less than relation.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns: 	True if <Left> is less than <Right>, and false otherwise.

Description:

Tags: Math
*/

syntax NumberIsLessThanNumber is neutral binary operator with precedence 5
    <Left: Expression> "<" <Right: Expression>
begin
    MCArithmeticEvalNumberIsLessThanNumber(Left, Right, output)
end syntax

/*
Summary:    Less than or equal to relation.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns: 	True if <Left> is less than or equal to <Right>, and false otherwise.

Description:

Tags: Math
*/


syntax NumberIsLessThanOrEqualToNumber is neutral binary operator with precedence 5
    <Left: Expression> "<=" <Right: Expression>
begin
    MCArithmeticEvalNumberIsLessThanOrEqualToNumber(Left, Right, output)
end syntax

--

/*
Summary:    Equal to relation.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns: 	True if <Left> is equal to <Right>, and false otherwise.

Description:

Tags: Math
*/

syntax NumberIsEqualToNumber is neutral binary operator with precedence 6
    <Left: Expression> "=" <Right: Expression>
begin
    MCArithmeticEvalEqualToNumber(Left, Right, output)
end syntax

/*
Summary:    Determines if <Left> is <Right>.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns: 	True if <Left> is equal to <Right>, and false otherwise.

Description:
Identical to the <NumberIsEqualToNumber> operator.

References: NumberIsEqualToNumber (operator)

Tags: Math
*/

syntax NumberIsNumber is neutral binary operator with precedence 7
    <Left: Expression> "is" <Right: Expression>
begin
    MCArithmeticEvalEqualToNumber(Left, Right, output)
end syntax

/*
Summary:    Determines if <Left> is not <Right>.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.

Returns: 	True if <Left> is not equal to <Right>, and false otherwise.

Description:
Returns the opposite of the <NumberIsNumber> operator.

References: NumberIsNumber (operator)

Tags: Math
*/


syntax NumberIsNotNumber is neutral binary operator with precedence 7
    <Left: Expression> "is not" <Right: Expression>
begin
    MCArithmeticEvalNotEqualToNumber(Left, Right, output)
end syntax


/*
Summary:	Formats a numeric value as a string

Operand:	An expression that evaluates to a number.

Returns:	<Operand> formatted as a string.

Example:
	variable tString as string
	variable tNum as number
	put 5 into tNum
	put tNum formatted as string into tString -- tString contains "5"

Description:
Use <NumberFormattedAsString> when you want to manipulate a numeric value as text.
*/

syntax NumberFormattedAsString is postfix operator with precedence 1
    <Operand: Expression> "formatted" "as" "string"
begin
    MCArithmeticEvalNumberFormattedAsString(Operand, output)
end syntax

/*
Summary:	Parses a string as an number

Operand:	An expression that evaluates to a string.

Returns:	<Operand> parsed as a number.

Example:
	variable tString as string
	variable tNum as number
	put "5.6" into tString
	put tString parsed as number into tNum -- tNum contains 5.6

Description:
Use <StringParsedAsNumber> when you want to interpret text numerically.

>*Note:* Any input which cannot be parsed as a number will cause an error to be thrown.
*/
syntax StringParsedAsNumber is postfix operator with precedence 1
    <Operand: Expression> "parsed" "as" "number"
begin
    MCArithmeticEvalStringParsedAsNumber(Operand, output)
end syntax

/*
Summary:	Parses a list of strings as a list of numbers

Operand:	An expression that evaluates to a list of strings.

Returns:	<Operand> parsed as a list of numbers.

Example:
	variable tListOfString as list
	variable tListOfNum as list
	split "1,2,3,4" by "," into tListOfString
	put tListOfString parsed as list of number into tNum -- tListOfNum contains [ 1, 2, 3, 4 ]

Description:
Use <ListOfStringParsedAsListOfNumber> when you want to interpret pieces of text numerically.

>*Note:* Any input list which contain elements which cannot be parsed as numbers will cause an error to be thrown.
*/
syntax ListOfStringParsedAsListOfNumber is postfix operator with precedence 1
    <Operand: Expression> "parsed" "as" "list" "of" "number"
begin
    MCArithmeticEvalListOfStringParsedAsListOfNumber(Operand, output)
end syntax

end module