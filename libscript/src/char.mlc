/* Copyright (C) 2003-2013 Runtime Revolution Ltd.
 
 This file is part of LiveCode.
 
 LiveCode is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License v3 as published by the Free
 Software Foundation.
 
 LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
This library consists of the operations on chars included in the standard library of LiveCode Builder.
*/

module com.livecode.char

public foreign handler MCCharFetchCharOf(in Index as index, in Target as string, out Value as string) as undefined binds to "<builtin>"
public foreign handler MCCharStoreCharOf(in Value as string, in Index as index, inout Target as string) as undefined binds to "<builtin>"
public foreign handler MCCharFetchCharRangeOf(in Start as index, in Finish as index, in Target as string, out Value as string) as undefined binds to "<builtin>"
public foreign handler MCCharStoreCharRangeOf(in Value as string, in Start as index, in Finish as index, inout Target as string) as undefined binds to "<builtin>"

public foreign handler MCCharEvalNumberOfCharsIn(in Target as string, out Count as index) as undefined binds to "<builtin>"

public foreign handler MCCharEvalIsAmongTheCharsOf(in Needle as string, in Source as string, out Value as bool) as undefined binds to "<builtin>"

public foreign handler MCCharStoreBeforeCharOf(in Value as string, in Index as index, inout Target as string) as undefined binds to "<builtin>"
public foreign handler MCCharStoreAfterCharOf(in Value as string, in Index as index, inout Target as string) as undefined binds to "<builtin>"

public foreign handler MCCharEvalOffsetOfChars(in IsLast as bool, in Needle as string, in Target as string, out Offset as index) as undefined binds to "<builtin>"
public foreign handler MCCharEvalOffsetOfCharsBefore(in IsLast as bool, in Needle as string, in Before as index, in Target as string, out Offset as index) as undefined binds to "<builtin>"
public foreign handler MCCharEvalOffsetOfCharsAfter(in IsFirst as bool, in Needle as string, in After as index, in Target as string, out Offset as index) as undefined binds to "<builtin>"

public foreign handler MCCharEvalContains(in Source as string, in Needle as string, out Result as bool) as undefined binds to "<builtin>"
public foreign handler MCCharEvalBeginsWith(in Source as string, in Prefix as string, out Result as bool) as undefined binds to "<builtin>"
public foreign handler MCCharEvalEndsWith(in Source as string, in Suffix as string, out Result as bool) as undefined binds to "<builtin>"

public foreign handler MCCharEvalNewlineCharacter(out Value as string) as undefined binds to "<builtin>"

public foreign handler MCCharRepeatForEachChar(inout Iterator as optional pointer, out Iterand as string, in Container as string) as bool binds to "<builtin>"

--

/*
Summary:            Counts the number of chars in <Target>.

Target: 			An expression which evaluates to a string.

Returns:			The number of chars in <Target>.

Example: 			

	variable tVar as number
	variable tSource as string
	put "hello" into tString
	put the number of chars in tString into tVar
	
	variable tString as string
	put the empty string into tString	
	repeat tVar times
		put "a" after tString
	end repeat
	
	// tString contains "aaaaa"
	
Description:
>*Note:* The number of chars returns the number of codeunits of the target string. It does not perform any grapheme boundary analysis.

Tags: Strings
*/

syntax CountCharsOf is prefix operator with precedence 1
	"the" "number" "of" "chars" "in" <Target: Expression>
begin
	MCCharEvalNumberOfCharsIn(Target, output)
end syntax

--

/*

Summary:            Designates the char at index <Index> in <Target>.
Index: 				An expression which evaluates to a valid integer index of <Target>.
Target:				An expression which evaluates to a string.           

Example: 			put the empty string into char 5 of tString // Locates char 5 and removes it from tString
Example: 			get char 5 of tString // Evaluates char 5

Description:
Either locates the char at the given index for use as the target container of another operation, or evaluates the char at the given index as the source of another operation.

>*Note:* It is an error if <Index> is out of range.

Tags: Strings
*/

syntax SingletonCharOf is prefix operator with precedence 3
	"char" <Index: Expression> "of" <Target: Expression>
begin
	MCCharFetchCharOf(Index, Target, output)
	MCCharStoreCharOf(input, Index, Target)
end syntax

/*

Summary:            Designates the chars between indices <Start> and <Finish> in <Target>.

Start:              An expression which evaluates to a valid integer index of <Target>.
Finish:             An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to a string.        
                    
Example: 			put tChars into char 5 to 10 of tString // Locates chars 5 to 10 of tString and replace them with tChars
Example: 			get char 5 to 10 of tString // Evaluates chars 5 to 10

Description:
Either locates the chars between the given indices for use as the target container of another operation, or evaluates the chars at the given indices as the source of another operation.

>*Note:* It is an error if either <Start> or <Finish> are out of range.

Tags: Strings
*/

syntax RangeCharOf is prefix operator with precedence 3
	"char" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
	MCCharFetchCharRangeOf(Start, Finish, Target, output)
	MCCharStoreCharRangeOf(input, Start, Finish, Target)
end syntax

--

/*
Summary:            Determines whether <Needle> is in <Source>.
Needle: 			An expression which evaluates to a char.
Source: 			An expression which evaluates to a string.

Returns: 	True if <Needle> is among the chars of <Target>, and false otherwise.

Description:
>*Note:* It is an error if <Needle> evaluates to a string consisting of more than one char.

Tags: Strings
*/

syntax CharIsIn is neutral binary operator with precedence 1
    <Needle: Expression> "is" "in" <Source: Expression>
begin
    MCCharEvalIsAmongTheCharsOf(Needle, Source, output)
end syntax

--

/*

Summary:            Finds the first or last occurrence of <Needle> within <Target>

Needle: 			An expression which evaluates to a string.
Target: 			An expression which evaluates to a string.

Returns: 	Returns the offset of <Needle> in <Target>.

Example:
	variable tVar as number
	put the first offset of chars "art" in "cartoon" into tVar -- tVar contains 2

Example:
	variable tVar as number
	variable tFilePath as string
	put "/Users/user/Documents/file.txt" into tFilePath
	put the last offset of "/" in tFilePath into tVar
	
	variable tFileName as string
	put char 1 to tVar of tFilePath into tFileName -- tVar contains "file.txt"

Description:
The first (respectively last) offset of <Needle> in <Target> is number of chars between the first char of <Target> and the first (respectively last) occurrence of <Needle>. If neither first or last is specified, then the first offset is found. If <Needle> does not occur in <Target>, then the output is 0.

Tags: Strings
*/

syntax CharOffset is prefix operator with precedence 1
    "the" ( "first" <IsLast=false> | "last" <IsLast=true> | <IsLast=false> ) "offset" "of" ["chars"] <Needle: Expression> "in" <Target: Expression>
begin
    MCCharEvalOffsetOfChars(IsLast, Needle, Target, output)
end syntax

/*

Summary:            Finds the first or last occurrence of <Needle> after a specified index in <Target>

Needle: 			An expression which evaluates to a string.
Target: 			An expression which evaluates to a string.
After:              An expression which evaluates to a valid integer index of Target.

Returns: 	Returns the offset of <Needle> after <After> in <Target>.

Example:
	variable tVar as number
	put the offset of chars "nse" after 4 in "nonsense" into tVar -- tVar contains 2
	
Description:
The first (respectively last) offset of <Needle> in <Target> is number of chars between the first char of the substring of <Target> beginning at char <After> + 1, and the first (respectively last) occurrence of <Needle> in the substring. If neither first or last is specified, then the first offset is found. If <Needle> does not occur in the given substring of <Target>, then the output is 0.

Tags: Strings
*/

syntax CharOffsetAfter is prefix operator with precedence 1
    "the" ( "first" <IsLast=false> | "last" <IsLast=true> | <IsLast=false> ) "offset" "of" ["chars"] <Needle: Expression> "after" <After: Expression> "in" <Target: Expression>
begin
    MCCharEvalOffsetOfCharsAfter(IsLast, Needle, After, Target, output)
end syntax

/*

Summary:            Finds the first or last occurrence of <Needle> before a specified index in <Target>.

Needle: 			An expression which evaluates to a string.
Target: 			An expression which evaluates to a string.
Before:              An expression which evaluates to a valid integer index of Target.

Returns: 	Returns the offset of <Needle> before <Before> in <Target>.

Example:
	variable tVar as number
	variable tLastDot as number
	variable tAddress as string
	variable tTLD as string
	put "http://www.livecode.com/index.html" into tAddress
	put the last offset of "." in tAddress into tLastDot
	put the offset of "." before tLastDot in tAddress into tVar
	put char tVar + 1 to tVar + 3 of tAddress into tTLD -- tTLD contains "com"
	
Description:
The first (respectively last) offset of <Needle> in <Target> is number of chars between the first char of <Target>, and the first (respectively last) occurrence of <Needle> in the substring of <Target> ending at char <Before> - 1. If neither first or last is specified, then the last offset is found. If <Needle> does not occur in the given substring of <Target>, then the output is 0.

Tags: Strings
*/

syntax CharOffsetBefore is prefix operator with precedence 1
    "the" ( "first" <IsFirst=true> | "last" <IsFirst=false> | <IsFirst=false> ) "offset" "of" ["chars"] <Needle: Expression> "before" <Before: Expression> "in" <Target: Expression>
begin
    MCCharEvalOffsetOfCharsBefore(IsFirst, Needle, Before, Target, output)
end syntax


/*
Summary:            Determines whether <Source> contains <Needle>.
Needle: 			An expression which evaluates to a string.
Source: 			An expression which evaluates to a string.

Returns: 	Returns true if <Source> contains <Needle>.

Description:
<Source> contains <Needle> if and only if the chars of <Needle> occur as a subsequence of the chars of <Source>.

>*Note:* Since "" is a substring of every string, every string contains the empty string.

Tags: Strings
*/

syntax ContainsChars is neutral binary operator with precedence 1
    <Source: Expression> "contains" <Needle: Expression>
begin
    MCCharEvalContains(Source, Needle, output)
end syntax

--

/*
Summary:            Determines whether <Source> begins with <Prefix>
Prefix: 			An expression which evaluates to a string.
Source: 			An expression which evaluates to a string.

Returns: 	Returns true if <Source> begins with <Prefix>.

Example:
	variable tVar as string
	variable tResult as string
	put "abcde" into tVar
	if tVar begins with "abc" then
		put "success" into tResult
	end if	

Description:
<Source> begins with <Prefix> if and only if the chars of <Prefix> occur as an initial subsequence of the chars of <Source>.

>*Note:* Since "" is an initial substring of every string, every string begins with the empty string.

Tags: Strings
*/

syntax StringBeginsWithString is neutral binary operator with precedence 1
    <Source: Expression> "begins" "with" <Prefix: Expression>
begin
    MCCharEvalBeginsWith(Source, Prefix, output)
end syntax

/*
Summary:            Determines whether <Source> ends with <Suffix>
Suffix: 			An expression which evaluates to a string.
Source: 			An expression which evaluates to a string.

Returns: 	Returns true if <Source> ends with <Suffix>.

Example:
	variable tVar as string
	variable tResult as string
	put "abcde" into tVar
	if tVar ends with "cde" then
		put "success" into tResult
	end if	
	
Description:
<Source> ends with <Suffix> if and only if the chars of <Suffix> occur as a final subsequence of the chars of <Source>.

>*Note:* Since "" is a final substring of every string, every string ends with the empty string.

Tags: Strings
*/

syntax StringEndsWithString is neutral binary operator with precedence 1
    <Source: Expression> "ends" "with" <Suffix: Expression>
begin
    MCCharEvalEndsWith(Source, Suffix, output)
end syntax

--

/*
Summary:			The new line character

Example:
	variable tList as list
	push "line 1" onto tList
	push "line 2" onto tList
	push "line 3" onto tList
	
	variable tLines as string
	combine tList with newline into tLines -- tLines has 3 lines

Description:
Use the <newline> constant to add new lines to a string variable.

Tags: Strings
*/

syntax NewLineCharacter is expression
    "newline"
begin
    MCCharEvalNewlineCharacter(output)
end syntax

/*
Summary:        Repeat over the chars of a string
Iterand:        A string container.

Example:
	variable tString as string
	put "stressed" into tString
	
	variable tReversed as string
	variable tChar as string
	put "" into tReversed
	repeat for each char tChar in tString
		put tChar before tReversed
	end repeat

    // tReversed is "desserts"

Description:
Use repeat for each to perform an operation on each char of a string. On each iteration, the <Iterand> will contain the next char of the string being iterated over.

Tags: Strings, Control structures
*/

syntax RepeatForEachChar is iterator
    "char" <Iterand: Expression>
begin
    MCCharRepeatForEachChar(iterator, Iterand, container)
end syntax

end module