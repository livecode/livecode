/* Copyright (C) 2003-2013 Runtime Revolution Ltd.
 
 This file is part of LiveCode.
 
 LiveCode is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License v3 as published by the Free
 Software Foundation.
 
 LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
This library consists of the basic encoding operations of standard library of LiveCode Builder.
*/

module com.livecode.encoding

public foreign handler MCEncodingExecCompressUsingZlib(in Target as data) as data binds to "<builtin>"
public foreign handler MCEncodingExecDecompressUsingZlib(in Target as data) as data binds to "<builtin>"
public foreign handler MCEncodingEvalCompressedUsingZlib(in Target as data, out Result as data) as undefined binds to "<builtin>"
public foreign handler MCEncodingEvalDecompressedUsingZlib(in Target as data, out Result as data) as undefined binds to "<builtin>"
public foreign handler MCEncodingExecEncodeUsingBase64(in Target as string) as data binds to "<builtin>"
public foreign handler MCEncodingExecDecodeUsingBase64(in Target as data) as string binds to "<builtin>"
public foreign handler MCEncodingEvalEncodedUsingBase64(in Target as string, out Result as data) as undefined binds to "<builtin>"
public foreign handler MCEncodingEvalDecodedUsingBase64(in Target as data, out Result as string) as undefined binds to "<builtin>"

public foreign handler MCEncodingExecEncodeTextUsingEncodingString(in Target as string, in Encoding as string) as data binds to "<builtin>"
public foreign handler MCEncodingExecDecodeTextUsingEncodingString(in Target as data, in Encoding as string) as string binds to "<builtin>"

public foreign handler MCEncodingExecEncodeTextUsingEncodingStringWithReplacement(in Target as string, in Encoding as string, in Replacement as data) as data binds to "<builtin>"
public foreign handler MCEncodingExecDecodeTextUsingEncodingStringWithReplacement(in Target as data, in Encoding as string, in Replacement as string) as string binds to "<builtin>"

public foreign handler MCEncodingEvalTextEncodedUsingEncodingString(in Target as string, in Encoding as string, out Result as data) as undefined binds to "<builtin>"
public foreign handler MCEncodingEvalTextDecodedUsingEncodingString(in Target as data, in Encoding as string, out Result as string) as undefined binds to "<builtin>"

public foreign handler MCEncodingEvalTextEncodedUsingEncodingStringWithReplacement(in Target as string, in Encoding as string, in Replacement as data, out Result as data) as undefined binds to "<builtin>"
public foreign handler MCEncodingEvalTextDecodedUsingEncodingStringWithReplacement(in Target as data, in Encoding as string, in Replacement as string, out Result as string) as undefined binds to "<builtin>"

public foreign handler MCEncodingExecEncodeForURL(in Target as string) as string binds to "<builtin>"
public foreign handler MCEncodingExecDecodeFromURL(in Target as string) as string binds to "<builtin>"
public foreign handler MCEncodingEvalEncodedForURL(in Target as string, out Result as string) as undefined binds to "<builtin>"
public foreign handler MCEncodingEvalDecodedFromURL(in Target as string, out Result as string) as undefined binds to "<builtin>"

--

syntax EncodeValue is statement
   "the" "encoded" "of" <Target: Expression>
begin 
    //EvalEncodedOfValue(Target, output)
end syntax

syntax DecodeValue is statement
    "the" "decoded" "of" <Target: Expression>
begin 
    //EvalDecodedOfValue(Target, output)
end syntax

--

syntax CompressUsingZlib is statement
   "compress" <Target: Expression> ["using" "zlib"]
begin 
    //MCEncodingExecCompressUsingZlib(Target)
end syntax

syntax DecompressUsingZlib is statement
    "decompress" <Target: Expression> ["using" "zlib"]
begin 
    //MCEncodingExecDecompressUsingZlib(Target)
end syntax

syntax CompressedUsingZlib is postfix operator with precedence 1
   <Target: Expression> "compressed" ["using" "zlib"]
begin 
    //MCEncodingEvalCompressedUsingZlib(Target, output)
end syntax

syntax DecompressedUsingZlib is postfix operator with precedence 1
   <Target: Expression> "decompressed" ["using" "zlib"]
begin 
    //MCEncodingEvalDecompressedUsingZlib(Target, output)
end syntax

--

/*
Summary:	Encodes data using the base64 encoding scheme.

Target:		An expression which evaluates to data.

The result:	A string containing the base 64 encoded data.

Description:
The string containing the base64 encoded data can include uppercase and lowercase letters, digits, +, /, and =, but no other characters. Base64 encoded data is wrapped at 72 characters, so each line of the encoded data is 72 characters or (for the last or only line) fewer.

Tags: Encoding
*/

syntax EncodeUsingBase64 is statement
	"encode" <Target: Expression> "using" "base64"
begin
    MCEncodingExecEncodeUsingBase64(Target)
end syntax

/*
Summary:	Decodes a string encoded using the base64 encoding scheme.

Target:		An expression which evaluates to a string.

The result:	The decoded data.

Description:
Decodes a string which has been <EncodeUsingBase64|encoded using base64>

Tags: Encoding

References: EncodeUsingBase64(statement)

*/

syntax DecodeUsingBase64 is statement
	"decode" <Target: Expression> "using" "base64"
begin
    MCEncodingExecDecodeUsingBase64(Target)
end syntax

/*
Summary:	Encodes data using the base64 encoding scheme.

Target:		An expression which evaluates to data.

output:		A string containing the base64 encoded data.

Description:
The string containing the base64 encoded data can include uppercase and lowercase letters, digits, +, /, and =, but no other characters. Base64 encoded data is wrapped at 72 characters, so each line of the encoded data is 72 characters or (for the last or only line) fewer.

Tags: Encoding

*/

syntax EncodedUsingBase64 is postfix operator with precedence 1
	<Target: Expression> "encoded" "using" "base64"
begin
    MCEncodingEvalEncodedUsingBase64(Target, output)
end syntax

/*
Summary:	Decodes a string encoded using the base64 encoding scheme.

Target:		An expression which evaluates to a string.

output:		The decoded data.

Description:
Decodes a string which has been <EncodedUsingBase64|encoded using base64>.

Tags: Encoding

References: EncodedUsingBase64(statement)

*/

syntax DecodedUsingBase64 is postfix operator with precedence 1
	<Target: Expression> "decoded" "using" "base64"
begin
    MCEncodingEvalDecodedUsingBase64(Target, output)
end syntax

--

syntax EncodeUsingBinary is statement
	"encode" <Source: Expression> "using" "binary" "format" <Format: Expression> ["into" <Target: Expression>]
begin
    //ExecEncodeUsingBinary(Source, Format, Source)
    //ExecEncodeUsingBinary(Source, Format, Target)
end syntax

syntax DecodeUsingBinary is statement
   "decode" <Source: Expression> "using" "binary" "format" <Format: Expression> ["into" <Target: Expression>]
begin
   // ExecDecodeUsingBinary(Source, Format, Source)
   // ExecDecodeUsingBinary(Source, Format, Target)
end syntax

--

public foreign handler MCEncodingEvaluateTextEncoding(in pType as int, out rType as int) as undefined binds to "<builtin>"

syntax TextEncoding is phrase
	("ascii" <Encoding=0> | "cp1252" <Encoding=1> | "macroman" <Encoding=2> | "iso8859-1" <Encoding=3> | "utf-8" <Encoding=4> | "utf-16le" <Encoding=5> | "utf16be" <Encoding=6> | "utf-32le" <Encoding=7> | "utf-32be" <Encoding=8> | "utf-16" <Encoding=9> | "utf-32" <Encoding=10> | "native" <Encoding=11>)
begin
	MCEncodingEvaluateTextEncoding(Encoding, output)
end syntax

/*
Summary:        Encodes a string

Target:         An expression which evaluates to a string.
Encoding:       A string which evaluates to a <TextEncoding>.
Replacement:    A byte to output <Target> contains chars which cannot be encoded as <Encoding>.

The result:     The encoded data.

Description:
Encodes a string in the specified encoding. If the 'with <Replacement>' form is used, each char of Target that cannot be encoded using <Encoding> is replaced by the <Replacement> byte. Otherwise, if any char of <Target> cannot be encoded using <Encoding>, <The result> is undefined.

Tags: Encoding
*/

syntax EncodeText is statement
    "encode" <Target: Expression> "using" <Encoding: Expression> ["with" "replacement" <Replacement: Expression>]
begin
    MCEncodingExecEncodeTextUsingEncodingString(Target, Encoding)
    MCEncodingExecEncodeTextUsingEncodingStringWithReplacement(Target, Encoding, Replacement)
end syntax

/*
Summary:        Decodes a string

Target:         An expression which evaluates to data.
Encoding:       A string which evaluates to a <TextEncoding>.
Replacement:    A char to replace any invalid data.

The result:	The decoded data 

Description:
Decodes bytes from the specified encoding. If the 'with <Replacement>' form is used, any data in <Target> that cannot be interpreted as <Encoding>-encoded is replaced by the replacement char. Otherwise, if any data in <Target> cannot be interpreted as <Encoding>-encoded, <The result> is undefined. The latter includes invalid surrogates and single bytes when decoding using UTF-16, and less than 4 bytes when decoding using UTF-32.

Tags: Encoding

*/

syntax DecodeText is statement
    "decode" <Target: Expression> "using" <Encoding: Expression> ["with" "replacement" <Replacement: Expression>]
begin
    MCEncodingExecDecodeTextUsingEncodingString(Target, Encoding)
    MCEncodingExecDecodeTextUsingEncodingStringWithReplacement(Target, Encoding, Replacement)
end syntax

/*
Summary:	Encodes a string

Target:		An expression which evaluates to a string.
Encoding: A string which evaluates to a <TextEncoding>.
Replacement:    A byte to output <Target> contains chars which cannot be encoded as <Encoding>.

output:     The encoded data

Description:
Encodes a string in the specified encoding. If the 'with <Replacement>' form is used, each char of Target that cannot be encoded using <Encoding> is replaced by the <Replacement> byte. Otherwise, if any char of <Target> cannot be encoded using <Encoding>, undefined is returned.

Tags: Encoding
*/

syntax TextEncodeOperator is left binary operator with precedence 3
    <Target: Expression> "encoded" "using" <Encoding: Expression> ["with" "replacement" <Replacement: Expression>]
begin
    MCEncodingEvalTextEncodedUsingEncodingString(Target, Encoding, output)
    MCEncodingEvalTextEncodedUsingEncodingStringWithReplacement(Target, Encoding, Replacement, output)
end syntax

/*
Summary:	Decodes a string

Target:		An expression which evaluates to data.
Encoding: A string which evaluates to a <TextEncoding>.
Replacement:    A char to replace any invalid data.

output:     The decoded data

Description:
Decodes bytes from the specified encoding. If the 'with <Replacement>' form is used, any data in <Target> that cannot be interpreted as <Encoding>-encoded is replaced by the replacement char. Otherwise, if any data in <Target> cannot be interpreted as <Encoding>-encoded, undefined is returned.


Tags: Encoding
*/

syntax TextDecodeOperator is left binary operator with precedence 3
    <Target: Expression> "decoded" "using" <Encoding: Expression> ["with" "replacement" <Replacement: Expression>]
begin
    MCEncodingEvalTextDecodedUsingEncodingString(Target, Encoding, output)
    MCEncodingEvalTextDecodedUsingEncodingStringWithReplacement(Target, Encoding, Replacement, output)
end syntax


--

syntax EncodeForURL is statement
    "encode" <Target: Expression> "for" "URL"
begin
    //MCEncodingExecEncodeForURL(Target)
end syntax

syntax DecodeFromURL is statement
    "decode" <Target: Expression> "from" "URL"
begin
    //MCEncodingExecDecodeFromURL(Target)
end syntax

syntax EncodedForURL is postfix operator with precedence 3
    <Target: Expression> "encoded" "for" "URL"
begin
    //MCEncodingEvalEncodedForURL(Target, output)
end syntax

syntax DecodedFromURL is postfix operator with precedence 3
    <Target: Expression> "decoded" "from" "URL"
begin
   //MCEncodingEvalDecodedFromURL(Target, output)
end syntax

--

end module
