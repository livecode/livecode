/*
Copyright (C) 2014-2015 LiveCode Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/**
This module specifies the syntax definitions and bindings for
filesystem operations in LiveCode Builder.

>*Note:* This module is currently experimental and unstable.  The
>syntax is likely to change in future versions of LiveCode.
*/

module com.livecode.file

--

public foreign handler MCFileExecGetContents(in File as String, out Contents as Data) returns nothing binds to "<builtin>"
public foreign handler MCFileExecSetContents(in Contents as Data, in File as String) returns nothing binds to "<builtin>"

/**
Summary:	The data stored in a file.

File:		An expression that evaluates to a filesystem path.

Description:
The raw data stored in a file.

>*Note:* Setting the contents of a file will replace the file with a
>newly-created file with the new contents.

Tags: IO, Filesystem
*/
syntax FileContents is prefix operator with function chunk precedence
	"the" "contents" "of" "file" <File: Expression>
begin
	MCFileExecGetContents(File, output)
	MCFileExecSetContents(input, File)
end syntax

--

public foreign handler MCFileEvalCurrentDirectory(out Directory as String) returns nothing binds to "<builtin>"

/*
Summary:	The current working directory.

Description:
The current working directory of the LiveCode process.

Tags: System, Filesystem
*/
syntax CurrentDirectory is expression
	"the" "current" "directory"
begin
	MCFileEvalCurrentDirectory(output)
end syntax

--

public foreign handler MCFileExecDeleteFile(in File as String) returns nothing binds to "<builtin>"

/**
Summary:	Delete a file from the filesystem.

File:		An expression that evaluates to a filesystem path.

Description:
Deletes the specified file.  The file must exist.

Tags: IO, Filesystem
*/
syntax DeleteFile is statement
	"delete" "file" <File: Expression>
begin
	MCFileExecDeleteFile(File)
end syntax

--

public foreign handler MCFileExecCreateDirectory(in Directory as String) returns nothing binds to "<builtin>"
public foreign handler MCFileExecDeleteDirectory(in Directory as String) returns nothing binds to "<builtin>"
public foreign handler MCFileExecGetDirectoryEntries(in Directory as String, out Entries as List) returns nothing binds to "<builtin>"

/**
Summary:	Create a named directory.

Directory:	An expression that evaluates to a filesystem path.

Description:
Creates a new, empty directory.  The directory must not already exist.

Tags: IO, Filesystem
*/
syntax CreateDirectory is statement
	"create" "directory" <Directory: Expression>
begin
	MCFileExecCreateDirectory(Directory)
end syntax

/**
Summary:	Delete a directory.

Directory:	An expression that evaluates to a filesystem path.

Description:
Deletes a directory.  The directory must be empty.

Tags: IO, Filesystem
*/
syntax DeleteDirectory is statement
	"delete" "directory" <Directory: Expression>
begin
	MCFileExecDeleteDirectory(Directory)
end syntax

/**
Summary:	List the contents of a directory.

Directory:	An expression that evaluates to a filesystem path.

Description:
Returns a List containing the directory entries of a directory.  The
directory must exist.

Tags: IO, Filesystem
*/
syntax GetDirectoryEntries is prefix operator with function chunk precedence
	"the" "entries" "of" "directory" <Directory: Expression>
begin
	MCFileExecGetDirectoryEntries(Directory, output)
end syntax

--

public foreign handler MCFileEvalCommandArgumentParsedAsFile(in Argument as String, out File as String) returns nothing binds to "lcb:com.livecode.file.__IMPL.MCFileEvalCommandArgumentParsedAsFile"

/**
Summary:	Convert a command-line argument into a file path

Argument:	A command-line argument

Example:
	-- Get a list of files to process from the command line
	variable tFiles
	variable tFile
	variable tArgument
	put [] into tFiles
	repeat for each element tArgument in the command arguments
		put command argument tArgument parsed as file into tFile
		push tFile onto back of tFiles
	end repeat

Description:
Converts the command-line <Argument> to an absolute filename in
LiveCode's internal filename representation.

This transformation is specifically designed for handling paths
provided in the command-line arguments pased to the program.

**Warning:** The processing performed by this expression assumes that
the <CurrentDirectory | current working directory> has not changed
since the program was started.  If the current directory has been
changed, then the results may be incorrect.

References: CommandArguments(expression), CurrentDirectory(expression)

Tags: Filesystem, System
*/
syntax CommandArgumentParsedAsFile is expression
	"command" "argument" <Argument: Expression> "parsed" "as" "file"
begin
	MCFileEvalCommandArgumentParsedAsFile(Argument, output)
end syntax

end module
