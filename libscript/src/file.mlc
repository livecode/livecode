/*  
This module specifies the syntax definitions and bindings for file i/o operations in modular LiveCode.
*/

module com.livecode.file

public foreign type Stream binds to "kMCStreamTypeInfo"

public foreign handler MCStreamExecGetStandardOutput(out StdOut as Stream) as undefined binds to "<builtin>"
public foreign handler MCStreamExecGetStandardInput(out StdIn as Stream) as undefined binds to "<builtin>"
public foreign handler MCStreamExecGetStandardError(out StdErr as Stream) as undefined binds to "<builtin>"

public foreign handler MCFileExecGetContents(in File as string, out Contents as data) as undefined binds to "<builtin>"
public foreign handler MCFileExecSetContents(in Contents as data, in File as string) as undefined binds to "<builtin>"

public foreign handler MCFileExecOpenFileForRead(in File as string) as Stream binds to "<builtin>"
public foreign handler MCFileExecOpenFileForWrite(in Create as bool, in File as string) as Stream binds to "<builtin>"
public foreign handler MCFileExecOpenFileForUpdate(in Create as bool, in File as string) as Stream binds to "<builtin>"

public foreign handler MCFileExecReadFromStream(in Amount as uint, in Source as Stream) as data binds to "<builtin>"
public foreign handler MCFileExecWriteToStream(in Buffer as data, in Destination as Stream) as undefined binds to "<builtin>"

--

/*
Summary:	Default output stream.
Returns:	The default output stream.

Description:
The default output stream for output from the program.

In command-line programs, this is usually used to output the results
of running the program.  In CGI programs running on servers, this is
usually used to output the data to be sent to the client.

Tags: IO
*/
syntax DefaultOutputStream is expression
	"the" "output" "stream"
begin
	MCStreamExecGetStandardOutput(output)
end syntax

/*
Summary:	Default input stream.
Returns:	The default input stream.

Description:
The default input stream for input to the program.

In command-line programs, this is usually used to receive input from
the user or from other applications.  In CGI programs running on
servers, this is usually used to receive incoming data from the
client.

Tags: IO
*/
syntax DefaultInputStream is expression
	"the" "input" "stream"
begin
	MCStreamExecGetStandardInput(output)
end syntax

/*
Summary:	Default error stream.
Returns:	The default error stream.

Description:
The default error stream for diagnostic information.

In command-line programs, this is usually used to display error
messages.  In server programs, data output through this stream may be
stored in the system log, depending on the server configuration.

Tags: IO
*/
syntax DefaultErrorStream is expression
	"the" "error" "stream"
begin
	MCStreamExecGetStandardError(output)
end syntax

--

/*
Summary:	The data stored in a file.

File:		An expression that evaluates to a filename.

Description:
The raw data stored in a file.

>*Note:* Setting the contents of a file will replace the file with a
>newly-created file with the new contents.

Tags: IO
*/
syntax FileContents is prefix operator with precedence 2
	"the" "contents" "of" "file" <File: Expression>
begin
	MCFileExecGetContents(File, output)
	MCFileExecSetContents(input, File)
end syntax

--

/*
Summary:	Open a read-only file stream

File:		An expression that evaluates to a filename.

Description:
Open a stream for reading from a file.

Example:
	variable tStream
	open read only stream for file "my_file.txt"
	put the result into tStream

Tags: IO
*/
syntax OpenFileForRead is statement
    "open" "read" "only" "stream" "for" "file" <File: Expression>
begin
    MCFileExecOpenFileForRead(File)
end syntax

/*
Summary:	Open a write-only file stream

File:		An expression that evaluates to a filename.

Description:
Open a stream for writing to a file.

There are two possible behaviours when the file already exists:

* If a "new" file was requested, then no stream will be created, and
  an error will be indicated.

* Otherwise, the contents of the existing file will be deleted.

If the file doesn't exist yet, then it will always be created.

Example:
	// 1. Open a stream to a file.  It might already exist.
	variable tStream
	open write only stream for file "my_file.txt"
	put the result into tStream

	// 2. Open a stream to a *new* file.  If it already exists,
	// this will fail.
	variable tStream
	open write only stream for new file "my_file.txt"
	put the result into tStream

Tags: IO
*/
syntax OpenFileForWrite is statement
    "open" "write" "only" "stream" "for" ("new" <Create=true> | <Create=false>) "file" <File: Expression>
begin
    MCFileExecOpenFileForWrite(Create, File)
end syntax

/*
Summary:	Open a read/write file stream

File:		An expression that evaluates to a filename.

Description:
Open a stream for reading from and writing to a file.

There are two possible behaviours when the file already exists:

* If a "new" file was requested, then no stream will be created, and
  an error will be indicated.

* Otherwise, the file will be opened as normal and the existing
  contents will be preserved.

If the file doesn't exist yet, then it will always be created.

Example:
	variable tStream
	open read write stream for file "my_file.txt"
	put the result into tStream

Tags: IO
*/
syntax OpenFileForUpdate is statement
    "open" "read" "write" "stream" "for" ("new" <Create=true> | <Create=false>) "file" <File: Expression>
begin
    MCFileExecOpenFileForUpdate(Create, File)
end syntax

--

/*
Summary:	Read data from a stream.

Amount:	An expression that evaluates to a number.
Stream:	An expression that evaluates to a stream.

Description:
Read a specific amount of data from a stream.  If there is not enough
data available in the stream, fails with an error.

>*Warning:* Some streams will discard successfully-read data if there
>wasn't enough data to fully satisfy the request.  This may cause loss
>of data.

*/
syntax ReadFromStream is statement
	"read" <Amount: Expression> "bytes" "from" "stream" <Source: Expression>
begin
    MCFileExecReadFromStream(Amount, Source)
end syntax

/*
Summary:	Write data to a stream.

Buffer:	An expression that evaluates to binary data.
Stream:	An expression that evaluates to a stream.

Description:
Write some data to a stream.  If not all of the data can be written,
fails with an error.

>*Warning:* If the stream is able to accept only part of the data,
>some streams will write that part of the data and discard the rest.
>This may cause loss of data.

*/
syntax WriteToStream is statement
	"write" <Buffer: Expression> "to" "stream" <Destination: Expression>
begin
	MCFileExecWriteToStream(Buffer, Destination)
end syntax

--

end module
