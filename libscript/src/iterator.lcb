/* Copyright (C) 2016 LiveCode Ltd.
 
 This file is part of LiveCode.
 
 LiveCode is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License v3 as published by the Free
 Software Foundation.
 
 LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/**
This library provides core syntax for `repeat` loops.
*/

module com.livecode.iterator

/**
Summary: A handler type that generates values for a repeat loop.

Parameters:
xState: The generator state
xNextValue: The next value to be passed to the repeat loop

Returns: `true` if the generator can create another value, `false` otherwise.

Example:
handler GenerateFibonacci(inout xState as optional any, \
		inout xValue as optional any) returns Boolean
	if xState is nothing then
		put [0.0, 1.0] into xState
		put 1.0 into xValue
	else
		put xState[1] + xState[2] into xValue
		put [xState[2], xValue] into xState
	end if
	return true
end handler

Description:
Any handler of type <GenericIteratorFunc> can be passed to
<RepeatForEachGeneratedValue> to create values for a repeat loop.

The repeat loop will call the handler repeatedly.  On each call, the
handler must:

1. Examine <xState> and determine whether any further values can be
generated.

2. If a further value can be generated, store it in <xNextValue>,
update <xState> as necessary, and return `true`.

3. Otherwise, return `false` without modifying <xNextValue>.

The first time the handler is called, xState is set to `nothing`.

Tags: Control structures
*/
public handler type GenericIteratorFunc(inout xState as optional any, \
		inout xNextValue as optional any) returns Boolean

/* Implementation of RepeatForEachGeneratedValue */
public handler MCIteratorRepeatForGeneratedValues( \
		inout xState as optional any, inout xNextValue as optional any, \
		in pGeneratorFunc as GenericIteratorFunc) returns Boolean
	return pGeneratorFunc(xState, xNextValue)
end handler

/**
Summary: Repeat over values generated by a handler
Value: A container; type is determined by generating handler

Example:
handler GenerateFizzBuzz(inout xState as optional any, \
		inout xValue as optional any) returns Boolean
	if xState is nothing then
		put 0 into xState
	end if
	if xState is 100 then
		return false
	end if
	add 1 to xState

	if xState mod 3 is 0 and xState mod 5 is 0 then
		put "FizzBuzz" into xValue
	else if xState mod 3 is 0 then
		put "Fizz" into xValue
	else if xState mod 5 is 0 then
		put "Buzz" into xValue
	else
		put xState into xValue
	end if
	return true
end handler

handler LogFizz()
	variable tValue
	repeat for each value tValue generated in GenerateFizzBuzz
		if tValue is "Fizz" then
			log "Fizz found!"
		end if
	end repeat
end handler

Description:
Use <RepeatForEachGeneratedValue> to process each value generated by
an arbitrary generator function.  This can be useful for customized
looping structures (for example, looping over only the elements in a
list that satisfy a particular test, or when implementing a string
tokenizer).

Tags: Control structures
*/
syntax RepeatForEachGeneratedValue is iterator
	"value" <Value: Expression> "generated"
begin
	MCIteratorRepeatForGeneratedValues(iterator, Value, container)
end syntax

end module
