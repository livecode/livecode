/* Copyright (C) 2003-2013 Runtime Revolution Ltd.
 
 This file is part of LiveCode.
 
 LiveCode is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License v3 as published by the Free
 Software Foundation.
 
 LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

module com.livecode.line

public foreign handler FetchLineOf(in Index as index, in Target as string, out Value as string) as undefined binds to "<builtin>"
public foreign handler StoreLineOf(in Value as string, in Index as index, inout Target as string) as undefined binds to "<builtin>"
public foreign handler FetchLineRangeOf(in Start as index, in Finish as index, in Target as data, out Value as string) as undefined binds to "<builtin>"
public foreign handler StoreLineRangeOf(in Value as string, in Start as index, in Finish as index, inout Target as string) as undefined binds to "<builtin>"

public foreign handler EvalNumberOfLinesIn(in Target as string, out Count as index) as undefined binds to "<builtin>"

public foreign handler EvalIsAmongTheLinesOf(in Needle as string, in IsNot as bool, in Target as string, out Result as bool) as undefined binds to "<builtin>"

public foreign handler EvalOffsetOfLineIn(in Needle as string, in Target as string, out Offset as index) as undefined binds to "<builtin>"

--

syntax SingletonLineOf is prefix operator with precedence 1
	"line" <Index: Expression> "of" <Target: Expression>
begin
	FetchLineOf(Index, Target, output)
	StoreLineOf(input, Index, Target)
end syntax

syntax RangeLineOf is prefix operator with precedence 1
	"line" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
	FetchLineRangeOf(Start, Finish, Target, output)
	StoreLineRangeOf(input, Start, Finish, Target)
end syntax

syntax CountLinesOf is prefix operator with precedence 1
	"the" "number" "of" "lines" "in" <Target: Expression>
begin
	EvalNumberOfLinesIn(Target, output)
end syntax

syntax AmongLinesOf is neutral binary operator with precedence 1
	<Needle: Expression> "is" [ "not" <IsNot=true> ] "among" "the" "lines" "of" <Target: Expression>
begin
	EvalIsAmongTheLinesOf(Needle, IsNot, Target, output)
end syntax

syntax LineOffset is prefix operator with precedence 1
	"the" "offset" "of" "line" <Needle: Expression> "in" <Target: Expression>
begin
	EvalOffsetOfLineIn(Needle, Target, output)
end syntax

--

end module