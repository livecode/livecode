/*
Copyright (C) 2015-2016 LiveCode Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/**
This library provides low-level system functionality for modular
LiveCode programs.
*/

module com.livecode.system

use com.livecode.foreign

----------------------------------------------------------------
-- Platform identification
----------------------------------------------------------------

public foreign handler MCSystemExecGetOperatingSystem(out Platform as String) returns nothing binds to "<builtin>"

/**
Summary:	The operating system

Example:
	if the operating system is "linux" then
		- Platform specific-code
	end if

Description:
Returns a string describing the operating system that LiveCode is
running on.  The possible values are:

* "windows" - 32-bit and 64-bit Windows
* "mac" - Desktop OS X
* "ios" - iOS (iPhone and iPad)
* "android" - Android Linux devices
* "linux" - All other Linux platforms

Tags: System
*/
syntax OperatingSystem is expression
	"the" "operating" "system"
begin
	MCSystemExecGetOperatingSystem(output)
end syntax

public foreign handler MCSystemExecGetArchitecture(out Architecture as String) returns nothing binds to "<builtin>"
/**
Summary:    The architecture

Example:
    if the architecture is "x86_64" then
        -- Do something x86_64 specific
    end if

Description:
Returns a string describing the instruction set architecture
that is being used by the machine LiveCode is running on.
The possible values are:

* "x86" - 32-bit x86 builds
* "x86_64" - 64-bit x86 builds
* "arm" - 32-bit arm builds
* "arm64" - 64-bit arm builds
* "js" - Emscripten

Tags: System
*/
syntax Architecture is expression
    "the" "architecture"
begin
    MCSystemExecGetArchitecture(output)
end syntax

----------------------------------------------------------------
-- Exit / Quit
----------------------------------------------------------------

foreign handler __Exit(in ExitStatus as CInt) returns nothing binds to "exit"

public handler MCSystemExecQuit() returns nothing
	unsafe
		__Exit(0)
	end unsafe
end handler

public handler MCSystemExecQuitWithStatus(in Status as Number)
	unsafe
		__Exit(Status)
	end unsafe
end handler

/**
Summary:	Quit the application

Example:
	-- Quit, indicating that the application ran successfully (code 0)
	quit

	-- Quit, with a specific error code
	quit with status 42

Description:
Exit the program immediately and unconditionally, returning a status
number to the operating system.  If no status is provided, the default
value of 0 is used.

Tags: System
*/
syntax QuitWithStatus is statement
	"quit" [ "with" "status" <Status: Expression> ]
begin
	MCSystemExecQuit()
	MCSystemExecQuitWithStatus(Status)
end syntax

----------------------------------------------------------------
-- Command-line information
----------------------------------------------------------------

public foreign handler MCSystemExecGetCommandName (out CommandName as String) returns nothing binds to "<builtin>"
public foreign handler MCSystemExecGetCommandArguments (out CommandArguments as List) returns nothing binds to "<builtin>"

/**
Summary:	The command name

Example:
	-- Program that only succeeds if it's run as the "true"
	-- command.
	variable tCommand as String
	put the command name into tCommand
	if tCommand ends with "true" then
		quit with status 0
	else
		quit with status 1
	end if

Description:
Evaluates to the name that was used to execute the program, possibly
including path information.
*/
syntax CommandName is expression
	"the" "command" "name"
begin
	MCSystemExecGetCommandName(output)
end syntax

/**
Summary:	The command arguments

Example:
	-- Program that only succeeds if it's run as the "true"
	-- command.
	variable tCommand as String
	put the command name into tCommand
	if tCommand ends with "true" then
		quit with status 0
	else
		quit with status 1
	end if

Description:

Evaluates to a list of command-line arguments passed to the program.
Some arguments may not be passed in if they are "used up" by the
LiveCode run-time environment (for example, the LiveCode IDE will
detect and "use" the `-mmap` argument).

> **Note:** No filename conversion is performed on command line
> arguments, so some processing may be required before using a command
> line argument with any of the file handling syntax provided by the
> `com.livecode.file` module.
*/
syntax CommandArguments is expression
	"the" "command" "arguments"
begin
	MCSystemExecGetCommandArguments(output)
end syntax

----------------------------------------------------------------
-- System error information
----------------------------------------------------------------

public foreign handler MCSErrorReset() returns nothing binds to "<builtin>"
public foreign handler MCSystemEvalErrorCode(out Code as UInt32) returns nothing binds to "<builtin>"
public foreign handler MCSystemEvalErrorDescription(out Description as String) returns nothing binds to "<builtin>"


/**
Summary:	Clear the system error code.

Description:

Reset the system error code to its platform-dependent default ("no
error") value.

Tags: System
*/
syntax ResetSystemError is statement
	"reset" "system" "error"
begin
	MCSErrorReset()
end syntax

/**
Summary:	The system error code.

Description:

Evaluates to the current platform-dependent system error code.

- On Windows, returns the result of `GetLastError()`.

- On other platforms, returns the current value of `errno`.

> **Note:** The system error code may be modified or cleared by any
> syntax that interacts with the operating system (e.g. by performing
> input or output).  You should check the system error code as soon as
> possible after any platform operation that might fail.

Related: SystemErrorDescription

Tags: System
*/
syntax SystemErrorCode is expression
	"the" "system" "error" "code"
begin
	MCSystemEvalErrorCode(output)
end syntax

/**
Summary:	The system error description.

Description:

Evaluates to a string describing the current platform-dependent system
error code.

> **Note:** The system error code may be modified or cleared by any
> syntax that interacts with the operating system (e.g. by performing
> input or output).  You should check the system error code as soon as
> possible after any platform operation that might fail.

Related: SystemErrorCode

Tags: System
*/
syntax SystemErrorDescription is expression
	"the" "system" "error" "message"
begin
	MCSystemEvalErrorDescription(output)
end syntax

--

end module
