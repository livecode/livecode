module com.livecode.__INTERNAL._testlib

use com.livecode.foreign

----------------------------------------------------------------
-- **EXPERIMENTAL** Helper functions for testing error states
----------------------------------------------------------------

public constant ThisModule is "com.livecode.__INTERNAL._testlib"

public handler type Thunk() returns optional any

public handler MCUnitTestHandlerThrows(in pHandler as any, in pDescription as String) returns nothing
	MCUnitTestHandlerThrowsImpl(pHandler, pDescription, true, false, "")
end handler

public handler MCUnitTestHandlerThrowsBroken(in pHandler as any, in pDescription as String, in pReason as String) returns nothing
	MCUnitTestHandlerThrowsImpl(pHandler, pDescription, true, true, pReason)
end handler

public handler MCUnitTestHandlerDoesntThrow(in pHandler as any, in pDescription as String) returns nothing
	MCUnitTestHandlerThrowsImpl(pHandler, pDescription, false, false, "")
end handler

public handler MCUnitTestHandlerDoesntThrowBroken(in pHandler as any, in pDescription as String, in pReason as String) returns nothing
	MCUnitTestHandlerThrowsImpl(pHandler, pDescription, false, true, pReason)
end handler

----------------------------------------------------------------

foreign handler MCHandlerTryToInvokeWithList(in Handler as any, inout Arguments as optional List, out Result as optional any) returns optional any binds to "<builtin>"

handler MCUnitTestHandlerThrowsImpl(in pHandler as any, in pDescription as String, in pExpectThrow as Boolean, in pBroken as Boolean, in pReason as String) returns nothing

	variable tHandler as Thunk
	put pHandler into tHandler

	variable tArgList as optional List
	variable tResult as optional any
	variable tMaybeError as optional any

	put [] into tArgList

	unsafe
		put MCHandlerTryToInvokeWithList(tHandler, tArgList, tResult) into tMaybeError
	end unsafe

	variable tHasError as Boolean
	put tMaybeError is not nothing into tHasError

	if tHasError then
		test diagnostic tMaybeError
	end if
	
	variable tTestPass as Boolean
	if pExpectThrow then
		put tHasError into tTestPass
	else
		put not tHasError into tTestPass
	end if
	
	if pBroken then
		broken test pDescription when tTestPass because pReason
	else
		test pDescription when tTestPass
	end if

end handler

end module
