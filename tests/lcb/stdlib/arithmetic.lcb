/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

module com.livecode.arithmetic.tests

use com.livecode.foreign

/*
There are two distinct numeric types - integer and real. Both types can be
assigned to a slot of type number.

When performing operations on just integers, the result will always be an
integer (or an error).

When performing operations on just reals, the result will always be a real (or
an error).

When performing operations on mixed types, the result will always be a real (or
an error) with the integer being approximated by a real.

The integer representation can hold any value in the range INT_MIN up to UINT_MAX
(where INT can either be 32-bit or 64-bit internal rep depending on a compile-time
flag). It transitions from a signed integer representation to an unsigned integer
representation at INT_MAX -> INT_MAX + 1. In order to test this we use precomputed
tables.

The tables are generated by a small C program which uses an int128 type supported
by GCC and clang. It outputs a text file with each line containing the expected
results of each arithmetic operation on a pair of input values:

  <x>,<y>,<add>,<sub>,<mul>,<div>,<mod>,<wrap>

If any of the arithmetic results are missing, then it means that computation should
throw an error. The expected error will be 'numeric overflow' except for div where
the expected error will be 'divide by zero', unless y is not 0.
*/

/* Functionality tests */

foreign handler MCStringDecode(in Encoded as data, in Encoding as int, in IsExternalRep as bool, out String as string) as bool binds to "<builtin>"

private handler DecodeUTF8(in pData as data) as string
	variable tString as string
	MCStringDecode(pData, 4 /* UTF-8 */, false, tString)
	return tString
end handler

private handler type IntegerOpCallback(in pLeft as integer, in pRight as integer) as integer

private handler IntegerOpAdd(in pLeft as integer, in pRight as integer) as integer
    return pLeft + pRight
end handler

private handler IntegerOpSubtract(in pLeft as integer, in pRight as integer) as integer
    return pLeft - pRight
end handler

private handler IntegerOpMultiply(in pLeft as integer, in pRight as integer) as integer
    return pLeft * pRight
end handler

private handler IntegerOpDiv(in pLeft as integer, in pRight as integer) as integer
    return pLeft div pRight
end handler

private handler IntegerOpMod(in pLeft as integer, in pRight as integer) as integer
    return pLeft mod pRight
end handler

private handler LoadIntegerTestTable() as list
    variable tTable as list
    put the empty list into tTable

    variable tEntry as string
    get DecodeUTF8(the contents of file "./stdlib/arithmetic-tables.txt")
    split the result by newline
    repeat for each element tEntry in the result
        split tEntry by ","
        push the result onto back of tTable
    end repeat

    return tTable
end handler

private handler PerformIntegerBinaryOpTest(in pLabel as string, in pIndex as integer, in pOp as IntegerOpCallback)
    variable tTable as list
    put LoadIntegerTestTable() into tTable
    
    variable tTest as list
    repeat for each element tTest in tTable
        variable tTestLabel
        put element 1 of tTest && pLabel && element 2 of tTest && "=" && element pIndex of tTest into tTestLabel
        test diagnostic tTestLabel

        variable tX as integer
        variable tY as integer
        variable tZ as integer
        put (element 1 of tTest) parsed as number into tX
        put (element 2 of tTest) parsed as number into tY
        put (element pIndex of tTest) parsed as number into tZ

        if (element pIndex of tTest) is not empty then
            variable tActualZ
            put pOp(tX, tY) into tActualZ

            test tTestLabel when tActualZ is tZ
            if tActualZ is not tZ then
                test diagnostic "DON'T PANIC!" && (tX formatted as string) && (tY formatted as string) && (tZ formatted as string) && (tActualZ formatted as string)
            end if
        end if
    end repeat
end handler

public handler TestIntegerAdd()
    PerformIntegerBinaryOpTest("+", 3, IntegerOpAdd)
end handler

public handler TestIntegerSubtract()
    PerformIntegerBinaryOpTest("-", 4, IntegerOpSubtract)
end handler

public handler TestIntegerMultiply()
    PerformIntegerBinaryOpTest("*", 5, IntegerOpMultiply)
end handler

public handler TestIntegerDiv()
    PerformIntegerBinaryOpTest("div", 6, IntegerOpDiv)
end handler

public handler TestIntegerMod()
    PerformIntegerBinaryOpTest("mod", 7, IntegerOpMod)
end handler

/* Syntax and type related tests */

public handler TestUnarySigns()
	variable t
	put 10 into t
	test "unaryâˆ’" when -t is -10

	put -10 into t
	test "unary+" when +t is -10
end handler

public handler TestAdd()
	variable tInt as integer
	put 10 into tInt

	add 2 to tInt
	test "add (syntax, int)" when tInt = 12
	test "add (operator, int)" when tInt + 1 = 13

	add 1.9 to tInt
	test diagnostic "Expecting an error"
	broken test "add (syntax, int+real)" when tInt = 13 because "bug 14592"

	variable tReal as real
	put 10 into tReal
	add 1.9 to tReal

	test "add (syntax, real)" when tReal = 11.9
	test "add (operator, real)" when tReal + 0.2 = 12.1

	variable tNumber
	put 10 into tNumber
	add -1.9 to tNumber

	test "add (syntax, number)" when tNumber = 8.1
	test "add (operator, number)" when tNumber + -1 = 7.1
end handler

public handler TestSubtract()
	variable tInt as integer
	put 10 into tInt

	subtract 2 from tInt
	test "subtract (syntax, int)" when tInt = 8
	test "subtract (operator, int)" when tInt - -2 = 10

	subtract 1.9 from tInt
	test diagnostic "Expecting an error"
	broken test "subtract (syntax, int-real)" when tInt = 6 because "bug 14592"

	variable tReal as real
	put 10 into tReal
	subtract 1.9 from tReal

	test "subtract (syntax, real)" when tReal = 8.1
	test "subtract (operator, real)" when tReal - 0.25 = 7.85

	variable tNumber
	put 10 into tNumber
	subtract -1.9 from tNumber

	test "subtract (syntax, number)" when tNumber = 11.9
	test "subtract (operator, number)" when tNumber - 1 = 10.9
end handler

public handler TestMultiply()
	variable tInt as integer
	put 10 into tInt

	multiply tInt by 2
	test "multiply (syntax, int)" when tInt = 20
	test "multiply (operator, int)" when tInt * 2 = 40

	variable tReal as real
	put 10 into tReal
	multiply tReal by -0.5
	test "multiply (syntax, real)" when tReal = -5
	test "multiply (operator, real)" when tReal * 3.5 = -17.5

	variable tNumber
	put 10 into tNumber
	multiply tNumber by 0.5
	test "multiply (syntax, number)" when tNumber = 5
	test "multiply (operator, number)" when tNumber * 3.5 = 17.5
end handler

public handler TestDivide()
	variable tInt as integer
	put 10 into tInt

	divide tInt by 2
	test "divide (syntax, int)" when tInt = 5
	test "divide (operator, int)" when 30 / tInt = 6

	divide tInt by 2
	test diagnostic "Expecting floor"
	broken test "divide (syntax, int)" when tInt = 2 because "bug 14592"

	variable tReal as real
	put 10 into tReal
	divide tReal by -0.5
	test "divide (syntax, real)" when tReal = -20
	test "divide (operator, real)" when 50 / tReal = -2.5

	variable tNumber
	put 10 into tNumber
	divide tNumber by 0.5
	test "divide (syntax, number)" when tNumber = 20
	test "divide (operator, number)" when tNumber / 8 = 2.5
end handler

public handler TestMod()
	test "mod (+ve, +ve)" when 10 mod 3 = 1
	broken test "mod (-ve, +ve)" when -10 mod 3 = 2 because "bug 14593"
	broken test "mod (+ve, -ve)" when 10 mod -3 = -2 because "bug 14593"
	test "mod (-ve, -ve)" when -10 mod -3 = -1
end handler

public handler TestWrap()
	test "wrap (+ve, +ve)" when 5 wrap 3 = 2
	test "wrap (+ve, -ve)" when 5 wrap -3 = 2
	test "wrap (-ve, -ve)" when -5 wrap -3 = -2
	test "wrap (-ve, +ve)" when -5 wrap 3 = -2
end handler

public handler TestGreaterThan()
	test "> (int, real)" when 5.1 > 5
	test "> (real, int)" when -5 > -5.1
	test "> (equal)" when not 5.0 > 5
	test "not > (int, real)" when not 5.1 > 6
	test "not > (real, int)" when not -6 > -5.1
end handler

public handler TestGreaterThanEqual()
	test ">= (int, real)" when 5.1 >= 5
	test ">= (real, int)" when -5 >= -5.1
	test ">= (equal)" when 5.0 >= 5
	test "not >= (int, real)" when not 5.1 >= 6
	test "not >= (real, int)" when not -6 >= -5.1
end handler

public handler TestLessThan()
	test "not < (int, real)" when not 5.1 < 5
	test "not < (real, int)" when not -5 < -5.1
	test "< (equal)" when not 5.0 < 5
	test "< (int, real)" when 5.1 < 6
	test "< (real, int)" when -6 < -5.1
end handler

public handler TestLessThanEqual()
	test "not <= (int, real)" when not 5.1 <= 5
	test "not <= (real, int)" when not -5 <= -5.1
	test "<= (equal)" when 5.0 <= 5
	test "<= (int, real)" when 5.1 <= 6
	test "<= (real, int)" when -6 <= -5.1
end handler

public handler TestFormatString()
	test diagnostic "TODO -1 formatted as string (bug 14594)"
	broken test "format as string (int)" when (-1) formatted as string is "-1" because "bug 14546"

	variable t
	put (-1.0) formatted as string into t
	test diagnostic "TODO test full string, not just prefix"
	test diagnostic t
	test "format as string (real)" when t begins with "-1."
end handler

public handler TestParseString()
	test "parsed (int)" when "-1" parsed as number = -1
	test "parsed (real)" when "+1.1" parsed as number = 1.1
	test "parsed (undefined)" when "x" parsed as number is not defined

	parse "-1" as number
	test "parse (int)" when the result is -1
	parse "+1.1" as number
	test "parse (real)" when the result is 1.1
	parse "x" as number
	test "parse (undefined)" when the result is not defined
end handler

public handler TestParseStringList()
	test "parsed list" when ["-1", "+2.2"] parsed as list of number is [-1, 2.2]

	variable t
	parse ["-1", "+2.2", "x"] as list of number
	put the result into t

	test "parse list (defined)" when element 1 to 2 of t is [-1, 2.2]
	test "parse list (undefined)" when element 3 of t is not defined
end handler

end module
