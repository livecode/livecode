/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

module com.livecode.list.tests

use com.livecode.list
use com.livecode.__INTERNAL._testlib

public handler TestEmpty()
	variable t
	put the empty list into t
	test "empty (empty)" when t is empty
	test "empty (empty list)" when t is the empty list
	test "empty (empty literal)" when t is []
	test "empty (no elements)" when the number of elements in t is 0
end handler

public handler TestLiteral()
	variable t
	put [[], "x", 1, true] into t
	test "literal" when the number of elements in t is 4
end handler

public handler TestIs()
	test "is" when [[], "x", 1, true] is [[], "x", 1, true]
	test "is not" when [[], "x", 1, true] is not [[1], "x", 1, true]
end handler

handler TestHead_Empty()
	return the head of []
end handler
handler TestHead_FirstEmpty()
	return the first element of []
end handler
public handler TestHead()
	variable t
	put ["x", 1, true] into t

	test "head" when the head of t is "x"
	test "first" when the first element of t is "x"

	skip test "head (empty)" because "bug 14702"
	--MCUnitTestHandlerThrows(TestHead_Empty, "head (empty)")
	MCUnitTestHandlerThrows(TestHead_FirstEmpty, "first (empty)")
end handler

handler TestTail_Empty()
	return the tail of []
end handler
handler TestTail_LastEmpty()
	return the last element of []
end handler
public handler TestTail()
	variable t
	put ["x", 1, true] into t
	test "tail" when the tail of t
	test "last" when the last element of t

	skip test "tail (empty)" because "bug 14702"
	--MCUnitTestHandlerThrows(TestTail_Empty, "tail (empty)")
	MCUnitTestHandlerThrows(TestTail_LastEmpty, "last (empty)")
end handler

public handler TestPush()
	variable t
	put ["x", 1, true] into t

	push "y" onto t
	test "push" when the tail of t is "y"

	push "z" onto front of t
	test "push front" when the head of t is "z"

	push "w" onto back of t
	test "push back" when the tail of t is "w"

	test "push (result)" when t is ["z", "x", 1, true, "y", "w"]
end handler

handler TestPop_Empty()
	variable t
	put [] into t
	pop t
end handler
handler TestPop_FrontEmpty()
	variable t
	put [] into t
	pop front of t
end handler
handler TestPop_BackEmpty()
	variable t
	put [] into t
	pop back of t
end handler
public handler TestPop()
	variable tList
	variable tPopped

	put ["x", 1, 2, true] into tList

	pop tList into tPopped
	test "pop" when tPopped

	pop front of tList into tPopped
	test "pop front" when tPopped is "x"

	pop back of tList into tPopped
	test "pop back" when tPopped is 2

	test "pop (result)" when tList is [1]

	pop tList
	test "pop (no output)" when tList is empty

	skip test "pop (empty)" because "bug 14703"
	--MCUnitTestHandlerThrows(TestPop_Empty, "pop (empty)")
	--MCUnitTestHandlerThrows(TestPop_FrontEmpty, "pop front (empty)")
	--MCUnitTestHandlerThrows(TestPop_BackEmpty, "pop back (empty)")
end handler

public handler TestCount()
	test "count" when the number of elements in [1, 2, ["a", "b"]] is 3
end handler

public handler TestContainsELement()
	variable t
	put ["x", 1, true] into t
	test "element is in" when "x" is in t
	test "element is not in" when not [] is in t
end handler

public handler TestContainsList()
	variable t
	put ["x", 1, true, []] into t
	test "contains" when t contains ["x", 1]

	test "contains (missing)" when not t contains [1, "x"]
	test "contains (empty)" when not [] contains []

	-- Bug 14596
	test "contains (missing, overlap)" when not ["x", 1, true, ""] contains ["", true]
end handler

public handler TestBeginsWith()
	variable t
	put ["x", 1, true, []] into t
	test "begins with" when t begins with ["x", 1]
	test "begins with (missing)" when not t begins with [1, true]
	test "begins with (empty)" when t begins with []
end handler

public handler TestEndsWith()
	variable t
	put ["x", 1, true, []] into t
	test "ends with" when t ends with [true, []]
	test "ends with (missing)" when not t ends with [1, true]
	test "ends with (empty)" when t ends with []
end handler

handler TestSubscript_Zero()
	return [1][0]
end handler
handler TestSubscript_Empty()
	return [][1]
end handler
handler TestSubscript_After()
	return[1][2]
end handler
handler TestSubscript_Before()
	return[1][-2]
end handler
public handler TestSubscript()
	variable t
	put ["x", 1, true, []] into t
	test "subscript (syntax, +ve)" when element 2 of t is 1
	test "subscript (syntax, -ve)" when element -2 of t is true
	test "subscript (operator, +ve)" when t[4] is []
	test "subscript (operator, -ve)" when t[-4] is "x"
	test "subscript (operator literal)" when [4][1] is 4

	MCUnitTestHandlerThrows(TestSubscript_Zero, "subscript (operator, zero)")
	MCUnitTestHandlerThrows(TestSubscript_Empty, "subscript (operator, empty)")
	MCUnitTestHandlerThrows(TestSubscript_After, "subscript (operator, after)")
	MCUnitTestHandlerThrows(TestSubscript_Before, "subscript (operator, before)")
end handler

handler TestRange_Zero()
	return element 0 to 0 of [1]
end handler
handler TestRange_Before()
	variable t
	put element -4 to -3 of ["x", 1, true] into t
end handler
handler TestRange_After()
	return element 3 to 4 of ["x", 1, true]
end handler
public handler TestRange()
	variable t
	put ["x", 1, true, []] into t
	test "range (+ve)" when element 2 to 3 of t is [1, true]
	test "range (+ve, same)" when element 2 to 2 of t is [1]
	test "range (-ve)" when element -3 to -2 of t is [1, true]
	test "range (-ve, same)" when element -2 to -2 of t is [true]

	MCUnitTestHandlerThrows(TestRange_Zero, "range (zero)")
	MCUnitTestHandlerThrows(TestRange_After, "range (after)")
	MCUnitTestHandlerThrows(TestRange_Before, "range (before)")
end handler

handler TestDeleteSingle_Zero()
	variable t
	put ["x", 1, true, []] into t
	delete element 0 of t
end handler
handler TestDeleteSingle_Before()
	variable t
	put ["x", 1, true, []] into t
	delete element -5 of t
end handler
handler TestDeleteSingle_After()
	variable t
	put ["x", 1, true, []] into t
	delete element 5 of t
end handler
public handler TestDeleteSingle()
	variable t
	variable tTemplate
	put ["x", 1, true, []] into tTemplate

	put tTemplate into t
	delete element 3 of t
	test "delete single (+ve)" when t is ["x", 1, []]

	put tTemplate into t
	delete element -3 of t
	test "delete single (-ve)" when t is ["x", true, []]

	put tTemplate into t
	delete the first element of t
	test "delete first" when t is [1, true, []]

	put tTemplate into t
	delete the last element of t
	test "delete last" when t is ["x", 1, true]

	MCUnitTestHandlerThrows(TestDeleteSingle_Zero, "delete single (zero)")
	MCUnitTestHandlerThrows(TestDeleteSingle_Before, "delete single (before)")
	MCUnitTestHandlerThrows(TestDeleteSingle_After, "delete single (after)")
end handler

handler TestDeleteRange_Zero()
	variable t
	put ["x", 1, true, []] into t
	delete element 0 to 0 of t
end handler
handler TestDeleteRange_Before()
	variable t
	put ["x", 1, true, []] into t
	delete element -5 to -4 of t
end handler
handler TestDeleteRange_After()
	variable t
	put ["x", 1, true, []] into t
	delete element 4 to 5 of t
end handler
public handler TestDeleteRange()
	variable t
	variable tTemplate
	put ["x", 1, true, []] into tTemplate

	put tTemplate into t
	delete element 2 to 3 of t
	test "delete range (+ve)" when t is ["x", []]

	put tTemplate into t
	delete element -3 to -2 of t
	test "delete range (-ve)" when t is ["x", []]

	MCUnitTestHandlerThrows(TestDeleteRange_Zero, "delete range (zero)")
	MCUnitTestHandlerThrows(TestDeleteRange_Before, "delete range (before)")
	MCUnitTestHandlerThrows(TestDeleteRange_After, "delete range (after)")
end handler

public handler TestSplice()
	variable t
	variable tTemplate
	put [1, 1, 1, 1] into tTemplate

	put tTemplate into t
	splice [2, 2] into element 2 to 3 of t
	test "splice (+ve)" when t is [1, 2, 2, 1]

	put tTemplate into t
	splice [2, 2] into element -3 to -2 of t
	test "splice (-ve)" when t is [1, 2, 2, 1]

	put tTemplate into t
	splice [2, 2] into element 2 to 2 of t
	test "splice (+ve, same)" when t is [1, 2, 2, 1, 1]

	put tTemplate into t
	splice [2, 2] into element 2 of t
	test "splice (+ve, single)" when t is [1, 2, 2, 1, 1]

	put tTemplate into t
	splice the empty list into element 1 to 4 of t
	test "splice (+ve, empty)" when t is empty
end handler

handler TestSpliceBefore_Zero()
	variable t
	put [1] into t
	splice t before element 0 of t
end handler

handler TestSpliceAfter_Limit()
	variable t
	put [1] into t
	splice t after element 2 of t
end handler

public handler TestSpliceBefore()
	variable t
	variable tTemplate
	put [1, 1, 1, 1] into tTemplate

	put tTemplate into t
	splice [2, 2] before element 2 of t
	test "splice before" when t is [1, 2, 2, 1, 1, 1]

	put tTemplate into t
	splice the empty list before element 2 of t
	test "splice before (empty)" when t is tTemplate
	
	MCUnitTestHandlerThrows(TestSpliceBefore_Zero, "splice before (zero)")
end handler

public handler TestSpliceAfter()
	variable t
	variable tTemplate
	put [1, 1, 1, 1] into tTemplate

	put tTemplate into t
	splice [2, 2] after element 2 of t
	test "splice after" when t is [1, 1, 2, 2, 1, 1]

	put tTemplate into t
	splice the empty list after element 2 of t
	test "splice after (empty)" when t is tTemplate
	
	MCUnitTestHandlerThrows(TestSpliceAfter_Limit, "splice after (limit)")
end handler

public handler TestRepeatElement()
	variable tIter
	variable tCount

	put 0 into tCount

	repeat for each element tIter in [1, 1, 1, 1]
		test "repeat element (iter)" when tIter is 1
		add 1 to tCount
	end repeat

	test "repeat element (count)" when tCount is 4
end handler

end module
