module __VMTEST.interop_objc

use com.livecode.foreign
use com.livecode.objc
use com.livecode.__INTERNAL._testlib

---------

__safe foreign handler NSObjectAlloc() returns ObjcRetainedId binds to "objc:NSObject.+alloc"

__safe foreign handler NSNumberCreateWithInt(in pInt as CInt) returns ObjcAutoreleasedId binds to "objc:NSNumber.+numberWithInt:"
__safe foreign handler NSNumberGetIntValue(in pObj as ObjcId) returns CInt binds to "objc:NSNumber.intValue"
__safe foreign handler NSNumberCreateWithLongLong(in pInt as CLongLong) returns ObjcAutoreleasedId binds to "objc:NSNumber.+numberWithLongLong:"
__safe foreign handler NSNumberGetLongLongValue(in pObj as ObjcId) returns CLongLong binds to "objc:NSNumber.longLongValue"
__safe foreign handler NSNumberCreateWithFloat(in pInt as CFloat) returns ObjcAutoreleasedId binds to "objc:NSNumber.+numberWithFloat:"
__safe foreign handler NSNumberGetFloatValue(in pObj as ObjcId) returns CFloat binds to "objc:NSNumber.floatValue"
__safe foreign handler NSNumberCreateWithDouble(in pInt as CDouble) returns ObjcAutoreleasedId binds to "objc:NSNumber.+numberWithDouble:"
__safe foreign handler NSNumberGetDoubleValue(in pObj as ObjcId) returns CDouble binds to "objc:NSNumber.doubleValue"

---------

-- NEED TO CHECK class and instance methods, existant and non-existant
-- also protocols and superclasses.

__safe foreign handler CreateObjCObjectDoesntExist() returns ObjcId binds to "objc:NSObject.-foobar"

private handler TestObjcInterop_NonExistantObjC()
    CreateObjCObjectDoesntExist()
end handler

private handler TestObjcInterop_ExistantObjC()
	variable tObj as ObjcObject
	put NSObjectAlloc() into tObj
end handler

public handler TestObjcInterop_Binding()
	if not the operating system is in ["mac", "ios"] then
		skip test "objc binding succeeds" because "not implemented on" && the operating system
		return
	end if

  	MCUnitTestHandlerThrowsNamed(TestObjcInterop_NonExistantObjC, "livecode.lang.ForeignHandlerBindingError", "Failure to bind to non-existant objc function throws error")
  	MCUnitTestHandlerDoesntThrow(TestObjcInterop_ExistantObjC, "Binding to existant objc function does not throw error")

  	test "Non-existant objc function gives nothing as handler value" when CreateObjCObjectDoesntExist is nothing
  	test "Existant objc function gives non-nothing as handler value" when NSObjectAlloc is not nothing
end handler

---------

__safe foreign handler NSObjectGetRetainCount(in pObj as ObjcId) returns CULong binds to "objc:NSObject.-retainCount"
__safe foreign handler NSObjectGetSelf(in pObj as ObjcId) returns ObjcId binds to "objc:NSObject.-self"

public handler TestObjInterop_ObjcObjectLifetime()
	if not the operating system is in ["mac", "ios"] then
		skip test "objc binding succeeds" because "not implemented on" && the operating system
		return
	end if

	/* Test that ObjcRetainedId gives its reference to ObjcObject */
	variable tObjcObjectFromRetainedId as ObjcObject
	put NSObjectAlloc() into tObjcObjectFromRetainedId
	test "retained id into objc object doesn't retain" when NSObjectGetRetainCount(tObjcObjectFromRetainedId) is 1

	/* Test that ObjcId copies its reference to ObjcObject */
	variable tObjcObjectFromId as ObjcObject
	put NSObjectGetSelf(tObjcObjectFromRetainedId) into tObjcObjectFromId
	test "id into objc object retains" when NSObjectGetRetainCount(tObjcObjectFromId) is 2

	/* Test that ObjcAutoreleasedId copies its reference to ObjcObject */
	variable tObjcObjectFromAutoreleasedId as ObjcObject
	put NSNumberCreateWithDouble(3.14159) into tObjcObjectFromAutoreleasedId
	test "autoreleased id into objc object retains" when NSObjectGetRetainCount(tObjcObjectFromAutoreleasedId) is 2
end handler

---------

public handler TestObjInterop_RoundtripNumber()
	if not the operating system is in ["mac", "ios"] then
		skip test "objc binding succeeds" because "not implemented on" && the operating system
		return
	end if

	variable tIntObj as ObjcObject
	put NSNumberCreateWithInt(314159) into tIntObj
	test "NSNumber roundtrip CInt" when NSNumberGetIntValue(tIntObj) is 314159

	variable tLongLongObj as ObjcObject
	put NSNumberCreateWithLongLong(314159) into tLongLongObj
	test "NSNumber roundtrip CLongLong" when NSNumberGetLongLongValue(tLongLongObj) is 314159

	variable tFloatObj as ObjcObject
	put NSNumberCreateWithFloat(314159) into tFloatObj
	test "NSNumber roundtrip CFloat" when NSNumberGetFloatValue(tFloatObj) is 314159

	variable tDoubleObj as ObjcObject
	put NSNumberCreateWithDouble(314159) into tDoubleObj
	test "NSNumber roundtrip CDouble" when NSNumberGetDoubleValue(tDoubleObj) is 314159
end handler

--------

__safe foreign handler MCHandlerTryToInvokeWithList(in Handler as any, inout Arguments as optional List, out Result as optional any) returns optional any binds to "<builtin>"
__safe foreign handler NSArrayFirstObject(in pObj as ObjcId) returns ObjcId binds to "objc:NSArray.firstObject"

private handler __CallNSNumberMethodOnNSString(in pString as ObjcObject) returns optional any
	return NSArrayFirstObject(pString)
end handler

public handler TestObjcInterop_CatchObjcException()
	if not the operating system is in ["mac", "ios"] then
		skip test "objc exception handler succeeds" because "not implemented on" && the operating system
		return
	end if

	variable tArguments as List
	variable tResult as optional any
	put [ StringToNSString("foo") ] into tArguments
	test "objc exception is caught" when MCHandlerTryToInvokeWithList(__CallNSNumberMethodOnNSString, tArguments, tResult) is not nothing
end handler

---------

// NSRange is a pair of (natural sized) unsigned integers
public foreign type NSRange binds to "MCAggregateTypeInfo:pp"

// NSRange is 8 bytes on 64-bit arch, 4 bytes on 32-bit
// so will use objc_msgSend_stret on 32-bit arch, but objc_msgSend on
// 64 bit.
foreign handler RangeOfString(in pHaystack as ObjcId, in pNeedle as ObjcId) returns NSRange binds to "objc:NSString.-rangeOfString:"

public handler TestReturnNSRange()
	if not the operating system is in ["mac", "ios"] then
		skip test "return NSRange struct succeeds" because "not implemented on" && the operating system
		return
	end if
	
	variable tRange as NSRange
	unsafe
		put RangeOfString(StringToNSString("cartoon"), \
						  StringToNSString("art")) into tRange
	end unsafe
	
	variable tRangeList as List
	put tRange into tRangeList
	
	test "return NSRange struct succeeds" when \
		tRangeList is [1,3]
end handler

// NSRect is a quadruple of (natural sized) floats
public foreign type NSRect binds to "MCAggregateTypeInfo:qqqq"

foreign handler NSValueWithRect(in pRect as NSRect) returns ObjcId \
	binds to "objc:NSValue.+valueWithRect:"
	
// NSRect is 32 bytes on 64-bit arch, 16 bytes on 32-bit
// so will use objc_msgSend_stret on both archs
foreign handler NSRectFromValue(in pValue as ObjcId) returns NSRect \
	binds to "objc:NSValue.-rectValue"

public handler TestReturnNSRect()
	if not the operating system is in ["mac", "ios"] then
		skip test "return NSRange struct succeeds" because "not implemented on" && the operating system
		return
	end if
	
	variable tRect as List
	variable tExponent as Integer
	repeat with tExponent from 1 up to 4
		push the exponential of tExponent onto tRect
	end repeat
	
	variable tRoundTripped as NSRect
	unsafe
		variable tValue as ObjcId
		put NSValueWithRect(tRect) into tValue
		put NSRectFromValue(tValue) into tRoundTripped
	end unsafe
	
	variable tRectList as List
	put tRoundTripped into tRectList
	
	test "return NSRect struct succeeds" when \
		tRectList is tRect
end handler

end module
