script "CoreEngineClipboard"
/*
Copyright (C) 2015 LiveCode Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */


-- Clipboard access requires system interaction so, generally, cannot
-- be run in no-UI mode or on server
on TestSetup
   if the platform is "Linux" then
      TestSkipIf "environment", "server"
      TestSkipIfNot "ui"
   end if
   TestSkipIfNot "desktop"
end TestSetup

-- Utility function that returns the folder containing this test
private function _TestPath
   set the itemDelimiter to slash
   return item 1 to -2 of the filename of me
end _TestPath

-- Utility function that returns the smallest possible valid PNG image
local sTinyPNG
private function _TinyPNG
   if sTinyPNG is empty then 
      put url ("binfile:" & TestGetInputFile("tiny.png")) into sTinyPNG
   end if
   return sTinyPNG
end _TinyPNG

-- Utility function that returns the smallest possible valid GIF image
local sTinyGIF
private function _TinyGIF
   if sTinyGIF is empty then 
      put url ("binfile:" & TestGetInputFile("tiny.gif")) into sTinyGIF
   end if
   return sTinyGIF
end _TinyGIF

-- Utility function that returns the smallest possible valid JPEG image
local sTinyJPEG
private function _TinyJPEG
   if sTinyJPEG is empty then 
      put url ("binfile:" & TestGetInputFile("tiny.jpg")) into sTinyJPEG
   end if
   return sTinyJPEG
end _TinyJPEG

on TestClipboardLocking
   -- Simply test that locking and unlocking the clipboard doesn't throw any errors
   lock the clipboard
   TestAssert "Clipboard locked", true
   unlock the clipboard
   TestAssert "Clipboard unlocked", true
end TestClipboardLocking

on TestClipboardClearing
   -- Test that clearing the clipboard actually clears it
   lock the clipboard
   set the fullClipboardData to empty
   TestAssert "Clipboard is clear", the keys of the fullClipboardData is empty
   unlock the clipboard
end TestClipboardClearing

-- Utility function that ensures all auto-generated formats are present
private command _EnsureAutoGeneratedFormats
   TestAssert "Plain text autogenerated", "text" is among the lines of the keys of the fullClipboardData
   TestAssert "HTML-text autogenerated", "htmltext" is among the lines of the keys of the fullClipboardData
   TestAssert "RTF-text autogenerated", "rtftext" is among the lines of the keys of the fullClipboardData
   TestAssert "Serialised styled text autogenerated", "styles" is among the lines of the keys of the fullClipboardData
   TestAssert "Styled text array autogenerated", "styledtext" is among the lines of the keys of the fullClipboardData
end _EnsureAutoGeneratedFormats

on TestClipboardFullClipboardDataAutogeneration
   -- Place some text on the clipboard and ensure that all the correct types are generated
   lock the clipboard
   set the fullClipboardData["text"] to "LCS test clipboard contents"
   _EnsureAutoGeneratedFormats
   set the fullClipboardData to empty
   set the fullclipboardData["htmltext"] to "<p>LCS test clipboard contents</p>"
   _EnsureAutoGeneratedFormats
   set the fullClipboardData to empty
   set the fullClipboardData["rtftext"] to "{\rtf1\ansi\f0\pard" & return & "LCS test clipboard contents" & return & "\par}"
   _EnsureAutoGeneratedFormats
   set the fullClipboardData to empty

   -- The "styles" and "styledtext" formats are not tested as an autogeneration source because they are quite difficult to synthesize
   unlock the clipboard
end TestClipboardFullClipboardDataAutogeneration

on TestClipboardFullClipboardCoordination
   -- Ensure that writing to the fullClipboardData updates the clipboardData property and vice-versa
   lock the clipboard
   local tTestContents
   put "LCS clipboard test: TestClipboardFullClipboardCoordination" into tTestContents
   set the fullClipboardData to empty
   set the fullClipboardData["text"] to tTestContents
   TestAssert "Getting clipboardData[text]", "text" is among the lines of the keys of the clipboardData and the clipboardData["text"] is tTestContents
   set the fullClipboardData to empty
   TestAssert "clipboardData is empty", the keys of the clipboardData is empty
   set the clipboardData["text"] to tTestContents
   TestAssert "Setting clipboardData[text]", "text" is among the lines of the keys of the fullClipboardData and the fullClipboardData["text"] is tTestContents
   set the fullClipboardData to empty
   unlock the clipboard
end TestClipboardFullClipboardCoordination

on TestClipboardTypeSelection
   -- This ensures that the types presented by the clipboardData property are 'correct'
   -- (where 'correct' is 'how they've always worked')
   lock the clipboard

   -- The priority order is: objects, files, text, images, private
   set the fullClipboardData to empty
   set the fullClipboardData["private"] to "private"
   TestAssert "Private data only", "private" is among the lines of the keys of the clipboardData
   TestAssert "clipboard returns private", clipboard() is "private"
   set the fullClipboardData["image"] to _TinyPNG()
   TestAssert "image > private", "image" is among the lines of the keys of the clipboardData and "private" is not among the lines of the keys of the clipboardData
   TestAssert "clipboard returns image", clipboard() is "image"
   set the fullClipboardData["text"] to "text"
   TestAssert "text > image", "text" is among the lines of the keys of the clipboardData and "image" is not among the lines of the keys of the clipboardData
   TestAssert "clipboard returns text", clipboard() is "text"
   set the fullClipboardData["files"] to "files"
   -- Files and text will appear together, but files takes priority
   TestAssert "files > text", "files" is among the lines of the keys of the clipboardData
   TestAssert "files > text but text is present", "text" is among the lines of the keys of the clipboardData
   TestAssert "text is converted from the files key", the clipboardData["files"] is the clipboardData["text"]
   TestAssert "clipboard returns files", clipboard() is "files"
   set the fullClipboardData["objects"] to 0
   TestAssert "objects > files", "objects" is among the lines of the keys of the clipboardData and "files" is not among the lines of the keys of the clipboardData
   TestAssert "clipboard returns objects", clipboard() is "objects"

   set the fullClipboardData to empty
   unlock the clipboard
end TestClipboardTypeSelection

on TestClipboardMultipleTypes
   -- Tests whether the fullClipboardData can successfully hold multiple types of data simultaneously
   lock the clipboard
   set the fullClipboardData to empty
   set the fullClipboardData["text"] to "text"
   set the fullClipboardData["image"] to _TinyPNG()
   set the fullClipboardData["files"] to "/file/path"
   set the fullClipboardData["private"] to "private"
   TestAssert "Multiple types: text", "text" is among the lines of the keys of the fullClipboardData and fullClipboardData["text"] is "text"
   TestAssert "Multiple types: image", "image" is among the lines of the keys of the fullClipboardData and fullClipboardData["image"] is _TinyPNG()
   TestAssert "Multiple types: files", "files" is among the lines of the keys of the fullClipboardData and line 1 of fullClipboardData["files"] is "/file/path"
   TestAssert "Multiple types: private", "private" is among the lines of the keys of the fullClipboardData and fullClipboardData["private"] is "private"
   set the fullClipboardData to empty
   unlock the clipboard
end TestClipboardMultipleTypes

on TestClipboardImageTypes
   -- Tests whether adding an image to the clipboard generates the appropriate other keys
   lock the clipboard
   set the fullClipboardData["png"] to _TinyPNG()
   TestAssert "PNG is image", "image" is among the lines of the keys of the fullClipboardData and fullClipboardData["image"] is _TinyPNG()
   set the fullClipboardData to empty
   set the fullClipboardData["gif"] to _TinyGIF()
   TestAssert "GIF is image", "image" is among the lines of the keys of the fullClipboardData and fullClipboardData["image"] is _TinyGIF()
   set the fullClipboardData to empty
   set the fullClipboardData["jpeg"] to _TinyJPEG()
   TestAssert "JPEG is image", "image" is among the lines of the keys of the fullClipboardData and fullClipboardData["image"] is _TinyJPEG()
   set the fullClipboardData to empty

   set the fullClipboardData["image"] to _TinyPNG()
   TestAssert "PNG image is detected", "png" is among the lines of the keys of the fullClipboardData and fullClipboardData["png"] is _TinyPNG()
   set the fullClipboardData["image"] to _TinyGIF()
   TestAssert "GIF image is detected", "gif" is among the lines of the keys of the fullClipboardData and fullClipboardData["gif"] is _TinyGIF()
   set the fullClipboardData["image"] to _TinyJPEG()
   TestAssert "JPEG image is detected", "jpeg" is among the lines of the keys of the fullClipboardData and fullClipboardData["jpeg"] is _TinyJPEG()

   set the fullClipboardData to empty
   unlock the clipboard
end TestClipboardImageTypes

on TestClipboardPrivateKey
   set the clipboardData["private"] to "Hello World!"

   TestAssert "private key is present before external change", \
      "private" is among the keys of the clipboardData

   local tHelperFilename, tHelperExtension
   if the environment is "server" then
      put "lc" into tHelperExtension
   else
      put "livecodescript" into tHelperExtension
   end if
   set the itemDelimiter to slash
   put format("%s/_clipboard_private_setter." & tHelperExtension, \
         _TestPath()) into tHelperFilename
   if the environment is "command line" then
      TestRunStack "-ui", tHelperFilename
   else
      TestRunStack "", tHelperFilename
   end if

   TestAssert "helper changed clipboard externally", the result is 0
   
   if the platform is "Linux" then
      TestAssertBroken "private key not present after external change", \
         "private" is not among the keys of the clipboardData, \
         "Bug 19117"
   else
      TestAssert "private key not present after external change", \
         "private" is not among the keys of the clipboardData
   end if
end TestClipboardPrivateKey

# This is a regression test for Bug 19084
on TestClipboardTextToStyled
   set the clipboardData["text"] to "Hello World"
   TestDiagnostic the clipboardData["html"]
   TestAssert "plain text should remain plain in htmltext", \
      the clipboardData["html"] is "<p>Hello World</p>"
end TestClipboardTextToStyled

on _SetToEmpty 

   set clipboardData["image"] to empty

end _SetToEmpty

# This is a test for Bug 17416
on TestCanSetClipboardImageToEmpty
   TestAssertDoesNotThrow "Can set clipboardData image to empty", "_SetToEmpty", the long id of me
end TestCanSetClipboardImageToEmpty