#! /usr/bin/revolution -ui

local sgModuleSymbols
local sgModuleDetails

on startup
  try
    process
  catch tError
    write tError & return to stdout
  end try
end startup

on process
  local tSpec

  read from stdin until eof
  put it into tSpec

  local tLine, tModule
  repeat for each line tLine in tSpec
    if word 1 to -1 of tLine is empty then
      next repeat
    end if

    if char 1 of word 1 of tLine is "#" then
      next repeat
    end if

    if char 1 of tLine is not tab then
      put word 1 of tLine into tModule
      put word 2 to -1 of tLine into sgModuleDetails[tModule]
    else if word 1 to -1 of (char 2 to -1 of tLine) is not empty then
      put word 1 to -1 of (char 2 to -1 of tLine) & return after sgModuleSymbols[tModule]
    end if
  end repeat

  output "#include <stdlib.h>"
  output "#include <stdio.h>"
  output "#include <cstring>"
  output
  output "#if defined(_MACOSX) || defined(_MAC_SERVER)"
  output "#include <mach-o/dyld.h>"
  output "typedef const struct mach_header *module_t;"
  output "#define SYMBOL_PREFIX " & quote & "_" & quote
  output "#elif defined(TARGET_SUBPLATFORM_IPHONE)"
  output "typedef void *module_t;"
  output "extern" && quote & "C" & quote && "void *IOS_LoadModule(const char *);"
  output "extern" && quote & "C" & quote && "void *IOS_ResolveSymbol(void *, const char *);"
  output "#define SYMBOL_PREFIX"
  output "#elif defined(_LINUX) || defined(TARGET_SUBPLATFORM_ANDROID)"
  output "#include <dlfcn.h>"
  output "typedef void *module_t;"
  output "#define SYMBOL_PREFIX"
  output "#elif defined(_WINDOWS)"
  output "#include <windows.h>"
  output "typedef HMODULE module_t;"
  output "#define SYMBOL_PREFIX"
  output "#endif"

  output
  output "typedef void *handler_t;"
  output

  output "extern" && quote & "C" & quote
  output "{"
  output
  output "static int module_load(const char *p_source, module_t *r_module)"
  output "{"
  output "  module_t t_module;"
  output "#if defined(_MACOSX) || defined(_MAC_SERVER)"
  output "  t_module  = NSAddImage(p_source, NSADDIMAGE_OPTION_RETURN_ON_ERROR | NSADDIMAGE_OPTION_WITH_SEARCHING);"
  -- MM-2014-02-06: [[ LipOpenSSL 1.0.1e ]] On Mac, if module cannot be found then look relative to current executable.
  output "  if (t_module == NULL)"
  output "  {"
  output "    uint32_t t_buffer_size;"
  output "    t_buffer_size = 0;"
  output "    _NSGetExecutablePath(NULL, &t_buffer_size);"
  output "    char *t_module_path;"
  output "    t_module_path = (char *) malloc(t_buffer_size + strlen(p_source) + 1);"
  output "    if (t_module_path != NULL)"
  output "    {"
  output "      if (_NSGetExecutablePath(t_module_path, &t_buffer_size) == 0)"
  output "      {"
  output "        char *t_last_slash;"
  output "        t_last_slash = t_module_path + t_buffer_size;"
  output "        for (uint32_t i = 0; i < t_buffer_size; i++)"
  output "        {"
  output "          if (*t_last_slash == '/')"
  output "          {"
  output "            *(t_last_slash + 1) = '\0';"
  output "            break;"
  output "          }"
  output "          t_last_slash--;"
  output "        }"
  output "        strcat(t_module_path, p_source);"
  output "        t_module = NSAddImage(t_module_path, NSADDIMAGE_OPTION_RETURN_ON_ERROR | NSADDIMAGE_OPTION_WITH_SEARCHING);"
  output "      }"
  output "      free(t_module_path);"
  output "    }"
  output "  }"
  output "#elif defined(TARGET_SUBPLATFORM_IPHONE)"
  output "  t_module = IOS_LoadModule(p_source);"
  output "#elif defined(_LINUX) || defined(TARGET_SUBPLATFORM_ANDROID)"
  output "  t_module = dlopen(p_source, RTLD_LAZY);"
  output "#elif defined(_WINDOWS)"
  output "  t_module = LoadLibraryA(p_source);"
  output "#endif"
  output "  if (t_module == NULL)"
  output "    return 0;"
  output "  *r_module = t_module;"
  output "  return 1;"
  output "}"
  output

  -- MM-2014-02-14: [[ LibOpenSSL 1.0.1e ]] Implemented module_unload for Android.
  output "static int module_unload(module_t p_module)"
  output "{"
  output "#if defined(TARGET_SUBPLATFORM_ANDROID)"
  output "  if (p_module != NULL)"
  output "    dlclose(p_module);"
  output "#endif"
  output "  return 1;"
  output "}"
  output
  output "static int module_resolve(module_t p_module, const char *p_name, handler_t *r_handler)"
  output "{"
  output "  handler_t t_handler = NULL;"
  output "#if defined(_MACOSX) || defined(_MAC_SERVER)"
  output "  NSSymbol t_symbol;"
  output "  t_symbol = NSLookupSymbolInImage(p_module, p_name, NSLOOKUPSYMBOLINIMAGE_OPTION_BIND_NOW);"
  output "  if (t_symbol != NULL)"
  output "    t_handler = (handler_t)NSAddressOfSymbol(t_symbol);"
  output "#elif defined(TARGET_SUBPLATFORM_IPHONE)"
  output "  t_handler = (handler_t)IOS_ResolveSymbol(p_module, p_name);"
  output "#elif defined(_LINUX) || defined(TARGET_SUBPLATFORM_ANDROID)"
  output "  t_handler = (handler_t)dlsym(p_module, p_name);"
  output "#elif defined(_WINDOWS)"
  output "  t_handler = (handler_t)GetProcAddress(p_module, p_name);"
  output "#endif"
  output "  if (t_handler == NULL)"
  output "    return 0;"
  output "  *r_handler = t_handler;"
  output "  return 1;"
  output "}"
  output

  repeat for each line tModule in the keys of sgModuleDetails
    generateModule tModule
  end repeat
#include <assert.h>
  output "}"
end process

on generateModule pModule
  local tUnixLibrary, tDarwinLibrary, tWindowsLibrary
  
  put word 1 of sgModuleDetails[pModule] into tUnixLibrary
  put word 2 of sgModuleDetails[pModule] into tDarwinLibrary
  put word 3 of sgModuleDetails[pModule] into tWindowsLibrary

  local tSymbols
  put sgModuleSymbols[pModule] into tSymbols

  local tSymbol
  repeat for each line tSymbol in tSymbols
    if not symbolIsReference(tSymbol) then
      output "typedef " & typelistToProto(symbolOutputs(tSymbol), false) & "(*" & symbolName(tSymbol) & "_t)(" & typelistToProto(symbolInputs(tSymbol), true) & ");"
      output symbolName(tSymbol) & "_t" && symbolName(tSymbol) & "_ptr = NULL;"
    else
      output "void *" & symbolName(tSymbol) & "_ptr = NULL;"
    end if
  #  output "handler_t " & tSymbol & "_ptr = NULL;"
  end repeat

  output

  output "#if defined(_MACOSX) || defined(TARGET_SUBPLATFORM_IPHONE) || defined(_MAC_SERVER)"
  output "#define MODULE_" & toUpper(pModule) & "_NAME" && quote & tDarwinLibrary & quote
  output "#elif defined(_LINUX)"
  output "#define MODULE_" & toUpper(pModule) & "_NAME" && quote & tUnixLibrary & quote
  -- MM-2014-02-10: [[ LipOpenSSL 1.0.1e ]] Prefix android modules with lib.
  output "#elif defined(TARGET_SUBPLATFORM_ANDROID)"
  output "#define MODULE_" & toUpper(pModule) & "_NAME" && quote & "lib" & tUnixLibrary & quote
  output "#elif defined(_WINDOWS)"
  output "#define MODULE_" & toUpper(pModule) & "_NAME" && quote & tWindowsLibrary & quote
  output "#endif"
  output
  output "static module_t module_" & pModule & " = NULL;"
  output

  -- MM-2014-02-14: [[ LibOpenSSL 1.0.1e ]] Added finalise function and made sure staid variables are initialised to NULL.
  output "void finalise_weak_link_" & pModule & "(void)"
  output "{"
  output "  module_unload(module_" & pModule & ");"
  output "  module_" & pModule & " = NULL;"
  output "}"
  output
  
  -- IM-2014-03-21: [[ revBrowserCEF ]] Modify init function to take a path
  output "int initialise_weak_link_" & pModule & "_with_path(const char *p_path)"
  output "{"
  output "  module_" & pModule & " = NULL;"
  output merge("  if (!module_load(p_path, &module_[[pModule]]))")
  output "{"
  output "#ifdef _DEBUG"
  output "    fprintf(stderr, " & quote & "Unable to load library: %s\n" & quote & ", p_path);"
  output "#endif"
  output "goto err;"
  output "}"


  output
  
  repeat for each line tSymbol in tSymbols
    if symbolIsOptional(tSymbol) then
      output merge("module_resolve(module_[[pModule]], SYMBOL_PREFIX [[quote]][[symbolName(tSymbol)]][[quote]], (handler_t *)&[[symbolName(tSymbol)]]_ptr);")
    else
      output merge("  if (!module_resolve(module_[[pModule]], SYMBOL_PREFIX [[quote]][[symbolName(tSymbol)]][[quote]], (handler_t *)&[[symbolName(tSymbol)]]_ptr))")
      output "{" 
      output "#ifdef _DEBUG"
      output "fprintf(stderr, " & quote & "Unable to load: " & symbolName(tSymbol) & "\n" & quote & "); "
      output "#endif"
      output "goto err; "
      output "}"

    end if
  end repeat

  output
  output "  return 1;"
  output
  output "err:"
  output merge("  if (module_[[pModule]] != NULL)")
  output merge("    module_unload(module_[[pModule]]);")
  output
  output "  return 0;"
  output "}"
  output

  -- IM-2014-03-21: [[ revBrowserCEF ]] Standard init calls initialise_weak_link_*_with_path
  output "int initialise_weak_link_" & pModule & "(void)"
  output "{"
   output "#if defined(_LINUX)"
  --Modified to allow comma seperated list of possible lib names on linux
  set the itemdelimiter to ","
  local tModuleItem
  repeat for each item tModuleItem in tUnixLibrary
    output merge("  if (!initialise_weak_link_[[pModule]]_with_path([[quote & tModuleItem & quote]]))")
  end repeat

  output "#else"

  output merge("  if (!initialise_weak_link_[[pModule]]_with_path(MODULE_[[toUpper(pModule)]]_NAME))")
  output "#endif"

  output "{"
  output "#ifdef _DEBUG"
  output "    fprintf(stderr, " & quote & "Unable to load library: " & tUnixLibrary & "\n" & quote & ") ;"
  output "#endif"
  output "return 0;"
  output "}"
  output
  output "return -1;"
  output "}"
  output


  repeat for each line tSymbol in tSymbols
    local tInputs, tOutputs, tArgs, tIndex

    if symbolIsReference(tSymbol) then
      next repeat
    end if

    put typelistToProto(symbolOutputs(tSymbol), false) into tOutputs
    put typelistToProto(symbolInputs(tSymbol), true) into tInputs
    put empty into tArgs
    if tInputs is not "void" then
      repeat with tIndex = 1 to the number of items of tInputs
        put "pArg" & tIndex & comma & space after tArgs
      end repeat
      delete char -2 to -1 of tArgs
    end if
    output merge("[[tOutputs]][[symbolName(tSymbol)]]([[tInputs]])")
    output "{"
    if tOutputs is not "void " then
      output merge("  return [[symbolName(tSymbol)]]_ptr([[tArgs]]);")
    else
      output merge("  [[symbolName(tSymbol)]]_ptr([[tArgs]]);")
    end if
    output "}"
    output
  end repeat

end generateModule

function symbolName pSymbol
  set the itemDelimiter to ":"
  if word 1 of item 1 of pSymbol is "?" then
    return word 2 of item 1 of pSymbol
  else if word 1 of item 1 of pSymbol is "@" then
    return word 2 of item 1 of pSymbol
  end if
  return item 1 of pSymbol
end symbolName

function symbolIsOptional pSymbol
  return char 1 of pSymbol is "?"
end symbolIsOptional

function symbolIsReference pSymbol
  return char 1 of pSymbol is "@"
end symbolIsReference

function symbolInputs pSymbol
  local tSpec, tResultList, tResult, tItem
  set the itemDelimiter to ":"
  put item 2 of pSymbol into tSpec
  put char 2 to -2 of word 1 to -1 of (char 1 to offset("->", tSpec) - 1 of tSpec) into tResultList
  set the itemDelimiter to comma
  repeat for each item tItem in tResultList
    put word 1 to -1 of tItem & return after tResult
  end repeat
  delete the last char of tResult
  return tResult
end symbolInputs

function symbolOutputs pSymbol
  local tSpec, tResultList, tResult, tItem
  set the itemDelimiter to ":"
  put item 2 of pSymbol into tSpec
  put char 2 to -2 of word 1 to -1 of (char offset("->", tSpec) + 3 to -1 of tSpec) into tResultList
  set the itemDelimiter to comma
  repeat for each item tItem in tResultList
    put word 1 to -1 of tItem & return after tResult
  end repeat
  delete the last char of tResult
  return tResult
end symbolOutputs

function typelistToProto pList, pWithArgs
  local tProto, tType, tIndex
  put 1 into tIndex
  repeat for each line tType in pList
    switch tType
      case "pointer"
        put "void *" after tProto
      break
      case "integer"
        put "int " after tProto
      break
	  case "integer64"
        put "long long int " after tProto
      break
      case "double"
        put "double " after tProto
      break
      default
        throw "Unknown type specified: " & tType
      break
    end switch
    if pWithArgs then
      put "pArg" & tIndex after tProto
    end if
    put comma & space after tProto
    add 1 to tIndex
  end repeat
  delete char -2 to -1 of tProto
  if tProto is empty then
    put "void" into tProto
    if not pWithArgs then
      put space after tProto
    end if
  end if
  return tProto
end typelistToProto

on output pLine
  write pLine & return to stdout
end output

